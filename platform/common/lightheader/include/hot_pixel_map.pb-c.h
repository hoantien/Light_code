/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: hot_pixel_map.proto */

#ifndef PROTOBUF_C_hot_5fpixel_5fmap_2eproto__INCLUDED
#define PROTOBUF_C_hot_5fpixel_5fmap_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ltpb__HotPixelMap Ltpb__HotPixelMap;
typedef struct _Ltpb__HotPixelMap__HotPixelMeasurement Ltpb__HotPixelMap__HotPixelMeasurement;


/* --- enums --- */


/* --- messages --- */

struct  _Ltpb__HotPixelMap__HotPixelMeasurement
{
  ProtobufCMessage base;
  /*
   * offset to the data
   */
  uint64_t data_offset;
  /*
   * data size in bytes
   */
  uint32_t data_size;
  /*
   * in ISO units, e.g., 100 == ISO100, might include digital gain
   */
  uint32_t gain;
  /*
   * in microseconds        
   */
  protobuf_c_boolean has_exposure;
  uint64_t exposure;
  /*
   * the tolerance of linear increase of intensity as a function of exposure
   * if the pixel lits up too fast or too slow this condition does not pass
   */
  protobuf_c_boolean has_gradient_threshold;
  float gradient_threshold;
  /*
   * the maximum allowable deviation from the black level
   * if pixel's estimated black level is more than that it's marked hot in the bitmap
   */
  protobuf_c_boolean has_black_level_threshold;
  float black_level_threshold;
};
#define LTPB__HOT_PIXEL_MAP__HOT_PIXEL_MEASUREMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__hot_pixel_map__hot_pixel_measurement__descriptor) \
    , 0, 0, 0, 0,0, 0,0, 0,0 }


/*
 * structure holding hot pixel map data
 */
struct  _Ltpb__HotPixelMap
{
  ProtobufCMessage base;
  size_t n_data;
  Ltpb__HotPixelMap__HotPixelMeasurement **data;
};
#define LTPB__HOT_PIXEL_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__hot_pixel_map__descriptor) \
    , 0,NULL }


/* Ltpb__HotPixelMap__HotPixelMeasurement methods */
void   ltpb__hot_pixel_map__hot_pixel_measurement__init
                     (Ltpb__HotPixelMap__HotPixelMeasurement         *message);
/* Ltpb__HotPixelMap methods */
void   ltpb__hot_pixel_map__init
                     (Ltpb__HotPixelMap         *message);
size_t ltpb__hot_pixel_map__get_packed_size
                     (const Ltpb__HotPixelMap   *message);
size_t ltpb__hot_pixel_map__pack
                     (const Ltpb__HotPixelMap   *message,
                      uint8_t             *out);
size_t ltpb__hot_pixel_map__pack_to_buffer
                     (const Ltpb__HotPixelMap   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__HotPixelMap *
       ltpb__hot_pixel_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__hot_pixel_map__free_unpacked
                     (Ltpb__HotPixelMap *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ltpb__HotPixelMap__HotPixelMeasurement_Closure)
                 (const Ltpb__HotPixelMap__HotPixelMeasurement *message,
                  void *closure_data);
typedef void (*Ltpb__HotPixelMap_Closure)
                 (const Ltpb__HotPixelMap *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ltpb__hot_pixel_map__descriptor;
extern const ProtobufCMessageDescriptor ltpb__hot_pixel_map__hot_pixel_measurement__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_hot_5fpixel_5fmap_2eproto__INCLUDED */
