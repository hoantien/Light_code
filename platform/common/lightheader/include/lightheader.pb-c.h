/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: lightheader.proto */

#ifndef PROTOBUF_C_lightheader_2eproto__INCLUDED
#define PROTOBUF_C_lightheader_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "camera_module.pb-c.h"
#include "camera_id.pb-c.h"
#include "time_stamp.pb-c.h"
#include "geometric_calibration.pb-c.h"
#include "color_calibration.pb-c.h"
#include "sensor_characterization.pb-c.h"
#include "vignetting_characterization.pb-c.h"
#include "hot_pixel_map.pb-c.h"
#include "device_temp.pb-c.h"
#include "dead_pixel_map.pb-c.h"
#include "tof_calibration.pb-c.h"
#include "flash_calibration.pb-c.h"
#include "sensor_type.pb-c.h"
#include "hw_info.pb-c.h"
#include "view_preferences.pb-c.h"
#include "proximity_sensors.pb-c.h"
#include "imu_data.pb-c.h"

typedef struct _Ltpb__FactoryDeviceCalibration Ltpb__FactoryDeviceCalibration;
typedef struct _Ltpb__FactoryModuleCalibration Ltpb__FactoryModuleCalibration;
typedef struct _Ltpb__ColorCalibrationGold Ltpb__ColorCalibrationGold;
typedef struct _Ltpb__SensorData Ltpb__SensorData;
typedef struct _Ltpb__LightHeader Ltpb__LightHeader;


/* --- enums --- */


/* --- messages --- */

struct  _Ltpb__FactoryDeviceCalibration
{
  ProtobufCMessage base;
  /*
   * Flash calibration data
   */
  Ltpb__FlashCalibration *flash;
  /*
   * Time-of-Flight sensor calibration
   */
  Ltpb__ToFCalibration *tof;
  /*
   * Time stamp of when the device was calibrated in the factory.
   */
  Ltpb__TimeStamp *time_stamp;
};
#define LTPB__FACTORY_DEVICE_CALIBRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__factory_device_calibration__descriptor) \
    , NULL, NULL, NULL }


struct  _Ltpb__FactoryModuleCalibration
{
  ProtobufCMessage base;
  /*
   * camera id
   */
  Ltpb__CameraID camera_id;
  /*
   * Factory color calibration
   */
  size_t n_color;
  Ltpb__ColorCalibration **color;
  /*
   * Geometric calibration
   */
  Ltpb__GeometricCalibration *geometry;
  /*
   * Color vignetting characterization (includes cross-talk)
   */
  Ltpb__VignettingCharacterization *vignetting;
  /*
   * Hot pixel map
   */
  Ltpb__HotPixelMap *hot_pixel_map;
  /*
   * Dead pixel map
   */
  Ltpb__DeadPixelMap *dead_pixel_map;
  /*
   * Time stamp of when the device was calibrated in the factory.
   */
  Ltpb__TimeStamp *time_stamp;
};
#define LTPB__FACTORY_MODULE_CALIBRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__factory_module_calibration__descriptor) \
    , 0, 0,NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Ltpb__ColorCalibrationGold
{
  ProtobufCMessage base;
  /*
   * camera id
   */
  Ltpb__CameraID camera_id;
  size_t n_data;
  Ltpb__ColorCalibration **data;
  /*
   * Time stamp of when the device was calibrated in the factory.
   */
  Ltpb__TimeStamp *time_stamp;
};
#define LTPB__COLOR_CALIBRATION_GOLD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__color_calibration_gold__descriptor) \
    , 0, 0,NULL, NULL }


struct  _Ltpb__SensorData
{
  ProtobufCMessage base;
  /*
   * sensor type
   */
  Ltpb__SensorType type;
  /*
   * noise characterization, black/white levels, etc..
   */
  Ltpb__SensorCharacterization *data;
  /*
   * Time stamp of when the sensor was characterized.
   */
  Ltpb__TimeStamp *time_stamp;
};
#define LTPB__SENSOR_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__sensor_data__descriptor) \
    , 0, NULL, NULL }


struct  _Ltpb__LightHeader
{
  ProtobufCMessage base;
  /*
   * global per capture properties
   */
  /*
   * low 64 bits of 128 bit UUID
   */
  protobuf_c_boolean has_image_unique_id_low;
  uint64_t image_unique_id_low;
  /*
   * high 64 bits of 128 bit UUID
   */
  protobuf_c_boolean has_image_unique_id_high;
  uint64_t image_unique_id_high;
  Ltpb__TimeStamp *image_time_stamp;
  protobuf_c_boolean has_image_focal_length;
  int32_t image_focal_length;
  protobuf_c_boolean has_image_reference_camera;
  Ltpb__CameraID image_reference_camera;
  /*
   * global per device properties
   */
  /*
   * low 64 bits of 128 bit UUID
   */
  protobuf_c_boolean has_device_unique_id_low;
  uint64_t device_unique_id_low;
  /*
   * high 64 bits of 128 bit UUID
   */
  protobuf_c_boolean has_device_unique_id_high;
  uint64_t device_unique_id_high;
  char *device_model_name;
  char *device_fw_version;
  char *device_asic_fw_version;
  Ltpb__DeviceTemp *device_temperature;
  /*
   * captured camera properties
   */
  size_t n_modules;
  Ltpb__CameraModule **modules;
  size_t n_module_calibration;
  Ltpb__FactoryModuleCalibration **module_calibration;
  Ltpb__FactoryDeviceCalibration *device_calibration;
  /*
   * color calibration data for the "golden" module
   */
  size_t n_gold_cc;
  Ltpb__ColorCalibrationGold **gold_cc;
  size_t n_sensor_data;
  Ltpb__SensorData **sensor_data;
  /*
   * time-of-flight sensor properties
   */
  /*
   * ToF sensor reading, distance in mm
   */
  protobuf_c_boolean has_tof_range;
  float tof_range;
  /*
   * Hardware specification information block
   */
  Ltpb__HwInfo *hw_info;
  /*
   * View preferences specified at the capture time
   */
  Ltpb__ViewPreferences *view_preferences;
  /*
   * Proximity sensor data
   */
  /*
   * binary: occlusion detected/not detected
   */
  Ltpb__ProximitySensors *proximity_sensors;
  /*
   * IMU measurements
   */
  Ltpb__IMUData *imu_data;
};
#define LTPB__LIGHT_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__light_header__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,NULL, 0,NULL, NULL, 0,NULL, 0,NULL, 0,0, NULL, NULL, NULL, NULL }


/* Ltpb__FactoryDeviceCalibration methods */
void   ltpb__factory_device_calibration__init
                     (Ltpb__FactoryDeviceCalibration         *message);
size_t ltpb__factory_device_calibration__get_packed_size
                     (const Ltpb__FactoryDeviceCalibration   *message);
size_t ltpb__factory_device_calibration__pack
                     (const Ltpb__FactoryDeviceCalibration   *message,
                      uint8_t             *out);
size_t ltpb__factory_device_calibration__pack_to_buffer
                     (const Ltpb__FactoryDeviceCalibration   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__FactoryDeviceCalibration *
       ltpb__factory_device_calibration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__factory_device_calibration__free_unpacked
                     (Ltpb__FactoryDeviceCalibration *message,
                      ProtobufCAllocator *allocator);
/* Ltpb__FactoryModuleCalibration methods */
void   ltpb__factory_module_calibration__init
                     (Ltpb__FactoryModuleCalibration         *message);
size_t ltpb__factory_module_calibration__get_packed_size
                     (const Ltpb__FactoryModuleCalibration   *message);
size_t ltpb__factory_module_calibration__pack
                     (const Ltpb__FactoryModuleCalibration   *message,
                      uint8_t             *out);
size_t ltpb__factory_module_calibration__pack_to_buffer
                     (const Ltpb__FactoryModuleCalibration   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__FactoryModuleCalibration *
       ltpb__factory_module_calibration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__factory_module_calibration__free_unpacked
                     (Ltpb__FactoryModuleCalibration *message,
                      ProtobufCAllocator *allocator);
/* Ltpb__ColorCalibrationGold methods */
void   ltpb__color_calibration_gold__init
                     (Ltpb__ColorCalibrationGold         *message);
size_t ltpb__color_calibration_gold__get_packed_size
                     (const Ltpb__ColorCalibrationGold   *message);
size_t ltpb__color_calibration_gold__pack
                     (const Ltpb__ColorCalibrationGold   *message,
                      uint8_t             *out);
size_t ltpb__color_calibration_gold__pack_to_buffer
                     (const Ltpb__ColorCalibrationGold   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__ColorCalibrationGold *
       ltpb__color_calibration_gold__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__color_calibration_gold__free_unpacked
                     (Ltpb__ColorCalibrationGold *message,
                      ProtobufCAllocator *allocator);
/* Ltpb__SensorData methods */
void   ltpb__sensor_data__init
                     (Ltpb__SensorData         *message);
size_t ltpb__sensor_data__get_packed_size
                     (const Ltpb__SensorData   *message);
size_t ltpb__sensor_data__pack
                     (const Ltpb__SensorData   *message,
                      uint8_t             *out);
size_t ltpb__sensor_data__pack_to_buffer
                     (const Ltpb__SensorData   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__SensorData *
       ltpb__sensor_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__sensor_data__free_unpacked
                     (Ltpb__SensorData *message,
                      ProtobufCAllocator *allocator);
/* Ltpb__LightHeader methods */
void   ltpb__light_header__init
                     (Ltpb__LightHeader         *message);
size_t ltpb__light_header__get_packed_size
                     (const Ltpb__LightHeader   *message);
size_t ltpb__light_header__pack
                     (const Ltpb__LightHeader   *message,
                      uint8_t             *out);
size_t ltpb__light_header__pack_to_buffer
                     (const Ltpb__LightHeader   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__LightHeader *
       ltpb__light_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__light_header__free_unpacked
                     (Ltpb__LightHeader *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ltpb__FactoryDeviceCalibration_Closure)
                 (const Ltpb__FactoryDeviceCalibration *message,
                  void *closure_data);
typedef void (*Ltpb__FactoryModuleCalibration_Closure)
                 (const Ltpb__FactoryModuleCalibration *message,
                  void *closure_data);
typedef void (*Ltpb__ColorCalibrationGold_Closure)
                 (const Ltpb__ColorCalibrationGold *message,
                  void *closure_data);
typedef void (*Ltpb__SensorData_Closure)
                 (const Ltpb__SensorData *message,
                  void *closure_data);
typedef void (*Ltpb__LightHeader_Closure)
                 (const Ltpb__LightHeader *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ltpb__factory_device_calibration__descriptor;
extern const ProtobufCMessageDescriptor ltpb__factory_module_calibration__descriptor;
extern const ProtobufCMessageDescriptor ltpb__color_calibration_gold__descriptor;
extern const ProtobufCMessageDescriptor ltpb__sensor_data__descriptor;
extern const ProtobufCMessageDescriptor ltpb__light_header__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_lightheader_2eproto__INCLUDED */
