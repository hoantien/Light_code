/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sensor_characterization.proto */

#ifndef PROTOBUF_C_sensor_5fcharacterization_2eproto__INCLUDED
#define PROTOBUF_C_sensor_5fcharacterization_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ltpb__SensorCharacterization Ltpb__SensorCharacterization;
typedef struct _Ltpb__SensorCharacterization__VstNoiseModel Ltpb__SensorCharacterization__VstNoiseModel;
typedef struct _Ltpb__SensorCharacterization__VstNoiseModel__VstModel Ltpb__SensorCharacterization__VstNoiseModel__VstModel;


/* --- enums --- */


/* --- messages --- */

/*
 * The vstmodel is just sqrt(ax+b)
 */
struct  _Ltpb__SensorCharacterization__VstNoiseModel__VstModel
{
  ProtobufCMessage base;
  float a;
  float b;
};
#define LTPB__SENSOR_CHARACTERIZATION__VST_NOISE_MODEL__VST_MODEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__sensor_characterization__vst_noise_model__vst_model__descriptor) \
    , 0, 0 }


/*
 * This model holds the parameters for the sensor at a given iso.
 */
struct  _Ltpb__SensorCharacterization__VstNoiseModel
{
  ProtobufCMessage base;
  /*
   * gain in ISO unit at which the noise was characterized
   */
  uint32_t gain;
  /*
   * noise threshold (the same for all color channels)
   */
  float threshold;
  /*
   * normalizes VST transfrom output to 0..1 range
   */
  float scale;
  Ltpb__SensorCharacterization__VstNoiseModel__VstModel *red;
  Ltpb__SensorCharacterization__VstNoiseModel__VstModel *green;
  Ltpb__SensorCharacterization__VstNoiseModel__VstModel *blue;
  Ltpb__SensorCharacterization__VstNoiseModel__VstModel *panchromatic;
};
#define LTPB__SENSOR_CHARACTERIZATION__VST_NOISE_MODEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__sensor_characterization__vst_noise_model__descriptor) \
    , 0, 0, 0, NULL, NULL, NULL, NULL }


struct  _Ltpb__SensorCharacterization
{
  ProtobufCMessage base;
  float black_level;
  float white_level;
  protobuf_c_boolean has_cliff_slope;
  float cliff_slope;
  size_t n_vst_model;
  Ltpb__SensorCharacterization__VstNoiseModel **vst_model;
};
#define LTPB__SENSOR_CHARACTERIZATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__sensor_characterization__descriptor) \
    , 0, 0, 0,0, 0,NULL }


/* Ltpb__SensorCharacterization__VstNoiseModel__VstModel methods */
void   ltpb__sensor_characterization__vst_noise_model__vst_model__init
                     (Ltpb__SensorCharacterization__VstNoiseModel__VstModel         *message);
/* Ltpb__SensorCharacterization__VstNoiseModel methods */
void   ltpb__sensor_characterization__vst_noise_model__init
                     (Ltpb__SensorCharacterization__VstNoiseModel         *message);
/* Ltpb__SensorCharacterization methods */
void   ltpb__sensor_characterization__init
                     (Ltpb__SensorCharacterization         *message);
size_t ltpb__sensor_characterization__get_packed_size
                     (const Ltpb__SensorCharacterization   *message);
size_t ltpb__sensor_characterization__pack
                     (const Ltpb__SensorCharacterization   *message,
                      uint8_t             *out);
size_t ltpb__sensor_characterization__pack_to_buffer
                     (const Ltpb__SensorCharacterization   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__SensorCharacterization *
       ltpb__sensor_characterization__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__sensor_characterization__free_unpacked
                     (Ltpb__SensorCharacterization *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ltpb__SensorCharacterization__VstNoiseModel__VstModel_Closure)
                 (const Ltpb__SensorCharacterization__VstNoiseModel__VstModel *message,
                  void *closure_data);
typedef void (*Ltpb__SensorCharacterization__VstNoiseModel_Closure)
                 (const Ltpb__SensorCharacterization__VstNoiseModel *message,
                  void *closure_data);
typedef void (*Ltpb__SensorCharacterization_Closure)
                 (const Ltpb__SensorCharacterization *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ltpb__sensor_characterization__descriptor;
extern const ProtobufCMessageDescriptor ltpb__sensor_characterization__vst_noise_model__descriptor;
extern const ProtobufCMessageDescriptor ltpb__sensor_characterization__vst_noise_model__vst_model__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sensor_5fcharacterization_2eproto__INCLUDED */
