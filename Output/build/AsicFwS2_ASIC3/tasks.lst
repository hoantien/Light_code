   1              		.syntax unified
   2              		.cpu cortex-r4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.prvListTaskWithinSingleList,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	prvListTaskWithinSingleList:
  24              	.LFB39:
  25              		.file 1 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c"
   1:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
   2:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     All rights reserved
   4:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
   5:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
   7:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
   9:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  13:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     ***************************************************************************
  14:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     ***************************************************************************
  19:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  20:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  25:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     ***************************************************************************
  26:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *                                                                       *
  27:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *                                                                       *
  32:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****      *                                                                       *
  37:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     ***************************************************************************
  38:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  39:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     defined configASSERT()?
  42:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  43:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     participating in the support forum.
  46:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  47:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  52:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  56:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  59:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  63:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  67:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****     1 tab == 4 spaces!
  68:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** */
  69:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  70:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Standard includes. */
  71:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #include <stdlib.h>
  72:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #include <string.h>
  73:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  74:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** task.h is included from an application file. */
  77:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  79:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* FreeRTOS includes. */
  80:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #include "FreeRTOS.h"
  81:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #include "task.h"
  82:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #include "timers.h"
  83:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #include "StackMacros.h"
  84:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  85:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  91:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** functions but without including stdio.h here. */
  93:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#include <stdio.h>
  99:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 101:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Sanity check the configuration. */
 102:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
 103:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if( INCLUDE_vTaskSuspend != 1 )
 104:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
 105:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 106:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 107:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 108:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 109:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 111:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 112:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 113:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 114:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 115:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 116:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 117:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #else
 118:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 119:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 120:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Value that can be assigned to the eNotifyState member of the TCB. */
 122:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** typedef enum
 123:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
 124:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eNotWaitingNotification = 0,
 125:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eWaitingNotification,
 126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eNotified
 127:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** } eNotifyValue;
 128:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 129:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 130:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 131:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 132:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * (the task's run time environment, including register values)
 133:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 134:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** typedef struct tskTaskControlBlock
 135:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
 136:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 137:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 138:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 139:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 140:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocat
 141:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 143:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 144:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 145:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 146:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 147:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 148:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 149:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 150:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 151:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 152:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 153:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 154:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do n
 155:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 156:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 157:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 158:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 159:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. 
 160:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 161:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 162:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		UBaseType_t 	uxMutexesHeld;
 165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 166:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 168:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 169:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 170:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 171:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 172:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 173:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 174:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 175:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 176:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 177:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 178:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 179:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 180:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 181:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 182:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 183:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 184:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 185:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 186:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 187:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		struct 	_reent xNewLib_reent;
 188:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 189:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 190:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 191:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 192:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		volatile eNotifyValue eNotifyState;
 193:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
 194:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 195:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** } tskTCB;
 196:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 197:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 198:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 199:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** typedef tskTCB TCB_t;
 200:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 201:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 202:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 203:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * be global, rather than file scope.
 204:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 205:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 206:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define static
 207:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 208:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 209:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 210:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static variables must be declared volatile. */
 211:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 212:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 213:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 214:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 215:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 216:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 217:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 218:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 219:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 220:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 221:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 222:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 223:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 224:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 225:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
 226:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 227:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 228:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 229:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 230:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 231:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 232:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 233:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 234:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 235:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 236:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 237:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 238:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 239:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 240:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 241:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 242:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 243:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 245:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 246:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 247:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 248:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 249:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 250:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 251:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 252:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 253:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** interrupts must not manipulate the xGenericListItem of a TCB, or any of the
 254:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** lists the xGenericListItem can be referenced from, if the scheduler is suspended.
 255:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 256:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 257:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 258:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 259:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** accessed from a critical section. */
 260:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 261:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 262:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 263:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 264:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 265:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 266:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 267:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 268:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 269:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*lint +e956 */
 270:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 271:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 272:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 273:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 274:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 275:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 276:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 277:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 278:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 279:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 280:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 281:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 282:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 283:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 284:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 285:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 286:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 287:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 288:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 289:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 290:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 291:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 292:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 293:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	microcontroller architecture. */
 294:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 295:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 296:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	state task. */
 297:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 298:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{																									\
 299:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 300:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{																								\
 301:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 302:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}																								\
 303:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 304:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 305:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 306:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 307:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 308:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{																									\
 309:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 310:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 311:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{																								\
 312:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 313:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			--uxTopReadyPriority;																		\
 314:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}																								\
 315:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 																										\
 316:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 317:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 318:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 319:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 320:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 321:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 322:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 323:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 324:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 325:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	being used. */
 326:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 327:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 328:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 329:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 330:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 331:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 332:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 333:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	architecture being used. */
 334:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 335:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 336:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 337:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 338:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 339:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 340:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 341:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{																								\
 342:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 343:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 																									\
 344:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 345:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 346:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 347:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 348:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 349:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 350:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 351:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 352:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 353:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 354:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 355:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 356:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{																									\
 357:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 358:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{																								\
 359:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 360:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}																								\
 361:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 362:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 363:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 364:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 365:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 366:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 367:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 368:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** count overflows. */
 369:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 370:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {																									\
 371:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	List_t *pxTemp;																					\
 372:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 																									\
 373:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 374:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 375:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 																									\
 376:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 377:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 378:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 379:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	xNumOfOverflows++;																				\
 380:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 381:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 382:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 383:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 384:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 385:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 386:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 387:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 388:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 389:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 390:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 391:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 392:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 393:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 394:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 395:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 396:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 397:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 398:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 399:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 400:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 401:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 402:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 403:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 404:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 405:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 406:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 407:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 408:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 409:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 410:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** to its original value when it is released. */
 411:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 412:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 413:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #else
 414:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 415:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 416:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 417:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 418:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 419:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 420:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 421:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 422:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if configUSE_TICK_HOOK > 0
 423:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 424:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 425:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 426:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* File private functions. --------------------------------*/
 427:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 428:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 429:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 430:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * into the TCB structure.
 431:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 432:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
 433:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 434:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /**
 435:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 436:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 437:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * is in any other state.
 438:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 439:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 440:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 441:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 442:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 443:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 444:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 445:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * automatically upon the creation of the first task.
 446:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 447:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 448:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 449:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 450:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 451:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 452:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * creation of the first user task.
 453:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
 454:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 455:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 456:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
 457:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 458:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
 459:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 460:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 461:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 462:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 463:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 464:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * including the stack pointed to by the TCB.
 465:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
 466:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 467:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 468:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 469:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 470:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 471:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 472:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 473:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 474:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 475:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 476:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 477:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 478:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * and its TCB deleted.
 479:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 480:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 481:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 482:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 483:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 484:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * either the current or the overflow delayed task list.
 485:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 486:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
 487:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 488:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 489:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 490:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * allocation was successful.
 491:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 492:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
 493:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 494:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 495:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 496:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 497:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * a suspended list, etc.).
 498:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
 499:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 500:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 501:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 502:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 503:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 504:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
 505:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 506:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 507:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 508:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 509:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 510:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 511:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 512:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 513:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 514:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 515:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 516:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 517:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 518:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 519:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 520:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 521:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 522:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
 523:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 524:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 525:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 526:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * set to a value other than 1.
 527:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 528:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 529:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 530:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 531:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 532:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 533:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 534:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
 535:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 536:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * will exit the Blocked state.
 537:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
 538:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 539:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 540:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 541:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 542:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/*
 543:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 544:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	 * human readable tables of task information.
 545:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	 */
 546:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 547:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 548:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif
 549:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 550:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 551:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t
 552:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
 553:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
 554:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t * pxNewTCB;
 555:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** StackType_t *pxTopOfStack;
 556:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxTaskCode );
 558:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 559:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 560:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 561:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	checking that the allocation was successful. */
 562:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 563:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 564:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( pxNewTCB != NULL )
 565:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 566:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 567:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 568:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			BaseType_t xRunPrivileged;
 569:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 570:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 571:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 572:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 573:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 574:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 575:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 576:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 577:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 578:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 579:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( puxStackBuffer != NULL )
 580:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 581:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The application provided its own stack.  Note this so no
 582:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				attempt is made to delete the stack should that task be
 583:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				deleted. */
 584:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
 585:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 586:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 587:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 588:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The stack was allocated dynamically.  Note this so it can be
 589:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				deleted again if the task is deleted. */
 590:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
 591:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 592:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 593:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 594:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 595:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 596:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 597:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		required by the port. */
 598:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 599:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 600:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 601:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 602:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 603:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 604:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 605:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 606:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 607:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 608:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 609:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 610:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 611:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 612:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 613:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 614:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 615:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			other extreme of the stack space. */
 616:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 617:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 618:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 619:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 620:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 621:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 622:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 623:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 624:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 625:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 626:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the	top of stack variable is updated. */
 627:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 628:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 629:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 630:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 631:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 632:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 634:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 635:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 636:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 638:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 639:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 640:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 641:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			required.*/
 642:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 643:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 644:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
 645:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 646:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 647:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 648:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 649:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 650:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		updated. */
 651:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
 652:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 653:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 654:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 655:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 656:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 657:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				the suspended state - make this the current task. */
 658:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 659:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 660:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 661:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 662:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 663:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 664:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					fails, but we will report the failure. */
 665:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvInitialiseTaskLists();
 666:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 667:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
 668:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 669:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 670:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 671:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 672:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 673:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 674:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 675:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				current task if it is the highest priority task to be created
 676:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				so far. */
 677:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 678:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 679:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 680:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 681:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 682:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 683:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
 684:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 685:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 686:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 687:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 688:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
 689:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 690:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 691:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 692:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 693:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 694:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxTaskNumber++;
 695:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 696:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 697:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 698:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 699:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 700:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 701:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 702:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 703:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 704:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 705:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 706:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = pdPASS;
 707:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 708:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 709:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
 710:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 711:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
 712:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 713:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 714:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 715:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 716:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 717:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( xReturn == pdPASS )
 718:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 719:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 720:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 721:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 722:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			then it should run now. */
 723:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 724:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 725:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 726:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 727:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 728:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 729:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 730:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 731:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 732:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
 733:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 734:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 735:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 736:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 737:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 738:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return xReturn;
 739:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 740:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 741:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 742:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 743:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 744:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 745:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 746:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 747:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 748:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
 749:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 750:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 751:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			being deleted. */
 752:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 753:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 754:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 755:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 756:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 757:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			scheduler for the TCB and stack. */
 758:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 759:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 760:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 761:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 762:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 763:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 764:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 765:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 766:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 767:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 768:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 769:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 770:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 771:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 772:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 773:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 774:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 775:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 776:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 777:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 778:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 779:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 780:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 781:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 782:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			++uxTasksDeleted;
 783:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 784:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 785:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 786:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxTaskNumber++;
 787:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 788:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 789:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 790:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
 791:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 792:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 793:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		been deleted. */
 794:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 795:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 796:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 797:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 798:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 799:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 800:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 801:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
 802:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				after which it is not possible to yield away from this task -
 803:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 804:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				required. */
 805:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 806:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				portYIELD_WITHIN_API();
 807:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 808:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 809:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 810:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 811:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				the task that has just been deleted. */
 812:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskENTER_CRITICAL();
 813:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 814:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 815:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 816:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskEXIT_CRITICAL();
 817:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 818:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 819:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 820:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 821:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 822:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 824:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 825:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 826:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
 827:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 828:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 829:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 830:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 831:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 832:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 833:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 834:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 835:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vTaskSuspendAll();
 836:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 837:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 838:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			block. */
 839:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 840:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 841:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 842:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 843:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 844:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 845:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 846:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 847:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 848:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 849:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 850:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 851:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 852:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 853:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 854:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 855:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
 856:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 857:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 858:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 859:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 860:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 861:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 862:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 863:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 864:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				tick time is less than the wake time. */
 865:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 866:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 867:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 868:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 869:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
 870:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 871:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 872:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 873:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 874:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 875:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 876:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 877:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 878:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 879:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 880:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 881:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 882:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 883:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				blocked list as the same list item is used for both lists. */
 884:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 885:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 886:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 887:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 888:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					directly. */
 889:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 890:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 891:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
 892:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 893:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 894:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 895:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 896:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 897:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 898:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
 899:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 900:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 901:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 902:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 903:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 904:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 905:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 906:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		have put ourselves to sleep. */
 907:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 908:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 909:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			portYIELD_WITHIN_API();
 910:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 911:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
 912:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 913:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 914:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 915:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 916:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 917:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 918:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 919:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 920:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 921:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 922:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
 923:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 924:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 925:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 926:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 927:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 928:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 929:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 930:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 931:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 932:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vTaskSuspendAll();
 933:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 934:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				traceTASK_DELAY();
 935:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 936:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* A task that is removed from the event list while the
 937:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 938:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 939:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				is resumed.
 940:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 941:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 942:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				executing task. */
 943:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 944:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 945:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				not a problem. */
 946:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 947:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 948:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 949:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 950:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				both lists. */
 951:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 952:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 953:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 954:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 955:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					directly. */
 956:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 957:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 958:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
 959:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 960:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 961:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 962:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 963:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 964:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 965:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 966:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
 967:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 968:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 969:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 970:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 971:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 972:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		have put ourselves to sleep. */
 973:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 974:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 975:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			portYIELD_WITHIN_API();
 976:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 977:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
 978:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 979:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 980:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 981:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 982:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 983:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 984:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 985:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 986:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 987:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 988:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 989:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 990:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eTaskState eReturn;
 991:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	List_t *pxStateList;
 992:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 993:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 994:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( pxTCB );
 995:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 996:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 997:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 998:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
 999:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			eReturn = eRunning;
1000:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1001:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1002:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1003:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			taskENTER_CRITICAL();
1004:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1005:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
1006:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1007:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			taskEXIT_CRITICAL();
1008:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1009:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1010:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1011:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1012:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				lists. */
1013:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				eReturn = eBlocked;
1014:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1015:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1016:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1017:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1018:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1019:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1020:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1021:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					indefinitely? */
1022:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1023:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1024:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						eReturn = eSuspended;
1025:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1026:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
1027:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1028:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						eReturn = eBlocked;
1029:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1030:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1031:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#endif
1032:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1033:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1034:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
1035:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1036:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1037:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					tasks list. */
1038:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					eReturn = eDeleted;
1039:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1040:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#endif
1041:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1042:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1043:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1044:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1045:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				Ready (including pending ready) state. */
1046:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				eReturn = eReady;
1047:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1048:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1049:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1050:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return eReturn;
1051:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1052:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1053:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1054:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1055:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1056:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1057:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1058:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1059:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1060:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
1061:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxReturn;
1062:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1063:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
1064:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1065:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1066:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1067:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1068:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1069:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1070:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
1071:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return uxReturn;
1073:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1074:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1075:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1076:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1077:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1078:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1079:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1080:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1081:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1082:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
1083:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1084:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1085:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1086:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1087:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1088:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1089:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1090:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1091:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1092:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1093:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1094:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1095:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1096:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1097:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1098:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1099:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		provided on the following link:
1100:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1101:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1102:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1103:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1104:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1105:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1106:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			task that is being queried. */
1107:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1108:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1109:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1111:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1112:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return uxReturn;
1113:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1114:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1115:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1116:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1117:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1118:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1119:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1120:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1122:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
1123:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1124:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1125:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1127:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1128:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1129:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1130:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1131:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1132:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1133:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1134:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1135:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1136:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1137:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1138:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
1139:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1140:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1141:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			task that is being changed. */
1142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1143:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1144:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1145:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1146:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1147:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1148:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1149:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1150:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#else
1151:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1152:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1153:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1154:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#endif
1155:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1156:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1157:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1158:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1159:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				priority than the calling task. */
1160:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1161:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1162:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* The priority of a task other than the currently
1165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						running task is being raised.  Is the priority being
1166:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						raised above that of the running task? */
1167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1168:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
1169:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1170:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
1171:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						else
1172:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
1173:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1174:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
1175:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1176:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
1177:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1178:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* The priority of the running task is being raised,
1179:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						but the running task must already be the highest
1180:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						priority task able to run so no yield is required. */
1181:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1182:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1183:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1184:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1185:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Setting the priority of the running task down means
1186:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					there may now be another task of higher priority that
1187:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					is ready to execute. */
1188:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1189:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1190:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1191:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1192:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1193:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					require a yield as the running task must be above the
1194:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					new priority of the task being modified. */
1195:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1196:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1197:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1198:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				before its uxPriority member is changed so the
1199:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1200:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1201:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1202:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1203:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1204:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1205:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					currently using an inherited priority. */
1206:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1207:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1208:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1209:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1210:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
1211:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1212:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1213:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1214:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1215:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The base priority gets set whatever. */
1216:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1217:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1218:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#else
1219:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1220:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1221:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1222:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
1223:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1224:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1225:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				being used for anything else. */
1226:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1227:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1228:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1229:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1230:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1231:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1232:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1233:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1234:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1235:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1236:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1237:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1238:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				in the list appropriate to its new priority. */
1239:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
1240:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1241:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1242:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1243:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1245:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1246:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1247:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						there is no need to check again and the port level
1248:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						reset macro can be called directly. */
1249:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1250:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1251:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
1252:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1253:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1254:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1255:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1256:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1257:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1258:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1259:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1260:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1261:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1262:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
1263:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1264:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1265:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1266:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1267:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1268:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1269:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1270:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1271:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1272:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				optimised task selection is not being used. */
1273:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1274:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1275:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1276:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
1277:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1278:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1279:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1280:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1281:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1282:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1283:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1284:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1285:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1286:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
1287:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1288:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
1289:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1290:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1291:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			being suspended. */
1292:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1293:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1294:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1295:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1296:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1297:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			suspended list. */
1298:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1299:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1300:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1301:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1302:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
1303:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1304:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1305:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1306:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1307:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1308:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1309:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1310:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1311:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1312:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
1313:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1314:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1315:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1316:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1317:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1318:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1319:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
1320:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1321:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1322:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1323:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1324:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1325:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The current task has just been suspended. */
1326:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1327:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				portYIELD_WITHIN_API();
1328:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1329:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
1330:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1331:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1332:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1333:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				must be adjusted to point to a different task. */
1334:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1335:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1336:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1337:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1338:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1339:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					is. */
1340:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxCurrentTCB = NULL;
1341:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1342:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1343:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1344:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					vTaskSwitchContext();
1345:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1346:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1347:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1348:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1349:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1350:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1351:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1352:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* A task other than the currently running task was suspended,
1353:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				reset the next expected unblock time in case it referred to the
1354:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				task that is now in the Suspended state. */
1355:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskENTER_CRITICAL();
1356:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1357:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
1358:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1359:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskEXIT_CRITICAL();
1360:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1361:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
1362:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1363:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1364:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1365:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1366:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1367:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1368:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1369:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1370:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1371:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1372:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1373:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1374:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1375:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1376:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1377:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1378:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1379:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		section. */
1380:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1381:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1382:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( xTask );
1383:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1384:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1385:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
1386:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1387:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1388:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1389:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1390:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1391:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1392:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
1393:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1394:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					xReturn = pdTRUE;
1395:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1396:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1397:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1398:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1399:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1400:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1401:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
1402:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1403:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1404:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1405:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1406:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1407:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1408:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1409:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1410:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1411:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
1412:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1413:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1414:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1415:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1416:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1417:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1418:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1419:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1420:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1421:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1422:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1423:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1424:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( xTaskToResume );
1425:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1426:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1427:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		currently executing task. */
1428:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1429:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1430:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			taskENTER_CRITICAL();
1431:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1432:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1433:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1434:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1435:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1436:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1437:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1438:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1439:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1440:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1441:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1442:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1443:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1444:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1445:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						but will leave the lists in the correct state for the
1446:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						next yield. */
1447:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1448:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1449:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
1450:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1451:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1452:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1453:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1454:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1455:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1456:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1457:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1458:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1459:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			taskEXIT_CRITICAL();
1460:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1461:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1462:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1463:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1464:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1465:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1466:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1467:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1468:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1469:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1470:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1471:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1472:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1473:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1474:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1475:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1476:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1477:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1478:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1479:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( xTaskToResume );
1480:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1481:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1482:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1483:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1484:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1485:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1486:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1487:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1488:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1489:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1490:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1491:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1492:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1493:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1494:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1495:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		provided on the following link:
1496:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1497:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1498:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1499:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1500:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1501:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1502:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1503:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1504:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1505:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1506:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1507:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1508:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1509:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					suspended list to the ready list directly. */
1510:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1511:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1512:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1513:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1514:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
1515:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1516:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1517:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1518:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1519:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1520:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1521:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1522:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1523:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1524:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1525:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1526:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					unsuspended. */
1527:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1528:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1529:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1530:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
1531:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1532:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1533:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1534:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1535:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1536:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1537:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xYieldRequired;
1538:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1539:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1540:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1541:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1542:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1543:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** void vTaskStartScheduler( void )
1544:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
1545:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
1546:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1547:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1548:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1549:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1550:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1551:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1552:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1553:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1554:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#else
1555:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1556:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1558:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1559:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1560:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1561:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1562:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1563:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xReturn == pdPASS )
1564:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1565:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1566:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1567:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1568:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1569:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1570:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1571:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1572:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1573:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1574:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( xReturn == pdPASS )
1575:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1576:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1577:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1578:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1579:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1580:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		starts to run. */
1581:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1582:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1583:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1584:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1585:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1586:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			structure specific to the task that will run first. */
1587:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1588:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1589:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1590:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1591:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1592:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1593:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1594:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1595:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1596:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1597:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the run time counter time base. */
1598:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1599:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1600:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1601:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portable interface. */
1602:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1603:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1604:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1605:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			function will not return. */
1606:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1607:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1608:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1609:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1610:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1611:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1612:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
1613:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1614:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1615:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1616:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		or the timer task. */
1617:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( xReturn );
1618:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1619:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
1620:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1622:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** void vTaskEndScheduler( void )
1623:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
1624:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1625:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1626:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1627:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1628:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1629:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vPortEndScheduler();
1630:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
1631:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*----------------------------------------------------------*/
1632:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** void vTaskSuspendAll( void )
1634:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
1635:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1636:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1638:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	http://goo.gl/wu4acr */
1639:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	++uxSchedulerSuspended;
1640:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
1641:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*----------------------------------------------------------*/
1642:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1643:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1644:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1645:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1646:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1647:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xReturn;
1648:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1649:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1650:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1651:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = 0;
1652:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1653:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1654:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1655:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1656:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1657:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			processed. */
1658:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = 0;
1659:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1660:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1661:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1662:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1663:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1664:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1665:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
1666:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1667:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1668:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1669:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*----------------------------------------------------------*/
1670:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1671:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
1672:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
1673:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxTCB;
1674:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
1675:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1676:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1677:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1678:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1679:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1680:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1681:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1682:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1683:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1684:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1685:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	taskENTER_CRITICAL();
1686:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1687:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		--uxSchedulerSuspended;
1688:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1689:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1690:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1691:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1692:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1693:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1694:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				appropriate ready list. */
1695:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1696:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1697:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1698:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1699:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1700:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1701:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1702:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
1703:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					task then a yield must be performed. */
1704:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1705:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1706:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						xYieldPending = pdTRUE;
1707:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1708:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
1709:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1710:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1711:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1712:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1713:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1714:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1715:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
1716:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1717:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				time. */
1718:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( uxPendedTicks > ( UBaseType_t ) 0U )
1719:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1720:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					while( uxPendedTicks > ( UBaseType_t ) 0U )
1721:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1722:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
1723:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
1724:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							xYieldPending = pdTRUE;
1725:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
1726:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						else
1727:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
1728:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1729:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
1730:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						--uxPendedTicks;
1731:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1732:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1733:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1734:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1735:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1736:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1737:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1738:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( xYieldPending == pdTRUE )
1739:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1740:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1741:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1742:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
1743:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1744:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					#endif
1745:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1746:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1747:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
1748:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1749:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1750:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1751:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1752:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1753:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
1754:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1755:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1756:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1757:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1758:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	taskEXIT_CRITICAL();
1759:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1760:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return xAlreadyYielded;
1761:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
1762:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1763:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1764:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
1765:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
1766:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTicks;
1767:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1768:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1769:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
1770:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1771:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xTicks = xTickCount;
1772:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1773:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
1774:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1775:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return xTicks;
1776:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
1777:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1778:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1779:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
1780:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
1781:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xReturn;
1782:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
1783:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1784:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1785:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1786:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1787:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1788:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1789:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1790:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1791:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1792:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1793:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1794:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1795:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1796:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1797:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1798:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1799:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1800:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
1801:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1802:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = xTickCount;
1803:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1804:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1805:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1806:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return xReturn;
1807:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
1808:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1809:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1810:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
1811:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
1812:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1813:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t. */
1814:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
1815:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
1816:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1817:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1818:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1819:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1820:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1821:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1822:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
1823:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1824:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1825:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1826:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( pxTCB );
1827:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1828:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1829:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1830:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1831:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
1832:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1833:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1834:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1835:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
1836:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1837:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
1838:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1839:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vTaskSuspendAll();
1840:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1841:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1842:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
1843:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1844:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1845:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				task in the Ready state. */
1846:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				do
1847:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1848:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					uxQueue--;
1849:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
1850:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1851:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
1852:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1853:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1854:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				task in the Blocked state. */
1855:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
1856:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
1857:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1858:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1859:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1860:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1861:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1862:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
1863:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1864:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
1865:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1866:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1867:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1868:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1869:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					each task in the Suspended state. */
1870:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
1871:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1872:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
1873:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1874:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1875:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1876:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
1877:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1878:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1879:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1880:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#else
1881:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1882:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#endif
1883:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1884:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1885:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#else
1886:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1887:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
1888:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1889:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						*pulTotalRunTime = 0;
1890:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1891:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
1892:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
1893:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1894:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
1895:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1896:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1897:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1898:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
1899:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		( void ) xTaskResumeAll();
1900:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1901:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return uxTask;
1902:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1903:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1904:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1905:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*----------------------------------------------------------*/
1906:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1907:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1908:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1909:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1910:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1911:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1912:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1913:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1914:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xIdleTaskHandle;
1915:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1916:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1917:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1918:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*----------------------------------------------------------*/
1919:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1920:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1921:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1922:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1923:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 1. */
1924:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1925:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1926:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
1927:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1928:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1929:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1930:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		each stepped tick. */
1931:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1932:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xTickCount += xTicksToJump;
1933:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1934:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
1935:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1936:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1937:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*----------------------------------------------------------*/
1938:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1939:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
1940:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
1941:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t * pxTCB;
1942:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xItemValue;
1943:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
1944:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1945:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1946:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1947:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	tasks to be unblocked. */
1948:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1949:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1950:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
1951:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1952:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		delayed lists if it wraps to 0. */
1953:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		++xTickCount;
1954:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1955:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
1956:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1957:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			block. */
1958:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1959:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1960:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xConstTickCount == ( TickType_t ) 0U )
1961:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1962:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
1963:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1964:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
1965:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1966:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1967:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
1968:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1969:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1970:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1971:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			has been found whose block time has not expired there is no need to
1972:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			look any further down the list. */
1973:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
1974:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
1975:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				for( ;; )
1976:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
1977:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1978:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1979:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1980:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						to the maximum possible value so it is extremely
1981:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						unlikely that the
1982:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1983:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						next time through. */
1984:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
1985:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						break;
1986:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
1987:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
1988:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
1989:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* The delayed list is not empty, get the value of the
1990:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						item at the head of the delayed list.  This is the time
1991:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						at which the task at the head of the delayed list must
1992:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						be removed from the Blocked state. */
1993:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1994:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
1995:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
1996:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						if( xConstTickCount < xItemValue )
1997:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
1998:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* It is not time to unblock this item yet, but the
1999:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							item value is the time at which the task at the head
2000:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							of the blocked list must be removed from the Blocked
2001:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							state -	so record the item value in
2002:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							xNextTaskUnblockTime. */
2003:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
2004:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							break;
2005:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
2006:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						else
2007:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
2008:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2009:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
2010:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2011:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
2012:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
2013:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2014:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
2015:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						it from the event list. */
2016:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2017:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
2018:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2019:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
2020:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						else
2021:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
2022:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2023:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
2024:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2025:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* Place the unblocked task into the appropriate ready
2026:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						list. */
2027:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
2028:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2029:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* A task being unblocked cannot cause an immediate
2030:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						context switch if preemption is turned off. */
2031:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
2032:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
2033:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* Preemption is on, but a context switch should
2034:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							only be performed if the unblocked task has a
2035:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							priority that is equal to or higher than the
2036:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							currently executing task. */
2037:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2038:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							{
2039:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 								xSwitchRequired = pdTRUE;
2040:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							}
2041:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							else
2042:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							{
2043:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2044:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							}
2045:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
2046:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#endif /* configUSE_PREEMPTION */
2047:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
2048:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
2049:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2050:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2051:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2052:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2053:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2054:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2055:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2056:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2057:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2058:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2059:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2060:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2061:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
2062:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2063:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2064:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2065:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2066:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2067:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2068:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2069:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2070:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2071:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2073:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2074:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				vApplicationTickHook();
2075:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2076:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
2077:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2078:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2079:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2080:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2081:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2082:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2083:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
2084:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2085:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		++uxPendedTicks;
2086:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2087:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2088:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		scheduler is locked. */
2089:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2090:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2091:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vApplicationTickHook();
2092:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2093:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif
2094:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2095:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2096:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2097:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2098:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2099:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2100:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2101:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2102:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2103:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2104:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2105:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2106:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2107:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2108:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2109:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return xSwitchRequired;
2110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2111:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2112:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2113:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2114:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2115:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2116:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2117:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *xTCB;
2118:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2119:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2120:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		getting set. */
2121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTask == NULL )
2122:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2123:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2124:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2125:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2127:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2128:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2129:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2130:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2131:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2132:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
2133:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2134:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
2135:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2136:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2137:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2138:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2139:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2140:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2141:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2143:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2144:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *xTCB;
2145:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2146:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2147:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2148:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTask == NULL )
2149:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2150:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2151:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2152:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2153:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2154:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2155:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2156:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2157:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2158:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2159:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
2160:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2161:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2162:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
2164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
2166:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2168:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2169:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2170:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2171:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2172:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2173:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2174:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2175:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *xTCB;
2176:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn;
2177:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2178:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2179:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTask == NULL )
2180:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2181:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2182:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2183:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2184:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2185:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2186:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2187:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2188:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2189:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2190:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2191:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2192:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2193:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2194:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = pdFAIL;
2195:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2196:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2197:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
2198:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2199:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2200:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2201:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2202:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2203:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** void vTaskSwitchContext( void )
2204:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2205:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2206:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2207:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2208:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		switch. */
2209:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xYieldPending = pdTRUE;
2210:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2211:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
2212:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2213:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xYieldPending = pdFALSE;
2214:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2215:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2216:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2217:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2218:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2219:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2220:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#else
2221:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2222:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
2223:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2224:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2225:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				accumulated	time so far.  The time the task started running was
2226:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2227:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				protection here	so count values are only valid until the timer
2228:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2229:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2230:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				are provided by the application, not the kernel. */
2231:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2232:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
2233:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2234:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
2235:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
2236:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
2237:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2238:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
2239:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2240:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2241:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2242:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2243:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2245:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2246:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2247:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		optimised asm code. */
2248:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2249:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2250:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2251:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2252:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2253:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2254:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			structure specific to this task. */
2255:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2256:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2257:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2258:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2259:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2260:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2261:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2262:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2263:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2264:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTimeToWake;
2265:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2266:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxEventList );
2267:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2268:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2269:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2270:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2271:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2272:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2273:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2274:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2275:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2276:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2277:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2278:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2279:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2280:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2281:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2282:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2283:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
2284:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2285:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2286:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
2287:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2288:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2289:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2290:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2291:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2292:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2293:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
2294:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2295:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2296:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2297:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			block indefinitely. */
2298:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2299:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2300:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2301:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2302:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2303:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2304:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			scheduler will handle it. */
2305:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2306:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2307:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2308:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2309:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2310:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2311:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2312:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2313:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			will handle it. */
2314:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2315:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2316:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2317:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2318:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2319:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2320:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2321:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2322:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2323:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTimeToWake;
2324:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2325:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxEventList );
2326:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2327:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2328:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	the event groups implementation. */
2329:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2330:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2331:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2332:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2333:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	task that is not in the Blocked state. */
2334:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2335:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2336:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2337:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2338:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2339:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2340:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	the task level). */
2341:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2342:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2343:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2344:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2345:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	scheduler is locked. */
2346:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2347:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2348:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2349:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
2350:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2351:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2352:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
2353:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2354:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2355:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2356:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2357:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2358:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2359:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
2360:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2361:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2362:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2363:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			indefinitely. */
2364:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2365:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2366:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2367:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2368:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2369:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2370:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			kernel will manage it correctly. */
2371:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2372:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2373:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2374:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2375:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2376:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2377:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2378:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2379:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			will manage it correctly. */
2380:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2381:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2382:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2383:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2384:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2385:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2386:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2387:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if configUSE_TIMERS == 1
2388:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2389:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, c
2390:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2391:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
2392:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2393:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( pxEventList );
2394:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2395:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* This function should not be called by application code hence the
2396:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2397:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2398:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2399:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2400:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2401:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2402:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2403:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2404:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		can be used in place of vListInsert. */
2405:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2406:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2407:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2408:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2409:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		function is called with the scheduler locked so interrupts will not
2410:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		access the lists at the same time. */
2411:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2412:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2413:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2414:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			check, and the port reset macro can be called directly. */
2415:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2416:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2417:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2418:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2419:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2420:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2421:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2422:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If vTaskSuspend() is available then the suspended task list is also
2423:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		available and a task that is blocking indefinitely can enter the
2424:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		suspended state (it is not really suspended as it will re-enter the
2425:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		Ready state when the event it is waiting indefinitely for occurs).
2426:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		Blocking indefinitely is useful when using tickless idle mode as when
2427:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		all tasks are blocked indefinitely all timers can be turned off. */
2428:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if( INCLUDE_vTaskSuspend == 1 )
2429:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2430:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xWaitIndefinitely == pdTRUE )
2431:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2432:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Add the task to the suspended task list instead of a delayed
2433:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				task list to ensure the task is not woken by a timing event.  It
2434:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				will block indefinitely. */
2435:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2436:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2437:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
2438:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2439:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Calculate the time at which the task should be woken if the
2440:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				event does not occur.  This may overflow but this doesn't
2441:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				matter. */
2442:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToWait;
2443:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
2444:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
2445:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2446:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2447:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#else
2448:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2449:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2450:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter. */
2451:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2452:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_DELAY_UNTIL();
2453:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2454:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2455:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
2456:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			defined. */
2457:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( void ) xWaitIndefinitely;
2458:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2459:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif
2460:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2461:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2462:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TIMERS */
2463:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2464:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2465:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2466:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2467:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2468:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
2469:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2470:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2471:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	called from a critical section within an ISR. */
2472:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2473:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2474:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2475:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2476:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2477:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2478:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2479:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2480:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2481:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2482:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxEventList is not empty. */
2483:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2484:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2485:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2486:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2487:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2488:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2489:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2490:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2491:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2492:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
2493:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2494:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2495:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pending until the scheduler is resumed. */
2496:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2497:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2498:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2499:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2500:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2501:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2502:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2503:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		it should force a context switch now. */
2504:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = pdTRUE;
2505:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2506:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2507:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2508:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xYieldPending = pdTRUE;
2509:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2510:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
2511:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2512:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = pdFALSE;
2513:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2514:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2515:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2516:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2517:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2518:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2519:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2520:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2521:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2522:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2523:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2524:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2525:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2526:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2527:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
2528:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2529:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return xReturn;
2530:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2531:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2532:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2533:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2534:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2535:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2536:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
2537:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2538:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2539:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	the event flags implementation. */
2540:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2541:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2542:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Store the new item value in the event list. */
2543:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2544:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2545:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2546:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	event flags. */
2547:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2548:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2549:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2550:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2551:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2552:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2553:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	lists. */
2554:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2555:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2556:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2559:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2560:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2561:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the calling task to know if it should force a context
2562:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		switch now. */
2563:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = pdTRUE;
2564:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2565:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2566:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2567:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xYieldPending = pdTRUE;
2568:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2569:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
2570:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2571:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = pdFALSE;
2572:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2573:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2574:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return xReturn;
2575:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2576:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2577:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2578:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2579:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2580:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxTimeOut );
2581:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
2582:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
2583:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2584:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2585:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2586:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
2587:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2588:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
2589:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2590:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxTimeOut );
2591:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxTicksToWait );
2592:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2593:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	taskENTER_CRITICAL();
2594:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2595:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2596:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
2597:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2598:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2599:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2600:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2601:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			therefore never time out. */
2602:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
2603:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2604:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = pdFALSE;
2605:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2606:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2607:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif
2608:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2609:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
2610:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2611:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2612:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2613:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2614:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2615:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = pdTRUE;
2616:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2617:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
2618:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2619:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2620:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
2621:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
2622:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = pdFALSE;
2623:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2624:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2625:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2626:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = pdTRUE;
2627:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2628:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2629:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	taskEXIT_CRITICAL();
2630:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2631:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return xReturn;
2632:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2634:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2635:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** void vTaskMissedYield( void )
2636:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	xYieldPending = pdTRUE;
2638:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2639:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2640:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2641:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2642:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2643:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2644:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2645:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxReturn;
2646:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
2647:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2648:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTask != NULL )
2649:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2650:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2651:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2652:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2653:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2654:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2655:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxReturn = 0U;
2656:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2657:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2658:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return uxReturn;
2659:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2660:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2661:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2662:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2663:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2664:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2665:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2666:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
2667:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2668:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
2669:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2670:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTask != NULL )
2671:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2672:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2673:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2674:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2675:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2676:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2677:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2678:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2679:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*
2680:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * -----------------------------------------------------------
2681:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * The Idle task.
2682:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * ----------------------------------------------------------
2683:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
2684:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2685:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2686:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
2687:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
2688:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  *
2689:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****  */
2690:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2691:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2692:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Stop warnings. */
2693:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) pvParameters;
2694:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2695:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	for( ;; )
2696:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2697:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* See if any tasks have been deleted. */
2698:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
2699:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2700:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2701:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2702:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2703:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			see if any other task has become available.  If we are using
2704:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
2705:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			will automatically get the processor anyway. */
2706:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			taskYIELD();
2707:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2708:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2709:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2710:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2711:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2712:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
2713:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2714:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			to run then the idle task should yield before the end of the
2715:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			timeslice.
2716:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2717:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			A critical region is not required here as we are just reading from
2718:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2719:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
2720:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
2721:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
2722:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2723:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskYIELD();
2724:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2725:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
2726:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2727:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2728:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2729:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2730:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2731:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2732:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2733:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2734:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
2735:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2736:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2737:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			allows the application designer to add background functionality
2738:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			without the overhead of a separate task.
2739:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2740:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2741:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vApplicationIdleHook();
2742:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2743:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2744:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2745:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2746:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2747:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		user defined low power mode	implementations require
2748:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2749:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2750:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2751:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
2752:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2753:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2754:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2755:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			test of the expected idle time is performed without the
2756:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2757:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			valid. */
2758:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2759:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2760:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2761:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2762:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				vTaskSuspendAll();
2763:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
2764:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2765:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					time can be sampled again, and this time its value can
2766:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					be used. */
2767:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2768:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2769:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2770:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2771:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
2772:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2773:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2774:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
2775:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
2776:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
2777:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
2778:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2779:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
2780:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
2781:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				( void ) xTaskResumeAll();
2782:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2783:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
2784:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2785:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2786:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2787:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2788:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2789:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2790:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2791:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2792:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2793:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
2794:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2795:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2796:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2797:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
2798:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
2799:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2800:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2801:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2802:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2803:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2804:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			eReturn = eAbortSleep;
2805:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2806:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
2807:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2808:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2809:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			eReturn = eAbortSleep;
2810:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2811:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2812:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2813:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
2814:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
2815:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
2816:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			interrupts. */
2817:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
2818:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2819:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
2820:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2821:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
2822:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
2823:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2824:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
2825:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2826:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2827:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return eReturn;
2828:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2829:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2830:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2831:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2832:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2833:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
2834:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
2835:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** UBaseType_t x;
2836:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2837:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Store the task name in the TCB. */
2838:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2839:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2840:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
2841:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2842:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2843:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2844:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
2845:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
2846:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2847:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			break;
2848:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2849:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2850:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2851:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2852:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2853:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2854:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2855:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2856:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2857:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
2858:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2859:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2860:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	remove the privilege bit if one is present. */
2861:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2862:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2863:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
2864:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2865:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
2866:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2867:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2868:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2869:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2870:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
2871:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2872:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2873:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
2874:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
2875:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2876:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
2877:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2878:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2879:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2880:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2881:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2882:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2883:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2884:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2885:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Event lists are always in priority order. */
2886:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickT
2887:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2888:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2889:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2890:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2891:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
2892:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2893:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2894:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2895:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2896:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2897:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2898:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2899:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2900:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2901:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2902:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2903:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2904:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2905:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2906:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2907:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2908:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2909:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2910:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2911:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2912:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2913:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		( void ) xRegions;
2914:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		( void ) usStackDepth;
2915:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2916:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2917:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2918:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2919:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2920:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
2921:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2922:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
2923:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2924:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2925:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
2926:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2927:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
2928:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2929:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->ulNotifiedValue = 0;
2930:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
2931:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2932:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif
2933:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2934:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2935:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2936:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2937:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2938:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2939:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2940:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
2941:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2942:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2943:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2944:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2945:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
2946:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2947:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
2948:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2949:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2950:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2951:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
2952:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
2953:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2954:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2955:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2956:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2957:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2958:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2959:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2960:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2961:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
2962:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2963:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void *pvReturn = NULL;
2964:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
2965:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2966:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2967:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2968:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2969:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
2970:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2971:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
2972:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
2973:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pvReturn = NULL;
2974:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
2975:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2976:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return pvReturn;
2977:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2978:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2979:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2980:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2981:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2982:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2983:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2984:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2985:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
2986:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
2987:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2988:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
2989:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the calling task. */
2990:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2991:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2992:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2993:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
2994:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2995:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2996:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
2997:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
2998:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvInitialiseTaskLists( void )
2999:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
3000:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** UBaseType_t uxPriority;
3001:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3002:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3003:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3004:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3005:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3006:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3007:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3008:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3009:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3010:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3011:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3012:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3013:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3014:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3015:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3016:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3017:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3018:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3019:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3020:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3021:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3022:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3023:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3024:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	using list2. */
3025:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3026:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3027:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
3028:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3029:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3030:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3031:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
3032:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3033:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3034:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3035:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3036:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3037:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		too often in the idle task. */
3038:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		while( uxTasksDeleted > ( UBaseType_t ) 0U )
3039:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3040:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vTaskSuspendAll();
3041:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3042:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3043:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3044:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( void ) xTaskResumeAll();
3045:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3046:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3047:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3048:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				TCB_t *pxTCB;
3049:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3050:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskENTER_CRITICAL();
3051:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3052:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3053:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
3054:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3055:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					--uxTasksDeleted;
3056:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3057:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				taskEXIT_CRITICAL();
3058:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3059:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3060:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3061:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3062:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3063:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3064:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3065:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3066:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3067:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* vTaskDelete */
3068:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
3069:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3070:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3071:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
3072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
3073:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
3074:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
3075:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3076:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
3077:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3078:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
3079:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3080:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3081:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
3082:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3083:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
3084:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3085:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3086:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
3087:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
3088:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		too. */
3089:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
3090:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3091:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
3092:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3093:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3094:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3095:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3096:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3097:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3098:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
3099:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3100:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3101:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
3102:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
3103:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxNewTCB;
3104:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3105:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* If the stack grows down then allocate the stack then the TCB so the stack
3106:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	does not grow into the TCB.  Likewise if the stack grows up then allocate
3107:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	the TCB then the stack. */
3108:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if( portSTACK_GROWTH > 0 )
3109:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Allocate space for the TCB.  Where the memory comes from depends on
3111:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the implementation of the port malloc function. */
3112:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3113:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3114:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxNewTCB != NULL )
3115:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3116:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created.
3117:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			The base of the stack memory stored in the TCB so the task can
3118:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			be deleted later if required. */
3119:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeo
3120:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxNewTCB->pxStack == NULL )
3122:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3123:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Could not allocate the stack.  Delete the allocated TCB. */
3124:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				vPortFree( pxNewTCB );
3125:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxNewTCB = NULL;
3126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3127:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3128:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3129:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
3130:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3131:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	StackType_t *pxStack;
3132:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3133:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created. */
3134:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackTyp
3135:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3136:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxStack != NULL )
3137:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3138:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
3139:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			on the implementation of the port malloc function. */
3140:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3141:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxNewTCB != NULL )
3143:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3144:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Store the stack location in the TCB. */
3145:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxNewTCB->pxStack = pxStack;
3146:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3147:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3148:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3149:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The stack cannot be used as the TCB was not created.  Free it
3150:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				again. */
3151:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				vPortFree( pxStack );
3152:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3153:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3154:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3155:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3156:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxNewTCB = NULL;
3157:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3158:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3159:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
3160:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3161:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( pxNewTCB != NULL )
3162:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Avoid dependency on memset() if it is not required. */
3164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxT
3165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3166:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Just to help debugging. */
3167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
3168:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3169:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( IN
3170:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3171:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3172:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return pxNewTCB;
3173:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
3174:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3175:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3176:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3177:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3178:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
3179:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
  26              		.loc 1 3179 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
3180:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3181:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3182:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3183:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  40              		.loc 1 3183 0
  41 0004 0C68     		ldr	r4, [r1]
  42 0006 002C     		cmp	r4, #0
  43 0008 45D0     		beq	.L8
  44              	.LVL1:
  45              	.LBB21:
  46              	.LBB22:
  47              	.LBB23:
3184:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3185:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  48              		.loc 1 3185 0
  49 000a 4B68     		ldr	r3, [r1, #4]
  50 000c 01F10807 		add	r7, r1, #8
  51 0010 5C68     		ldr	r4, [r3, #4]
  52 0012 4C60     		str	r4, [r1, #4]
  53 0014 BC42     		cmp	r4, r7
  54 0016 04BF     		itt	eq
  55 0018 7B68     		ldreq	r3, [r7, #4]
  56 001a 4B60     		streq	r3, [r1, #4]
  57 001c 4B68     		ldr	r3, [r1, #4]
  58 001e D3F80CC0 		ldr	ip, [r3, #12]
  59              	.LVL2:
  60 0022 00F11C03 		add	r3, r0, #28
  61              	.LBE23:
3181:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  62              		.loc 1 3181 0
  63 0026 0020     		movs	r0, #0
  64              	.LVL3:
  65              	.L7:
  66              	.LBB24:
3186:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3187:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3188:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3189:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3190:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3191:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			do
3192:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3193:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  67              		.loc 1 3193 0
  68 0028 4C68     		ldr	r4, [r1, #4]
  69 002a 6468     		ldr	r4, [r4, #4]
  70 002c 4C60     		str	r4, [r1, #4]
  71 002e BC42     		cmp	r4, r7
  72 0030 04BF     		itt	eq
  73 0032 CC68     		ldreq	r4, [r1, #12]
  74 0034 4C60     		streq	r4, [r1, #4]
  75              	.LBE24:
3194:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3195:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
3196:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
3197:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
3198:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
3199:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
3200:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3201:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3202:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3203:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* If the task is in the suspended list then there is a chance
3204:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					it is actually just blocked indefinitely - so really it should
3205:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					be reported as being in the Blocked state. */
3206:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( eState == eSuspended )
  76              		.loc 1 3206 0
  77 0036 032A     		cmp	r2, #3
  78              	.LBB25:
3193:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  79              		.loc 1 3193 0
  80 0038 4C68     		ldr	r4, [r1, #4]
  81 003a E468     		ldr	r4, [r4, #12]
  82              	.LVL4:
  83              	.LBE25:
3195:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
  84              		.loc 1 3195 0
  85 003c 43F81C4C 		str	r4, [r3, #-28]
3196:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
  86              		.loc 1 3196 0
  87 0040 04F13405 		add	r5, r4, #52
  88 0044 43F8185C 		str	r5, [r3, #-24]
3197:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
  89              		.loc 1 3197 0
  90 0048 656C     		ldr	r5, [r4, #68]
  91 004a 43F8145C 		str	r5, [r3, #-20]
3199:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  92              		.loc 1 3199 0
  93 004e E56A     		ldr	r5, [r4, #44]
3198:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
  94              		.loc 1 3198 0
  95 0050 03F8102C 		strb	r2, [r3, #-16]
3199:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
  96              		.loc 1 3199 0
  97 0054 43F80C5C 		str	r5, [r3, #-12]
  98              		.loc 1 3206 0
  99 0058 04D1     		bne	.L5
3207:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3208:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 100              		.loc 1 3208 0
 101 005a A56A     		ldr	r5, [r4, #40]
 102 005c 15B1     		cbz	r5, .L5
3209:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
3210:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 103              		.loc 1 3210 0
 104 005e 0225     		movs	r5, #2
 105 0060 03F8105C 		strb	r5, [r3, #-16]
 106              	.L5:
3211:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
3212:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3213:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3214:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3215:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3216:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
3217:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3218:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 107              		.loc 1 3218 0
 108 0064 E56C     		ldr	r5, [r4, #76]
3219:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3220:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#else
3221:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3222:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
3223:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3224:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
3225:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3226:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3227:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3228:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3229:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3230:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#else
3231:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3232:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
3233:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3234:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
3235:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3236:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3237:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3238:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3239:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3240:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#else
3241:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3242:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
 109              		.loc 1 3242 0
 110 0066 D4F830E0 		ldr	lr, [r4, #48]
 111              	.LVL5:
3218:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 112              		.loc 1 3218 0
 113 006a 43F8085C 		str	r5, [r3, #-8]
 114              		.loc 1 3242 0
 115 006e 7646     		mov	r6, lr
3232:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 116              		.loc 1 3232 0
 117 0070 0025     		movs	r5, #0
 118 0072 43F8045C 		str	r5, [r3, #-4]
 119              	.LVL6:
 120              	.L6:
 121 0076 CEEB0605 		rsb	r5, lr, r6
 122              	.LVL7:
 123              	.LBB26:
 124              	.LBB27:
3243:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
3245:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3246:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				uxTask++;
3247:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3248:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3249:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3250:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3251:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3252:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3253:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3254:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3255:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return uxTask;
3256:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3257:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3258:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3259:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3260:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3261:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3262:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3263:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3264:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3265:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	uint32_t ulCount = 0U;
3266:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3267:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 125              		.loc 1 3267 0
 126 007a 16F8018B 		ldrb	r8, [r6], #1	@ zero_extendqisi2
 127              	.LVL8:
 128 007e B8F1A50F 		cmp	r8, #165
 129 0082 F8D0     		beq	.L6
 130              	.LVL9:
3268:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3269:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3270:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			ulCount++;
3271:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3272:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3273:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 131              		.loc 1 3273 0
 132 0084 AD08     		lsrs	r5, r5, #2
 133              	.LVL10:
 134              	.LBE27:
 135              	.LBE26:
3248:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 136              		.loc 1 3248 0
 137 0086 6445     		cmp	r4, ip
 138              	.LBB29:
 139              	.LBB28:
3274:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3275:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return ( uint16_t ) ulCount;
 140              		.loc 1 3275 0
 141 0088 23F8205B 		strh	r5, [r3], #32	@ movhi
 142              	.LBE28:
 143              	.LBE29:
3246:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 144              		.loc 1 3246 0
 145 008c 00F10100 		add	r0, r0, #1
 146              	.LVL11:
3248:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 147              		.loc 1 3248 0
 148 0090 CAD1     		bne	.L7
 149 0092 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 150              	.LVL12:
 151              	.L8:
 152              	.LBE22:
 153              	.LBE21:
3181:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 154              		.loc 1 3181 0
 155 0096 2046     		mov	r0, r4
 156              	.LVL13:
3256:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 157              		.loc 1 3256 0
 158 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 159              		.cfi_endproc
 160              	.LFE39:
 162              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 163              		.align	1
 164              		.thumb
 165              		.thumb_func
 167              	prvResetNextTaskUnblockTime:
 168              	.LFB42:
3276:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3277:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3278:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3279:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3280:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3281:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3282:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3283:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3284:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3285:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
3286:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3287:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxReturn;
3288:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3289:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3290:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3291:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3292:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3293:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3294:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3295:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#else
3296:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3297:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3298:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3299:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif
3300:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3301:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3302:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3303:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return uxReturn;
3304:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3305:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3306:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3307:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3308:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3309:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3310:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3311:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3312:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3313:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3314:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3315:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3316:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3317:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3318:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3319:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3320:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3321:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3322:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3323:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3324:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3325:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3326:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
3327:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3328:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Only free the stack if it was allocated dynamically in the first
3329:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			place. */
3330:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
3331:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3332:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				vPortFreeAligned( pxTCB->pxStack );
3333:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3334:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3335:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#else
3336:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3337:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vPortFreeAligned( pxTCB->pxStack );
3338:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3339:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif
3340:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3341:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		vPortFree( pxTCB );
3342:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3343:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3344:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3345:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3346:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3347:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3348:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
 169              		.loc 1 3348 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
3349:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxTCB;
3350:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3351:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 174              		.loc 1 3351 0
 175 0000 064A     		ldr	r2, .L22
 176 0002 1368     		ldr	r3, [r2]
 177 0004 1968     		ldr	r1, [r3]
 178 0006 064B     		ldr	r3, .L22+4
 179 0008 11B9     		cbnz	r1, .L20
3352:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3353:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3354:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3355:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3356:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		there is an item in the delayed list. */
3357:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 180              		.loc 1 3357 0
 181 000a 4FF0FF32 		mov	r2, #-1
 182 000e 03E0     		b	.L21
 183              	.L20:
 184              	.LBB32:
 185              	.LBB33:
3358:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3359:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	else
3360:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3361:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3362:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3363:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3364:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		from the Blocked state. */
3365:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 186              		.loc 1 3365 0
 187 0010 1268     		ldr	r2, [r2]
 188              	.LVL14:
 189 0012 D268     		ldr	r2, [r2, #12]
 190              	.LVL15:
3366:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 191              		.loc 1 3366 0
 192 0014 D268     		ldr	r2, [r2, #12]
 193              	.LVL16:
 194 0016 5268     		ldr	r2, [r2, #4]
 195              	.LVL17:
 196              	.L21:
 197 0018 1A60     		str	r2, [r3]
 198 001a 7047     		bx	lr
 199              	.L23:
 200              		.align	2
 201              	.L22:
 202 001c 00000000 		.word	.LANCHOR0
 203 0020 00000000 		.word	.LANCHOR1
 204              	.LBE33:
 205              	.LBE32:
 206              		.cfi_endproc
 207              	.LFE42:
 209              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 210              		.align	1
 211              		.thumb
 212              		.thumb_func
 214              	prvTaskIsTaskSuspended:
 215              	.LFB10:
1374:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 216              		.loc 1 1374 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              	.LVL18:
 221 0000 08B5     		push	{r3, lr}
 222              	.LCFI1:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 3, -8
 225              		.cfi_offset 14, -4
1382:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 226              		.loc 1 1382 0
 227 0002 58B9     		cbnz	r0, .L25
 228              	.LVL19:
 229              	.LBB36:
 230              	.LBB37:
 231              	@ 1382 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 232 0004 72B6     		CPSID i   
 233 0006 BFF34F8F 	DSB       
 234 000a BFF36F8F 	ISB         
 235              	@ 0 "" 2
 236              		.thumb
 237 000e 0A48     		ldr	r0, .L32
 238              	.LVL20:
 239 0010 40F26652 		movw	r2, #1382
 240 0014 0949     		ldr	r1, .L32+4
 241 0016 0A4B     		ldr	r3, .L32+8
 242 0018 9847     		blx	r3
 243              	.LVL21:
 244              	.L26:
 245 001a FEE7     		b	.L26
 246              	.LVL22:
 247              	.L25:
 248              	.LBE37:
 249              	.LBE36:
1385:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 250              		.loc 1 1385 0
 251 001c 4269     		ldr	r2, [r0, #20]
 252 001e 094B     		ldr	r3, .L32+12
 253 0020 9A42     		cmp	r2, r3
 254 0022 07D1     		bne	.L31
1388:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 255              		.loc 1 1388 0
 256 0024 806A     		ldr	r0, [r0, #40]
 257              	.LVL23:
 258 0026 084B     		ldr	r3, .L32+16
 259 0028 9842     		cmp	r0, r3
 260 002a 03D0     		beq	.L31
1392:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 261              		.loc 1 1392 0
 262 002c B0FA80F0 		clz	r0, r0
 263 0030 4009     		lsrs	r0, r0, #5
 264 0032 08BD     		pop	{r3, pc}
 265              	.L31:
1375:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 266              		.loc 1 1375 0
 267 0034 0020     		movs	r0, #0
 268              	.LVL24:
1412:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 269              		.loc 1 1412 0
 270 0036 08BD     		pop	{r3, pc}
 271              	.L33:
 272              		.align	2
 273              	.L32:
 274 0038 00000000 		.word	.LC0
 275 003c 00000000 		.word	.LANCHOR2
 276 0040 00000000 		.word	printf
 277 0044 00000000 		.word	.LANCHOR3
 278 0048 00000000 		.word	.LANCHOR4
 279              		.cfi_endproc
 280              	.LFE10:
 282              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 283              		.align	1
 284              		.thumb
 285              		.thumb_func
 287              	prvAddCurrentTaskToDelayedList:
 288              	.LFB37:
3072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
 289              		.loc 1 3072 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              	.LVL25:
3074:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 294              		.loc 1 3074 0
 295 0000 0D4B     		ldr	r3, .L37
3072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
 296              		.loc 1 3072 0
 297 0002 10B5     		push	{r4, lr}
 298              	.LCFI2:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 4, -8
 301              		.cfi_offset 14, -4
3074:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 302              		.loc 1 3074 0
 303 0004 1A68     		ldr	r2, [r3]
3072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
 304              		.loc 1 3072 0
 305 0006 0446     		mov	r4, r0
3074:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 306              		.loc 1 3074 0
 307 0008 5060     		str	r0, [r2, #4]
3076:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 308              		.loc 1 3076 0
 309 000a 0C4A     		ldr	r2, .L37+4
 310 000c 1268     		ldr	r2, [r2]
 311 000e 9042     		cmp	r0, r2
 312 0010 0B4A     		ldr	r2, .L37+8
 313 0012 05D2     		bcs	.L35
 314              	.LVL26:
 315              	.LBB40:
 316              	.LBB41:
3079:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 317              		.loc 1 3079 0
 318 0014 0B49     		ldr	r1, .L37+12
 319 0016 0868     		ldr	r0, [r1]
 320              	.LVL27:
 321 0018 1968     		ldr	r1, [r3]
 322 001a 0431     		adds	r1, r1, #4
 323 001c 9047     		blx	r2
 324              	.LVL28:
 325 001e 10BD     		pop	{r4, pc}
 326              	.LVL29:
 327              	.L35:
 328              	.LBE41:
 329              	.LBE40:
3084:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 330              		.loc 1 3084 0
 331 0020 0949     		ldr	r1, .L37+16
 332 0022 0868     		ldr	r0, [r1]
 333              	.LVL30:
 334 0024 1968     		ldr	r1, [r3]
 335 0026 0431     		adds	r1, r1, #4
 336 0028 9047     		blx	r2
 337              	.LVL31:
3089:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 338              		.loc 1 3089 0
 339 002a 084B     		ldr	r3, .L37+20
 340 002c 1A68     		ldr	r2, [r3]
 341 002e 9442     		cmp	r4, r2
3091:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 342              		.loc 1 3091 0
 343 0030 38BF     		it	cc
 344 0032 1C60     		strcc	r4, [r3]
 345 0034 10BD     		pop	{r4, pc}
 346              	.LVL32:
 347              	.L38:
 348 0036 00BF     		.align	2
 349              	.L37:
 350 0038 00000000 		.word	.LANCHOR5
 351 003c 00000000 		.word	.LANCHOR6
 352 0040 00000000 		.word	vListInsert
 353 0044 00000000 		.word	.LANCHOR7
 354 0048 00000000 		.word	.LANCHOR0
 355 004c 00000000 		.word	.LANCHOR1
 356              		.cfi_endproc
 357              	.LFE37:
 359              		.section	.text.xTaskGenericCreate,"ax",%progbits
 360              		.align	1
 361              		.global	xTaskGenericCreate
 362              		.thumb
 363              		.thumb_func
 365              	xTaskGenericCreate:
 366              	.LFB1:
 552:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
 367              		.loc 1 552 0
 368              		.cfi_startproc
 369              		@ args = 16, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              	.LVL33:
 372 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 373              	.LCFI3:
 374              		.cfi_def_cfa_offset 40
 375              		.cfi_offset 3, -40
 376              		.cfi_offset 4, -36
 377              		.cfi_offset 5, -32
 378              		.cfi_offset 6, -28
 379              		.cfi_offset 7, -24
 380              		.cfi_offset 8, -20
 381              		.cfi_offset 9, -16
 382              		.cfi_offset 10, -12
 383              		.cfi_offset 11, -8
 384              		.cfi_offset 14, -4
 552:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
 385              		.loc 1 552 0
 386 0004 0A9E     		ldr	r6, [sp, #40]
 387 0006 9A46     		mov	r10, r3
 388 0008 0F46     		mov	r7, r1
 389 000a 1546     		mov	r5, r2
 390 000c 0C9B     		ldr	r3, [sp, #48]
 391              	.LVL34:
 557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 392              		.loc 1 557 0
 393 000e 8146     		mov	r9, r0
 394 0010 58B9     		cbnz	r0, .L40
 557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 395              		.loc 1 557 0 is_stmt 0 discriminator 1
 396              	@ 557 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 397 0012 72B6     		CPSID i   
 398 0014 BFF34F8F 	DSB       
 399 0018 BFF36F8F 	ISB         
 400              	@ 0 "" 2
 401              		.thumb
 402 001c 6448     		ldr	r0, .L72
 403              	.LVL35:
 404 001e 40F22D22 		movw	r2, #557
 405              	.LVL36:
 406 0022 6449     		ldr	r1, .L72+4
 407              	.LVL37:
 408 0024 644B     		ldr	r3, .L72+8
 409 0026 9847     		blx	r3
 410              	.LVL38:
 411              	.L41:
 412 0028 FEE7     		b	.L41
 413              	.LVL39:
 414              	.L40:
 558:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 415              		.loc 1 558 0 is_stmt 1
 416 002a 0F2E     		cmp	r6, #15
 417 002c 0BD9     		bls	.L42
 558:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 418              		.loc 1 558 0 is_stmt 0 discriminator 1
 419              	@ 558 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 420 002e 72B6     		CPSID i   
 421 0030 BFF34F8F 	DSB       
 422 0034 BFF36F8F 	ISB         
 423              	@ 0 "" 2
 424              		.thumb
 425 0038 5D48     		ldr	r0, .L72
 426              	.LVL40:
 427 003a 40F22E22 		movw	r2, #558
 428              	.LVL41:
 429 003e 5D49     		ldr	r1, .L72+4
 430              	.LVL42:
 431 0040 5D4B     		ldr	r3, .L72+8
 432 0042 9847     		blx	r3
 433              	.LVL43:
 434              	.L43:
 558:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 435              		.loc 1 558 0 discriminator 2
 436 0044 FEE7     		b	.L43
 437              	.LVL44:
 438              	.L42:
 439 0046 5D4C     		ldr	r4, .L72+12
 440              	.LBB49:
 441              	.LBB50:
 442              	.LBB51:
3134:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 443              		.loc 1 3134 0 is_stmt 1
 444 0048 4BB9     		cbnz	r3, .L55
 445 004a 9000     		lsls	r0, r2, #2
 446              	.LVL45:
 447 004c 5C49     		ldr	r1, .L72+16
 448              	.LVL46:
 449 004e 40F63E42 		movw	r2, #3134
 450              	.LVL47:
 451 0052 A047     		blx	r4
 452              	.LVL48:
3136:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 453              		.loc 1 3136 0
 454 0054 8346     		mov	fp, r0
 455 0056 0028     		cmp	r0, #0
 456 0058 00F0A680 		beq	.L45
 457 005c 00E0     		b	.L44
 458              	.LVL49:
 459              	.L55:
3134:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 460              		.loc 1 3134 0
 461 005e 9B46     		mov	fp, r3
 462              	.LVL50:
 463              	.L44:
3140:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 464              		.loc 1 3140 0
 465 0060 5C20     		movs	r0, #92
 466 0062 5749     		ldr	r1, .L72+16
 467 0064 40F64442 		movw	r2, #3140
 468 0068 A047     		blx	r4
 469              	.LVL51:
3142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 470              		.loc 1 3142 0
 471 006a 0446     		mov	r4, r0
 472 006c 88B1     		cbz	r0, .L46
 473              	.LBE51:
3167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 474              		.loc 1 3167 0
 475 006e AD00     		lsls	r5, r5, #2
 476 0070 2A46     		mov	r2, r5
 477 0072 A521     		movs	r1, #165
 478              	.LBB52:
3145:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 479              		.loc 1 3145 0
 480 0074 C0F830B0 		str	fp, [r0, #48]
 481              	.LBE52:
3167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 482              		.loc 1 3167 0
 483 0078 5846     		mov	r0, fp
 484              	.LVL52:
 485 007a 524B     		ldr	r3, .L72+20
 486              	.LBE50:
 487              	.LBE49:
 600:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 488              		.loc 1 600 0
 489 007c 043D     		subs	r5, r5, #4
 490              	.LBB56:
 491              	.LBB54:
3167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 492              		.loc 1 3167 0
 493 007e 9847     		blx	r3
 494              	.LVL53:
 495              	.LBE54:
 496              	.LBE56:
 600:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 497              		.loc 1 600 0
 498 0080 236B     		ldr	r3, [r4, #48]
 499 0082 04F13302 		add	r2, r4, #51
 500 0086 1D44     		add	r5, r5, r3
 601:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 501              		.loc 1 601 0
 502 0088 25F00705 		bic	r5, r5, #7
 503              	.LVL54:
 504 008c 7B1E     		subs	r3, r7, #1
 505 008e 0F37     		adds	r7, r7, #15
 506              	.LVL55:
 507 0090 08E0     		b	.L47
 508              	.LVL56:
 509              	.L46:
 510              	.LBB57:
 511              	.LBB55:
 512              	.LBB53:
3151:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 513              		.loc 1 3151 0
 514 0092 5846     		mov	r0, fp
 515              	.LVL57:
 516 0094 40F64F42 		movw	r2, #3151
 517 0098 4949     		ldr	r1, .L72+16
 518 009a 4B4B     		ldr	r3, .L72+24
 519 009c 9847     		blx	r3
 520              	.LVL58:
 521 009e 83E0     		b	.L45
 522              	.LVL59:
 523              	.L71:
 524              	.LBE53:
 525              	.LBE55:
 526              	.LBE57:
 527              	.LBB58:
 528              	.LBB59:
2838:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 529              		.loc 1 2838 0
 530 00a0 BB42     		cmp	r3, r7
 531 00a2 06D0     		beq	.L48
 532              	.LVL60:
 533              	.L47:
2840:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 534              		.loc 1 2840 0
 535 00a4 13F8011F 		ldrb	r1, [r3, #1]!	@ zero_extendqisi2
 536              	.LVL61:
 537 00a8 02F8011F 		strb	r1, [r2, #1]!
2845:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 538              		.loc 1 2845 0
 539 00ac 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 540 00ae 0029     		cmp	r1, #0
 541 00b0 F6D1     		bne	.L71
 542              	.LVL62:
 543              	.L48:
2857:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 544              		.loc 1 2857 0
 545 00b2 4FF0000B 		mov	fp, #0
 546              	.LVL63:
2878:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 547              		.loc 1 2878 0
 548 00b6 271D     		adds	r7, r4, #4
 549              	.LVL64:
 550 00b8 3846     		mov	r0, r7
 551 00ba DFF84881 		ldr	r8, .L72+84
2857:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 552              		.loc 1 2857 0
 553 00be 84F843B0 		strb	fp, [r4, #67]
2870:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 554              		.loc 1 2870 0
 555 00c2 E662     		str	r6, [r4, #44]
2873:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 556              		.loc 1 2873 0
 557 00c4 E664     		str	r6, [r4, #76]
2874:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 558              		.loc 1 2874 0
 559 00c6 C4F850B0 		str	fp, [r4, #80]
2878:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 560              		.loc 1 2878 0
 561 00ca C047     		blx	r8
 562              	.LVL65:
2879:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 563              		.loc 1 2879 0
 564 00cc 04F11800 		add	r0, r4, #24
 565 00d0 C047     		blx	r8
 566              	.LVL66:
2886:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 567              		.loc 1 2886 0
 568 00d2 C6F11003 		rsb	r3, r6, #16
2929:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
 569              		.loc 1 2929 0
 570 00d6 C4F854B0 		str	fp, [r4, #84]
 571              	.LBE59:
 572              	.LBE58:
 633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 573              		.loc 1 633 0
 574 00da 2846     		mov	r0, r5
 575              	.LBB62:
 576              	.LBB60:
2886:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 577              		.loc 1 2886 0
 578 00dc A361     		str	r3, [r4, #24]
 579              	.LBE60:
 580              	.LBE62:
 633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 581              		.loc 1 633 0
 582 00de 4946     		mov	r1, r9
 583 00e0 3A4B     		ldr	r3, .L72+28
 584 00e2 5246     		mov	r2, r10
 585              	.LBB63:
 586              	.LBB61:
2883:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 587              		.loc 1 2883 0
 588 00e4 2461     		str	r4, [r4, #16]
2887:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 589              		.loc 1 2887 0
 590 00e6 6462     		str	r4, [r4, #36]
2930:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 591              		.loc 1 2930 0
 592 00e8 84F858B0 		strb	fp, [r4, #88]
 593              	.LBE61:
 594              	.LBE63:
 633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 595              		.loc 1 633 0
 596 00ec 9847     		blx	r3
 597              	.LVL67:
 637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 598              		.loc 1 637 0
 599 00ee 0B9B     		ldr	r3, [sp, #44]
 633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 600              		.loc 1 633 0
 601 00f0 2060     		str	r0, [r4]
 637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 602              		.loc 1 637 0
 603 00f2 03B1     		cbz	r3, .L49
 642:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 604              		.loc 1 642 0
 605 00f4 1C60     		str	r4, [r3]
 606              	.L49:
 651:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 607              		.loc 1 651 0
 608 00f6 364B     		ldr	r3, .L72+32
 609 00f8 9847     		blx	r3
 610              	.LVL68:
 653:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 611              		.loc 1 653 0
 612 00fa 364A     		ldr	r2, .L72+36
 654:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 613              		.loc 1 654 0
 614 00fc 364D     		ldr	r5, .L72+40
 615              	.LVL69:
 616 00fe DFF80891 		ldr	r9, .L72+88
 617              	.LVL70:
 653:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 618              		.loc 1 653 0
 619 0102 1368     		ldr	r3, [r2]
 620 0104 0133     		adds	r3, r3, #1
 621 0106 1360     		str	r3, [r2]
 654:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 622              		.loc 1 654 0
 623 0108 2B68     		ldr	r3, [r5]
 624 010a 1BBB     		cbnz	r3, .L50
 658:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 625              		.loc 1 658 0
 626 010c 2C60     		str	r4, [r5]
 660:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 627              		.loc 1 660 0
 628 010e 1268     		ldr	r2, [r2]
 629 0110 012A     		cmp	r2, #1
 630 0112 27D1     		bne	.L52
 631 0114 9846     		mov	r8, r3
 632              	.LVL71:
 633              	.L51:
 634              	.LBB64:
 635              	.LBB65:
3004:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 636              		.loc 1 3004 0
 637 0116 09EB0800 		add	r0, r9, r8
 638 011a DFF8F0A0 		ldr	r10, .L72+92
 639 011e 08F11408 		add	r8, r8, #20
 640 0122 D047     		blx	r10
 641              	.LVL72:
3002:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 642              		.loc 1 3002 0
 643 0124 B8F5A07F 		cmp	r8, #320
 644 0128 F5D1     		bne	.L51
3007:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 645              		.loc 1 3007 0
 646 012a DFF8E4B0 		ldr	fp, .L72+96
 647 012e 5846     		mov	r0, fp
3008:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 648              		.loc 1 3008 0
 649 0130 DFF8E080 		ldr	r8, .L72+100
3007:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 650              		.loc 1 3007 0
 651 0134 D047     		blx	r10
 652              	.LVL73:
3008:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 653              		.loc 1 3008 0
 654 0136 4046     		mov	r0, r8
 655 0138 D047     		blx	r10
 656              	.LVL74:
3009:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 657              		.loc 1 3009 0
 658 013a 2848     		ldr	r0, .L72+44
 659 013c D047     		blx	r10
 660              	.LVL75:
3013:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 661              		.loc 1 3013 0
 662 013e 2848     		ldr	r0, .L72+48
 663 0140 D047     		blx	r10
 664              	.LVL76:
3019:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 665              		.loc 1 3019 0
 666 0142 2848     		ldr	r0, .L72+52
 667 0144 D047     		blx	r10
 668              	.LVL77:
3025:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 669              		.loc 1 3025 0
 670 0146 284B     		ldr	r3, .L72+56
 671 0148 C3F800B0 		str	fp, [r3]
3026:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 672              		.loc 1 3026 0
 673 014c 274B     		ldr	r3, .L72+60
 674 014e C3F80080 		str	r8, [r3]
 675 0152 07E0     		b	.L52
 676              	.LVL78:
 677              	.L50:
 678              	.LBE65:
 679              	.LBE64:
 677:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 680              		.loc 1 677 0
 681 0154 264B     		ldr	r3, .L72+64
 682 0156 1B68     		ldr	r3, [r3]
 683 0158 23B9     		cbnz	r3, .L52
 679:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 684              		.loc 1 679 0
 685 015a 2B68     		ldr	r3, [r5]
 686 015c DB6A     		ldr	r3, [r3, #44]
 687 015e B342     		cmp	r3, r6
 681:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 688              		.loc 1 681 0
 689 0160 98BF     		it	ls
 690 0162 2C60     		strls	r4, [r5]
 691              	.LVL79:
 692              	.L52:
 694:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 693              		.loc 1 694 0
 694 0164 234A     		ldr	r2, .L72+68
 704:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 695              		.loc 1 704 0
 696 0166 2449     		ldr	r1, .L72+72
 694:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 697              		.loc 1 694 0
 698 0168 1368     		ldr	r3, [r2]
 699 016a 0133     		adds	r3, r3, #1
 700 016c 1360     		str	r3, [r2]
 699:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 701              		.loc 1 699 0
 702 016e 6364     		str	r3, [r4, #68]
 704:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 703              		.loc 1 704 0
 704 0170 E26A     		ldr	r2, [r4, #44]
 705 0172 0124     		movs	r4, #1
 706              	.LVL80:
 707 0174 0B68     		ldr	r3, [r1]
 708 0176 04FA02F0 		lsl	r0, r4, r2
 709 017a 0343     		orrs	r3, r3, r0
 710 017c 1420     		movs	r0, #20
 711 017e 0B60     		str	r3, [r1]
 712 0180 3946     		mov	r1, r7
 713 0182 00FB0290 		mla	r0, r0, r2, r9
 714 0186 1D4B     		ldr	r3, .L72+76
 715 0188 9847     		blx	r3
 716              	.LVL81:
 709:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 717              		.loc 1 709 0
 718 018a 1D4B     		ldr	r3, .L72+80
 719 018c 9847     		blx	r3
 720              	.LVL82:
 719:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 721              		.loc 1 719 0
 722 018e 184B     		ldr	r3, .L72+64
 723 0190 1B68     		ldr	r3, [r3]
 724 0192 33B1     		cbz	r3, .L58
 723:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 725              		.loc 1 723 0
 726 0194 2B68     		ldr	r3, [r5]
 727 0196 DB6A     		ldr	r3, [r3, #44]
 728 0198 B342     		cmp	r3, r6
 729 019a 02D2     		bcs	.L58
 725:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 730              		.loc 1 725 0
 731              	@ 725 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 732 019c 00DF     		SWI 0     
 733 019e BFF36F8F 	ISB         
 734              	@ 0 "" 2
 735              		.thumb
 736              	.L58:
 737 01a2 2046     		mov	r0, r4
 738 01a4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 739              	.LVL83:
 740              	.L45:
 713:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 741              		.loc 1 713 0
 742 01a8 4FF0FF30 		mov	r0, #-1
 739:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 743              		.loc 1 739 0
 744 01ac BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 745              	.LVL84:
 746              	.L73:
 747              		.align	2
 748              	.L72:
 749 01b0 00000000 		.word	.LC0
 750 01b4 00000000 		.word	.LANCHOR8
 751 01b8 00000000 		.word	printf
 752 01bc 00000000 		.word	pvPortMalloc1
 753 01c0 00000000 		.word	.LANCHOR9
 754 01c4 00000000 		.word	memset
 755 01c8 00000000 		.word	vPortFree1
 756 01cc 00000000 		.word	pxPortInitialiseStack
 757 01d0 00000000 		.word	vPortEnterCritical
 758 01d4 00000000 		.word	.LANCHOR10
 759 01d8 00000000 		.word	.LANCHOR5
 760 01dc 00000000 		.word	.LANCHOR4
 761 01e0 00000000 		.word	.LANCHOR14
 762 01e4 00000000 		.word	.LANCHOR3
 763 01e8 00000000 		.word	.LANCHOR0
 764 01ec 00000000 		.word	.LANCHOR7
 765 01f0 00000000 		.word	.LANCHOR15
 766 01f4 00000000 		.word	.LANCHOR16
 767 01f8 00000000 		.word	.LANCHOR17
 768 01fc 00000000 		.word	vListInsertEnd
 769 0200 00000000 		.word	vPortExitCritical
 770 0204 00000000 		.word	vListInitialiseItem
 771 0208 00000000 		.word	.LANCHOR11
 772 020c 00000000 		.word	vListInitialise
 773 0210 00000000 		.word	.LANCHOR12
 774 0214 00000000 		.word	.LANCHOR13
 775              		.cfi_endproc
 776              	.LFE1:
 778              		.section	.text.vTaskDelete,"ax",%progbits
 779              		.align	1
 780              		.global	vTaskDelete
 781              		.thumb
 782              		.thumb_func
 784              	vTaskDelete:
 785              	.LFB2:
 745:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 786              		.loc 1 745 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              	.LVL85:
 791 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 792              	.LCFI4:
 793              		.cfi_def_cfa_offset 24
 794              		.cfi_offset 3, -24
 795              		.cfi_offset 4, -20
 796              		.cfi_offset 5, -16
 797              		.cfi_offset 6, -12
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 745:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 800              		.loc 1 745 0
 801 0002 0446     		mov	r4, r0
 748:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 802              		.loc 1 748 0
 803 0004 244D     		ldr	r5, .L88
 804 0006 A847     		blx	r5
 805              	.LVL86:
 752:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 806              		.loc 1 752 0
 807 0008 0CB9     		cbnz	r4, .L75
 752:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 808              		.loc 1 752 0 is_stmt 0 discriminator 1
 809 000a 244B     		ldr	r3, .L88+4
 810 000c 1C68     		ldr	r4, [r3]
 811              	.LVL87:
 812              	.L75:
 758:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 813              		.loc 1 758 0 is_stmt 1 discriminator 4
 814 000e 261D     		adds	r6, r4, #4
 815 0010 3046     		mov	r0, r6
 816 0012 234F     		ldr	r7, .L88+8
 817 0014 B847     		blx	r7
 818              	.LVL88:
 819 0016 60B9     		cbnz	r0, .L76
 760:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 820              		.loc 1 760 0
 821 0018 E06A     		ldr	r0, [r4, #44]
 822 001a 1423     		movs	r3, #20
 823 001c 214A     		ldr	r2, .L88+12
 824 001e 4343     		muls	r3, r0, r3
 825 0020 D358     		ldr	r3, [r2, r3]
 826 0022 33B9     		cbnz	r3, .L76
 760:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 827              		.loc 1 760 0 is_stmt 0 discriminator 1
 828 0024 2049     		ldr	r1, .L88+16
 829 0026 0123     		movs	r3, #1
 830 0028 8340     		lsls	r3, r3, r0
 831 002a 0A68     		ldr	r2, [r1]
 832 002c 22EA0303 		bic	r3, r2, r3
 833 0030 0B60     		str	r3, [r1]
 834              	.L76:
 768:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 835              		.loc 1 768 0 is_stmt 1
 836 0032 A36A     		ldr	r3, [r4, #40]
 837 0034 13B1     		cbz	r3, .L77
 770:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 838              		.loc 1 770 0
 839 0036 04F11800 		add	r0, r4, #24
 840 003a B847     		blx	r7
 841              	.LVL89:
 842              	.L77:
 777:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 843              		.loc 1 777 0
 844 003c 3146     		mov	r1, r6
 845 003e 1B48     		ldr	r0, .L88+20
 846 0040 1B4B     		ldr	r3, .L88+24
 847 0042 9847     		blx	r3
 848              	.LVL90:
 782:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 849              		.loc 1 782 0
 850 0044 1B4A     		ldr	r2, .L88+28
 790:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 851              		.loc 1 790 0
 852 0046 1C4E     		ldr	r6, .L88+32
 782:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 853              		.loc 1 782 0
 854 0048 1368     		ldr	r3, [r2]
 855 004a 0133     		adds	r3, r3, #1
 856 004c 1360     		str	r3, [r2]
 786:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 857              		.loc 1 786 0
 858 004e 1B4A     		ldr	r2, .L88+36
 859 0050 1368     		ldr	r3, [r2]
 860 0052 0133     		adds	r3, r3, #1
 861 0054 1360     		str	r3, [r2]
 790:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 862              		.loc 1 790 0
 863 0056 B047     		blx	r6
 864              	.LVL91:
 794:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 865              		.loc 1 794 0
 866 0058 194B     		ldr	r3, .L88+40
 867 005a 1B68     		ldr	r3, [r3]
 868 005c D3B1     		cbz	r3, .L74
 796:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 869              		.loc 1 796 0
 870 005e 0F4B     		ldr	r3, .L88+4
 871 0060 1B68     		ldr	r3, [r3]
 872 0062 9C42     		cmp	r4, r3
 873 0064 12D1     		bne	.L79
 798:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 874              		.loc 1 798 0
 875 0066 174B     		ldr	r3, .L88+44
 876 0068 1B68     		ldr	r3, [r3]
 877 006a 5BB1     		cbz	r3, .L80
 798:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 878              		.loc 1 798 0 is_stmt 0 discriminator 1
 879              	@ 798 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 880 006c 72B6     		CPSID i   
 881 006e BFF34F8F 	DSB       
 882 0072 BFF36F8F 	ISB         
 883              	@ 0 "" 2
 884              		.thumb
 885 0076 1448     		ldr	r0, .L88+48
 886 0078 40F21E32 		movw	r2, #798
 887 007c 1349     		ldr	r1, .L88+52
 888 007e 144B     		ldr	r3, .L88+56
 889 0080 9847     		blx	r3
 890              	.LVL92:
 891              	.L81:
 892 0082 FEE7     		b	.L81
 893              	.L80:
 806:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 894              		.loc 1 806 0 is_stmt 1
 895              	@ 806 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 896 0084 00DF     		SWI 0     
 897 0086 BFF36F8F 	ISB         
 898              	@ 0 "" 2
 899              		.thumb
 900 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 901              	.LVL93:
 902              	.L79:
 812:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 903              		.loc 1 812 0
 904 008c A847     		blx	r5
 905              	.LVL94:
 814:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 906              		.loc 1 814 0
 907 008e 114B     		ldr	r3, .L88+60
 908 0090 9847     		blx	r3
 909              	.LVL95:
 816:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 910              		.loc 1 816 0
 911 0092 B047     		blx	r6
 912              	.LVL96:
 913              	.L74:
 914 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 915              	.LVL97:
 916              	.L89:
 917 0096 00BF     		.align	2
 918              	.L88:
 919 0098 00000000 		.word	vPortEnterCritical
 920 009c 00000000 		.word	.LANCHOR5
 921 00a0 00000000 		.word	uxListRemove
 922 00a4 00000000 		.word	.LANCHOR11
 923 00a8 00000000 		.word	.LANCHOR17
 924 00ac 00000000 		.word	.LANCHOR14
 925 00b0 00000000 		.word	vListInsertEnd
 926 00b4 00000000 		.word	.LANCHOR18
 927 00b8 00000000 		.word	vPortExitCritical
 928 00bc 00000000 		.word	.LANCHOR16
 929 00c0 00000000 		.word	.LANCHOR15
 930 00c4 00000000 		.word	.LANCHOR19
 931 00c8 00000000 		.word	.LC0
 932 00cc 00000000 		.word	.LANCHOR20
 933 00d0 00000000 		.word	printf
 934 00d4 00000000 		.word	prvResetNextTaskUnblockTime
 935              		.cfi_endproc
 936              	.LFE2:
 938              		.section	.text.eTaskGetState,"ax",%progbits
 939              		.align	1
 940              		.global	eTaskGetState
 941              		.thumb
 942              		.thumb_func
 944              	eTaskGetState:
 945              	.LFB5:
 989:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eTaskState eReturn;
 946              		.loc 1 989 0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 0
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950              	.LVL98:
 951 0000 38B5     		push	{r3, r4, r5, lr}
 952              	.LCFI5:
 953              		.cfi_def_cfa_offset 16
 954              		.cfi_offset 3, -16
 955              		.cfi_offset 4, -12
 956              		.cfi_offset 5, -8
 957              		.cfi_offset 14, -4
 994:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 958              		.loc 1 994 0
 959 0002 0546     		mov	r5, r0
 960 0004 58B9     		cbnz	r0, .L91
 994:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 961              		.loc 1 994 0 is_stmt 0 discriminator 1
 962              	@ 994 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 963 0006 72B6     		CPSID i   
 964 0008 BFF34F8F 	DSB       
 965 000c BFF36F8F 	ISB         
 966              	@ 0 "" 2
 967              		.thumb
 968 0010 1548     		ldr	r0, .L100
 969              	.LVL99:
 970 0012 40F2E232 		movw	r2, #994
 971 0016 1549     		ldr	r1, .L100+4
 972 0018 154B     		ldr	r3, .L100+8
 973 001a 9847     		blx	r3
 974              	.LVL100:
 975              	.L92:
 976 001c FEE7     		b	.L92
 977              	.LVL101:
 978              	.L91:
 996:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 979              		.loc 1 996 0 is_stmt 1
 980 001e 154B     		ldr	r3, .L100+12
 981 0020 1B68     		ldr	r3, [r3]
 982 0022 9842     		cmp	r0, r3
 983 0024 1BD0     		beq	.L95
1003:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 984              		.loc 1 1003 0
 985 0026 144B     		ldr	r3, .L100+16
 986 0028 9847     		blx	r3
 987              	.LVL102:
1007:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 988              		.loc 1 1007 0
 989 002a 144B     		ldr	r3, .L100+20
1005:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 990              		.loc 1 1005 0
 991 002c 6C69     		ldr	r4, [r5, #20]
 992              	.LVL103:
1007:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 993              		.loc 1 1007 0
 994 002e 9847     		blx	r3
 995              	.LVL104:
1009:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 996              		.loc 1 1009 0
 997 0030 134B     		ldr	r3, .L100+24
 998 0032 1B68     		ldr	r3, [r3]
 999 0034 9C42     		cmp	r4, r3
 1000 0036 14D0     		beq	.L97
1009:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 1001              		.loc 1 1009 0 is_stmt 0 discriminator 1
 1002 0038 124B     		ldr	r3, .L100+28
 1003 003a 1B68     		ldr	r3, [r3]
 1004 003c 9C42     		cmp	r4, r3
 1005 003e 10D0     		beq	.L97
1017:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1006              		.loc 1 1017 0 is_stmt 1
 1007 0040 114B     		ldr	r3, .L100+32
 1008 0042 9C42     		cmp	r4, r3
 1009 0044 05D1     		bne	.L94
1022:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1010              		.loc 1 1022 0
 1011 0046 AB6A     		ldr	r3, [r5, #40]
1028:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 1012              		.loc 1 1028 0
 1013 0048 002B     		cmp	r3, #0
 1014 004a 0CBF     		ite	eq
 1015 004c 0320     		moveq	r0, #3
 1016 004e 0220     		movne	r0, #2
 1017 0050 38BD     		pop	{r3, r4, r5, pc}
 1018              	.LVL105:
 1019              	.L94:
1046:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 1020              		.loc 1 1046 0
 1021 0052 0E48     		ldr	r0, .L100+36
 1022 0054 8442     		cmp	r4, r0
 1023 0056 0CBF     		ite	eq
 1024 0058 0420     		moveq	r0, #4
 1025 005a 0120     		movne	r0, #1
 1026 005c 38BD     		pop	{r3, r4, r5, pc}
 1027              	.LVL106:
 1028              	.L95:
 999:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 1029              		.loc 1 999 0
 1030 005e 0020     		movs	r0, #0
 1031              	.LVL107:
 1032 0060 38BD     		pop	{r3, r4, r5, pc}
 1033              	.LVL108:
 1034              	.L97:
1013:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 1035              		.loc 1 1013 0
 1036 0062 0220     		movs	r0, #2
 1037              	.LVL109:
1051:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1038              		.loc 1 1051 0
 1039 0064 38BD     		pop	{r3, r4, r5, pc}
 1040              	.LVL110:
 1041              	.L101:
 1042 0066 00BF     		.align	2
 1043              	.L100:
 1044 0068 00000000 		.word	.LC0
 1045 006c 00000000 		.word	.LANCHOR21
 1046 0070 00000000 		.word	printf
 1047 0074 00000000 		.word	.LANCHOR5
 1048 0078 00000000 		.word	vPortEnterCritical
 1049 007c 00000000 		.word	vPortExitCritical
 1050 0080 00000000 		.word	.LANCHOR0
 1051 0084 00000000 		.word	.LANCHOR7
 1052 0088 00000000 		.word	.LANCHOR3
 1053 008c 00000000 		.word	.LANCHOR14
 1054              		.cfi_endproc
 1055              	.LFE5:
 1057              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1058              		.align	1
 1059              		.global	uxTaskPriorityGet
 1060              		.thumb
 1061              		.thumb_func
 1063              	uxTaskPriorityGet:
 1064              	.LFB6:
1059:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 1065              		.loc 1 1059 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069              	.LVL111:
 1070 0000 10B5     		push	{r4, lr}
 1071              	.LCFI6:
 1072              		.cfi_def_cfa_offset 8
 1073              		.cfi_offset 4, -8
 1074              		.cfi_offset 14, -4
1059:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 1075              		.loc 1 1059 0
 1076 0002 0446     		mov	r4, r0
1063:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 1077              		.loc 1 1063 0
 1078 0004 044B     		ldr	r3, .L104
 1079 0006 9847     		blx	r3
 1080              	.LVL112:
1067:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1081              		.loc 1 1067 0
 1082 0008 0CB9     		cbnz	r4, .L103
1067:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1083              		.loc 1 1067 0 is_stmt 0 discriminator 1
 1084 000a 044B     		ldr	r3, .L104+4
 1085 000c 1C68     		ldr	r4, [r3]
 1086              	.LVL113:
 1087              	.L103:
1068:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 1088              		.loc 1 1068 0 is_stmt 1 discriminator 4
 1089 000e E46A     		ldr	r4, [r4, #44]
 1090              	.LVL114:
1070:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1091              		.loc 1 1070 0 discriminator 4
 1092 0010 034B     		ldr	r3, .L104+8
 1093 0012 9847     		blx	r3
 1094              	.LVL115:
1073:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1095              		.loc 1 1073 0 discriminator 4
 1096 0014 2046     		mov	r0, r4
 1097 0016 10BD     		pop	{r4, pc}
 1098              	.LVL116:
 1099              	.L105:
 1100              		.align	2
 1101              	.L104:
 1102 0018 00000000 		.word	vPortEnterCritical
 1103 001c 00000000 		.word	.LANCHOR5
 1104 0020 00000000 		.word	vPortExitCritical
 1105              		.cfi_endproc
 1106              	.LFE6:
 1108              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1109              		.align	1
 1110              		.global	uxTaskPriorityGetFromISR
 1111              		.thumb
 1112              		.thumb_func
 1114              	uxTaskPriorityGetFromISR:
 1115              	.LFB7:
1081:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 1116              		.loc 1 1081 0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 8
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              		@ link register save eliminated.
 1121              	.LVL117:
 1122 0000 82B0     		sub	sp, sp, #8
 1123              	.LCFI7:
 1124              		.cfi_def_cfa_offset 8
 1125              	.LBB66:
 1126              	.LBB67:
 1127              		.file 2 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro
   1:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /*
   2:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     All rights reserved
   4:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
   5:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
   7:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
   9:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  13:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     ***************************************************************************
  14:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     ***************************************************************************
  19:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  20:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  25:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     ***************************************************************************
  26:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *                                                                       *
  27:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *                                                                       *
  32:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****      *                                                                       *
  37:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     ***************************************************************************
  38:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  39:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     defined configASSERT()?
  42:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  43:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     embedded software for free we request you assist our global community by
  45:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     participating in the support forum.
  46:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  47:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  52:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  56:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  59:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  63:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     mission critical applications that require provable dependability.
  66:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  67:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     1 tab == 4 spaces!
  68:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** */
  69:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  70:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #ifndef PORTMACRO_H
  71:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define PORTMACRO_H
  72:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  73:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #ifdef __cplusplus
  74:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     extern "C" {
  75:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #endif
  76:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  77:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /*-----------------------------------------------------------
  78:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  * Port specific definitions.
  79:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  *
  80:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the given hardware
  81:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  * and compiler.
  82:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  *
  83:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  * These settings should not be altered.
  84:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  *-----------------------------------------------------------
  85:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  */
  86:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  87:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /* Type definitions. */
  88:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portCHAR        char
  89:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portFLOAT       float
  90:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portDOUBLE      double
  91:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portLONG        long
  92:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portSHORT       short
  93:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portSTACK_TYPE  uint32_t
  94:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portBASE_TYPE   long
  95:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
  96:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  97:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** typedef long BaseType_t;
  98:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** typedef unsigned long UBaseType_t;
  99:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 100:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** typedef uint32_t TickType_t;
 101:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 102:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 103:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 104:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** not need to be guarded with a critical section. */
 105:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portTICK_TYPE_IS_ATOMIC 1
 106:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 107:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /*-----------------------------------------------------------*/
 108:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 109:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /* Hardware specifics. */
 110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portSTACK_GROWTH            ( -1 )
 111:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portTICK_PERIOD_MS          ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 112:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portBYTE_ALIGNMENT          8
 113:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 114:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /*-----------------------------------------------------------*/
 115:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 116:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /* Task utilities. */
 117:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 118:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /* Called at the end of an ISR that can cause a context switch. */
 119:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired )\
 120:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** {                                               \
 121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** extern volatile uint32_t ulPortYieldRequired;   \
 122:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****                                                 \
 123:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     if( xSwitchRequired != pdFALSE )            \
 124:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     {                                           \
 125:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****         ulPortYieldRequired = pdTRUE;           \
 126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     }                                           \
 127:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** }
 128:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 129:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 130:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portYIELD() __asm volatile ( "SWI 0     \n"             \
 131:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****                                      "ISB         " );
 132:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 133:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 134:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /*-----------------------------------------------------------
 135:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  * Critical section control
 136:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****  *----------------------------------------------------------*/
 137:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 138:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** extern void vPortEnterCritical( void );
 139:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** extern void vPortExitCritical( void );
 140:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 141:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** extern void vPortInstallFreeRTOSVectorTable( void );
 143:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 144:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /* The I bit within the CPSR. */
 145:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portINTERRUPT_ENABLE_BIT    ( 1 << 7 )
 146:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 147:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** /* In the absence of a priority mask register, these functions and macros
 148:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** globally enable and disable interrupts. */
 149:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portENTER_CRITICAL()        vPortEnterCritical();
 150:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portEXIT_CRITICAL()         vPortExitCritical();
 151:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portENABLE_INTERRUPTS()     __asm volatile ( "CPSIE i   \n" );
 152:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define portDISABLE_INTERRUPTS()    __asm volatile ( "CPSID i   \n"     \
 153:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****                                                      "DSB       \n"     \
 154:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****                                                      "ISB         " );
 155:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 156:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define __disable_irq()             portDISABLE_INTERRUPTS()
 157:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** #define __enable_irq()              portENABLE_INTERRUPTS()
 158:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 159:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** __attribute__( ( always_inline ) ) static __inline uint32_t portINLINE_SET_INTERRUPT_MASK_FROM_ISR(
 160:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** {
 161:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** volatile uint32_t ulCPSR;
 162:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h **** 
 163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     __asm volatile ( "MRS %0, CPSR" : "=r" (ulCPSR) );
 1128              		.loc 2 163 0
 1129              	@ 163 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h"
 1130 0002 EFF30083 		MRS r3, CPSR
 1131              	@ 0 "" 2
 1132              		.thumb
 1133 0006 0193     		str	r3, [sp, #4]
 164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     ulCPSR &= portINTERRUPT_ENABLE_BIT;
 1134              		.loc 2 164 0
 1135 0008 019B     		ldr	r3, [sp, #4]
 1136 000a 03F08003 		and	r3, r3, #128
 1137 000e 0193     		str	r3, [sp, #4]
 165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     portDISABLE_INTERRUPTS();
 1138              		.loc 2 165 0
 1139              	@ 165 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h"
 1140 0010 72B6     		CPSID i   
 1141 0012 BFF34F8F 	DSB       
 1142 0016 BFF36F8F 	ISB         
 1143              	@ 0 "" 2
 166:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     return ulCPSR;
 1144              		.loc 2 166 0
 1145              		.thumb
 1146 001a 019B     		ldr	r3, [sp, #4]
 1147              	.LBE67:
 1148              	.LBE66:
1107:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1149              		.loc 1 1107 0
 1150 001c 08B9     		cbnz	r0, .L107
1107:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1151              		.loc 1 1107 0 is_stmt 0 discriminator 1
 1152 001e 034A     		ldr	r2, .L109
 1153 0020 1068     		ldr	r0, [r2]
 1154              	.LVL118:
 1155              	.L107:
1108:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 1156              		.loc 1 1108 0 is_stmt 1 discriminator 4
 1157 0022 C06A     		ldr	r0, [r0, #44]
 1158              	.LVL119:
1110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1159              		.loc 1 1110 0 discriminator 4
 1160 0024 03B9     		cbnz	r3, .L108
1110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1161              		.loc 1 1110 0 is_stmt 0 discriminator 1
 1162              	@ 1110 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1163 0026 62B6     		CPSIE i   
 1164              	
 1165              	@ 0 "" 2
 1166              		.thumb
 1167              	.L108:
1113:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1168              		.loc 1 1113 0 is_stmt 1
 1169 0028 02B0     		add	sp, sp, #8
 1170              	.LCFI8:
 1171              		.cfi_def_cfa_offset 0
 1172              		@ sp needed
 1173 002a 7047     		bx	lr
 1174              	.L110:
 1175              		.align	2
 1176              	.L109:
 1177 002c 00000000 		.word	.LANCHOR5
 1178              		.cfi_endproc
 1179              	.LFE7:
 1181              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1182              		.align	1
 1183              		.global	vTaskPrioritySet
 1184              		.thumb
 1185              		.thumb_func
 1187              	vTaskPrioritySet:
 1188              	.LFB8:
1121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 1189              		.loc 1 1121 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              	.LVL120:
1126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1194              		.loc 1 1126 0
 1195 0000 0F29     		cmp	r1, #15
1121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 1196              		.loc 1 1121 0
 1197 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1198              	.LCFI9:
 1199              		.cfi_def_cfa_offset 24
 1200              		.cfi_offset 4, -24
 1201              		.cfi_offset 5, -20
 1202              		.cfi_offset 6, -16
 1203              		.cfi_offset 7, -12
 1204              		.cfi_offset 8, -8
 1205              		.cfi_offset 14, -4
1121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 1206              		.loc 1 1121 0
 1207 0006 0446     		mov	r4, r0
 1208 0008 0D46     		mov	r5, r1
1126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1209              		.loc 1 1126 0
 1210 000a 0BD9     		bls	.L112
1126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1211              		.loc 1 1126 0 is_stmt 0 discriminator 1
 1212              	@ 1126 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1213 000c 72B6     		CPSID i   
 1214 000e BFF34F8F 	DSB       
 1215 0012 BFF36F8F 	ISB         
 1216              	@ 0 "" 2
 1217              		.thumb
 1218 0016 2B48     		ldr	r0, .L128
 1219              	.LVL121:
 1220 0018 40F26642 		movw	r2, #1126
 1221 001c 2A49     		ldr	r1, .L128+4
 1222              	.LVL122:
 1223 001e 2B4B     		ldr	r3, .L128+8
 1224 0020 9847     		blx	r3
 1225              	.LVL123:
 1226              	.L113:
 1227 0022 FEE7     		b	.L113
 1228              	.LVL124:
 1229              	.L112:
1138:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 1230              		.loc 1 1138 0 is_stmt 1
 1231 0024 2A4B     		ldr	r3, .L128+12
 1232 0026 9847     		blx	r3
 1233              	.LVL125:
1142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1234              		.loc 1 1142 0
 1235 0028 0CB9     		cbnz	r4, .L114
1142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1236              		.loc 1 1142 0 is_stmt 0 discriminator 1
 1237 002a 2A4B     		ldr	r3, .L128+16
 1238 002c 1C68     		ldr	r4, [r3]
 1239              	.LVL126:
 1240              	.L114:
1148:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 1241              		.loc 1 1148 0 is_stmt 1 discriminator 4
 1242 002e E36C     		ldr	r3, [r4, #76]
 1243              	.LVL127:
1156:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 1244              		.loc 1 1156 0 discriminator 4
 1245 0030 AB42     		cmp	r3, r5
 1246 0032 43D0     		beq	.L116
1160:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1247              		.loc 1 1160 0
 1248 0034 9D42     		cmp	r5, r3
 1249 0036 274A     		ldr	r2, .L128+16
 1250 0038 09D9     		bls	.L117
1162:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1251              		.loc 1 1162 0
 1252 003a 1168     		ldr	r1, [r2]
 1253 003c 8C42     		cmp	r4, r1
 1254 003e 0BD0     		beq	.L126
1167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
 1255              		.loc 1 1167 0
 1256 0040 1268     		ldr	r2, [r2]
 1257 0042 D66A     		ldr	r6, [r2, #44]
 1258 0044 B542     		cmp	r5, r6
 1259 0046 34BF     		ite	cc
 1260 0048 0026     		movcc	r6, #0
 1261 004a 0126     		movcs	r6, #1
 1262 004c 05E0     		b	.L118
 1263              	.L117:
1183:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1264              		.loc 1 1183 0
 1265 004e 1668     		ldr	r6, [r2]
 1266 0050 A21B     		subs	r2, r4, r6
 1267 0052 5642     		rsbs	r6, r2, #0
 1268 0054 5641     		adcs	r6, r6, r2
 1269 0056 00E0     		b	.L118
 1270              	.L126:
1124:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1271              		.loc 1 1124 0
 1272 0058 0026     		movs	r6, #0
 1273              	.L118:
 1274              	.LVL128:
1200:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1275              		.loc 1 1200 0
 1276 005a E76A     		ldr	r7, [r4, #44]
 1277              	.LVL129:
1216:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 1278              		.loc 1 1216 0
 1279 005c E564     		str	r5, [r4, #76]
1206:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1280              		.loc 1 1206 0
 1281 005e BB42     		cmp	r3, r7
1226:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1282              		.loc 1 1226 0
 1283 0060 A369     		ldr	r3, [r4, #24]
 1284              	.LVL130:
1208:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 1285              		.loc 1 1208 0
 1286 0062 08BF     		it	eq
 1287 0064 E562     		streq	r5, [r4, #44]
1226:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1288              		.loc 1 1226 0
 1289 0066 002B     		cmp	r3, #0
1228:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 1290              		.loc 1 1228 0
 1291 0068 A8BF     		it	ge
 1292 006a C5F11005 		rsbge	r5, r5, #16
 1293              	.LVL131:
1239:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1294              		.loc 1 1239 0
 1295 006e 4FF01403 		mov	r3, #20
1228:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 1296              		.loc 1 1228 0
 1297 0072 A8BF     		it	ge
 1298 0074 A561     		strge	r5, [r4, #24]
1239:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1299              		.loc 1 1239 0
 1300 0076 184D     		ldr	r5, .L128+20
 1301 0078 6269     		ldr	r2, [r4, #20]
 1302 007a 03FB0753 		mla	r3, r3, r7, r5
 1303 007e 9A42     		cmp	r2, r3
 1304 0080 18D1     		bne	.L122
1244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1305              		.loc 1 1244 0
 1306 0082 04F10408 		add	r8, r4, #4
 1307 0086 154B     		ldr	r3, .L128+24
 1308 0088 4046     		mov	r0, r8
 1309 008a 9847     		blx	r3
 1310              	.LVL132:
 1311 008c 144B     		ldr	r3, .L128+28
 1312 008e 28B9     		cbnz	r0, .L125
1249:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 1313              		.loc 1 1249 0
 1314 0090 0122     		movs	r2, #1
 1315 0092 1868     		ldr	r0, [r3]
 1316 0094 BA40     		lsls	r2, r2, r7
 1317 0096 20EA0202 		bic	r2, r0, r2
 1318 009a 1A60     		str	r2, [r3]
 1319              	.L125:
1255:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 1320              		.loc 1 1255 0
 1321 009c E16A     		ldr	r1, [r4, #44]
 1322 009e 0122     		movs	r2, #1
 1323 00a0 1F68     		ldr	r7, [r3]
 1324              	.LVL133:
 1325 00a2 1420     		movs	r0, #20
 1326 00a4 8A40     		lsls	r2, r2, r1
 1327 00a6 3A43     		orrs	r2, r2, r7
 1328 00a8 00FB0150 		mla	r0, r0, r1, r5
 1329 00ac 1A60     		str	r2, [r3]
 1330 00ae 4146     		mov	r1, r8
 1331 00b0 0C4B     		ldr	r3, .L128+32
 1332 00b2 9847     		blx	r3
 1333              	.LVL134:
 1334              	.L122:
1262:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1335              		.loc 1 1262 0
 1336 00b4 16B1     		cbz	r6, .L116
1264:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 1337              		.loc 1 1264 0
 1338              	@ 1264 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1339 00b6 00DF     		SWI 0     
 1340 00b8 BFF36F8F 	ISB         
 1341              	@ 0 "" 2
 1342              	.LVL135:
 1343              		.thumb
 1344              	.L116:
1276:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 1345              		.loc 1 1276 0
 1346 00bc 0A4B     		ldr	r3, .L128+36
 1347 00be 9847     		blx	r3
 1348              	.LVL136:
 1349 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1350              	.LVL137:
 1351              	.L129:
 1352              		.align	2
 1353              	.L128:
 1354 00c4 00000000 		.word	.LC0
 1355 00c8 00000000 		.word	.LANCHOR22
 1356 00cc 00000000 		.word	printf
 1357 00d0 00000000 		.word	vPortEnterCritical
 1358 00d4 00000000 		.word	.LANCHOR5
 1359 00d8 00000000 		.word	.LANCHOR11
 1360 00dc 00000000 		.word	uxListRemove
 1361 00e0 00000000 		.word	.LANCHOR17
 1362 00e4 00000000 		.word	vListInsertEnd
 1363 00e8 00000000 		.word	vPortExitCritical
 1364              		.cfi_endproc
 1365              	.LFE8:
 1367              		.section	.text.vTaskResume,"ax",%progbits
 1368              		.align	1
 1369              		.global	vTaskResume
 1370              		.thumb
 1371              		.thumb_func
 1373              	vTaskResume:
 1374              	.LFB11:
1420:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1375              		.loc 1 1420 0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 0
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
 1379              	.LVL138:
 1380 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1381              	.LCFI10:
 1382              		.cfi_def_cfa_offset 24
 1383              		.cfi_offset 3, -24
 1384              		.cfi_offset 4, -20
 1385              		.cfi_offset 5, -16
 1386              		.cfi_offset 6, -12
 1387              		.cfi_offset 7, -8
 1388              		.cfi_offset 14, -4
1424:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1389              		.loc 1 1424 0
 1390 0002 0446     		mov	r4, r0
 1391 0004 58B9     		cbnz	r0, .L131
1424:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1392              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1393              	@ 1424 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1394 0006 72B6     		CPSID i   
 1395 0008 BFF34F8F 	DSB       
 1396 000c BFF36F8F 	ISB         
 1397              	@ 0 "" 2
 1398              		.thumb
 1399 0010 1748     		ldr	r0, .L137
 1400              	.LVL139:
 1401 0012 4FF4B262 		mov	r2, #1424
 1402 0016 1749     		ldr	r1, .L137+4
 1403 0018 174B     		ldr	r3, .L137+8
 1404 001a 9847     		blx	r3
 1405              	.LVL140:
 1406              	.L132:
 1407 001c FEE7     		b	.L132
 1408              	.LVL141:
 1409              	.L131:
1428:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 1410              		.loc 1 1428 0 is_stmt 1 discriminator 1
 1411 001e 174E     		ldr	r6, .L137+12
 1412 0020 3368     		ldr	r3, [r6]
 1413 0022 9842     		cmp	r0, r3
 1414 0024 22D0     		beq	.L130
1430:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 1415              		.loc 1 1430 0
 1416 0026 164B     		ldr	r3, .L137+16
 1417 0028 9847     		blx	r3
 1418              	.LVL142:
1432:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1419              		.loc 1 1432 0
 1420 002a 2046     		mov	r0, r4
 1421 002c 154B     		ldr	r3, .L137+20
 1422 002e 9847     		blx	r3
 1423              	.LVL143:
 1424 0030 0128     		cmp	r0, #1
 1425 0032 0546     		mov	r5, r0
 1426 0034 18D1     		bne	.L135
1438:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1427              		.loc 1 1438 0
 1428 0036 271D     		adds	r7, r4, #4
 1429 0038 134B     		ldr	r3, .L137+24
 1430 003a 3846     		mov	r0, r7
 1431 003c 9847     		blx	r3
 1432              	.LVL144:
1439:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1433              		.loc 1 1439 0
 1434 003e 1349     		ldr	r1, .L137+28
 1435 0040 E26A     		ldr	r2, [r4, #44]
 1436 0042 1420     		movs	r0, #20
 1437 0044 0B68     		ldr	r3, [r1]
 1438 0046 9540     		lsls	r5, r5, r2
 1439 0048 1D43     		orrs	r5, r5, r3
 1440 004a 114B     		ldr	r3, .L137+32
 1441 004c 0D60     		str	r5, [r1]
 1442 004e 3946     		mov	r1, r7
 1443 0050 00FB0230 		mla	r0, r0, r2, r3
 1444 0054 0F4B     		ldr	r3, .L137+36
 1445 0056 9847     		blx	r3
 1446              	.LVL145:
1442:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1447              		.loc 1 1442 0
 1448 0058 3368     		ldr	r3, [r6]
 1449 005a E26A     		ldr	r2, [r4, #44]
 1450 005c DB6A     		ldr	r3, [r3, #44]
 1451 005e 9A42     		cmp	r2, r3
 1452 0060 02D3     		bcc	.L135
1447:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 1453              		.loc 1 1447 0
 1454              	@ 1447 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1455 0062 00DF     		SWI 0     
 1456 0064 BFF36F8F 	ISB         
 1457              	@ 0 "" 2
 1458              		.thumb
 1459              	.L135:
1459:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 1460              		.loc 1 1459 0
 1461 0068 0B4B     		ldr	r3, .L137+40
 1462 006a 9847     		blx	r3
 1463              	.LVL146:
 1464              	.L130:
 1465 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1466              	.LVL147:
 1467              	.L138:
 1468 006e 00BF     		.align	2
 1469              	.L137:
 1470 0070 00000000 		.word	.LC0
 1471 0074 00000000 		.word	.LANCHOR23
 1472 0078 00000000 		.word	printf
 1473 007c 00000000 		.word	.LANCHOR5
 1474 0080 00000000 		.word	vPortEnterCritical
 1475 0084 00000000 		.word	prvTaskIsTaskSuspended
 1476 0088 00000000 		.word	uxListRemove
 1477 008c 00000000 		.word	.LANCHOR17
 1478 0090 00000000 		.word	.LANCHOR11
 1479 0094 00000000 		.word	vListInsertEnd
 1480 0098 00000000 		.word	vPortExitCritical
 1481              		.cfi_endproc
 1482              	.LFE11:
 1484              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1485              		.align	1
 1486              		.global	xTaskResumeFromISR
 1487              		.thumb
 1488              		.thumb_func
 1490              	xTaskResumeFromISR:
 1491              	.LFB12:
1474:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1492              		.loc 1 1474 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 8
 1495              		@ frame_needed = 0, uses_anonymous_args = 0
 1496              	.LVL148:
 1497 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 1498              	.LCFI11:
 1499              		.cfi_def_cfa_offset 40
 1500              		.cfi_offset 4, -28
 1501              		.cfi_offset 5, -24
 1502              		.cfi_offset 6, -20
 1503              		.cfi_offset 7, -16
 1504              		.cfi_offset 8, -12
 1505              		.cfi_offset 9, -8
 1506              		.cfi_offset 14, -4
1479:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1507              		.loc 1 1479 0
 1508 0004 0546     		mov	r5, r0
 1509 0006 58B9     		cbnz	r0, .L140
1479:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1510              		.loc 1 1479 0 is_stmt 0 discriminator 1
 1511              	@ 1479 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1512 0008 72B6     		CPSID i   
 1513 000a BFF34F8F 	DSB       
 1514 000e BFF36F8F 	ISB         
 1515              	@ 0 "" 2
 1516              		.thumb
 1517 0012 2248     		ldr	r0, .L146
 1518              	.LVL149:
 1519 0014 40F2C752 		movw	r2, #1479
 1520 0018 2149     		ldr	r1, .L146+4
 1521 001a 224B     		ldr	r3, .L146+8
 1522 001c 9847     		blx	r3
 1523              	.LVL150:
 1524              	.L141:
 1525 001e FEE7     		b	.L141
 1526              	.LVL151:
 1527              	.L140:
 1528              	.LBB68:
 1529              	.LBB69:
 163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     ulCPSR &= portINTERRUPT_ENABLE_BIT;
 1530              		.loc 2 163 0 is_stmt 1
 1531              	@ 163 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h"
 1532 0020 EFF30083 		MRS r3, CPSR
 1533              	@ 0 "" 2
 1534              		.thumb
 1535 0024 0193     		str	r3, [sp, #4]
 164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     portDISABLE_INTERRUPTS();
 1536              		.loc 2 164 0
 1537 0026 019B     		ldr	r3, [sp, #4]
 1538 0028 03F08003 		and	r3, r3, #128
 1539 002c 0193     		str	r3, [sp, #4]
 165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     return ulCPSR;
 1540              		.loc 2 165 0
 1541              	@ 165 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h"
 1542 002e 72B6     		CPSID i   
 1543 0030 BFF34F8F 	DSB       
 1544 0034 BFF36F8F 	ISB         
 1545              	@ 0 "" 2
 1546              		.thumb
 1547              	.LBE69:
 1548              	.LBE68:
1501:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 1549              		.loc 1 1501 0
 1550 0038 1B4B     		ldr	r3, .L146+12
 1551 003a 9847     		blx	r3
 1552              	.LVL152:
 1553              	.LBB71:
 1554              	.LBB70:
 1555              		.loc 2 166 0
 1556 003c DDF80480 		ldr	r8, [sp, #4]
 1557              	.LBE70:
 1558              	.LBE71:
1501:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 1559              		.loc 1 1501 0
 1560 0040 0128     		cmp	r0, #1
 1561 0042 0646     		mov	r6, r0
 1562 0044 21D1     		bne	.L145
1506:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 1563              		.loc 1 1506 0
 1564 0046 194B     		ldr	r3, .L146+16
 1565 0048 194F     		ldr	r7, .L146+20
 1566 004a 1B68     		ldr	r3, [r3]
 1567 004c CBB9     		cbnz	r3, .L143
1510:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1568              		.loc 1 1510 0
 1569 004e 194B     		ldr	r3, .L146+24
1519:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1570              		.loc 1 1519 0
 1571 0050 05F10409 		add	r9, r5, #4
1510:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1572              		.loc 1 1510 0
 1573 0054 EC6A     		ldr	r4, [r5, #44]
1519:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1574              		.loc 1 1519 0
 1575 0056 4846     		mov	r0, r9
1510:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1576              		.loc 1 1510 0
 1577 0058 1B68     		ldr	r3, [r3]
 1578 005a DB6A     		ldr	r3, [r3, #44]
 1579 005c 9C42     		cmp	r4, r3
1519:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1580              		.loc 1 1519 0
 1581 005e 164B     		ldr	r3, .L146+28
1510:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1582              		.loc 1 1510 0
 1583 0060 34BF     		ite	cc
 1584 0062 0024     		movcc	r4, #0
 1585 0064 0124     		movcs	r4, #1
 1586              	.LVL153:
1519:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1587              		.loc 1 1519 0
 1588 0066 9847     		blx	r3
 1589              	.LVL154:
1520:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 1590              		.loc 1 1520 0
 1591 0068 1449     		ldr	r1, .L146+32
 1592 006a 1420     		movs	r0, #20
 1593 006c EA6A     		ldr	r2, [r5, #44]
 1594 006e 0B68     		ldr	r3, [r1]
 1595 0070 9640     		lsls	r6, r6, r2
 1596 0072 1E43     		orrs	r6, r6, r3
 1597 0074 124B     		ldr	r3, .L146+36
 1598 0076 0E60     		str	r6, [r1]
 1599 0078 4946     		mov	r1, r9
 1600 007a 00FB0230 		mla	r0, r0, r2, r3
 1601 007e B847     		blx	r7
 1602              	.LVL155:
 1603 0080 04E0     		b	.L142
 1604              	.LVL156:
 1605              	.L143:
1527:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 1606              		.loc 1 1527 0
 1607 0082 1048     		ldr	r0, .L146+40
 1608 0084 05F11801 		add	r1, r5, #24
 1609 0088 B847     		blx	r7
 1610              	.LVL157:
 1611              	.L145:
1475:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1612              		.loc 1 1475 0
 1613 008a 0024     		movs	r4, #0
 1614              	.LVL158:
 1615              	.L142:
1535:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1616              		.loc 1 1535 0
 1617 008c B8F1000F 		cmp	r8, #0
 1618 0090 00D1     		bne	.L144
1535:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1619              		.loc 1 1535 0 is_stmt 0 discriminator 1
 1620              	@ 1535 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1621 0092 62B6     		CPSIE i   
 1622              	
 1623              	@ 0 "" 2
 1624              		.thumb
 1625              	.L144:
1538:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1626              		.loc 1 1538 0 is_stmt 1
 1627 0094 2046     		mov	r0, r4
 1628 0096 03B0     		add	sp, sp, #12
 1629              	.LCFI12:
 1630              		.cfi_def_cfa_offset 28
 1631              		@ sp needed
 1632 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1633              	.LVL159:
 1634              	.L147:
 1635              		.align	2
 1636              	.L146:
 1637 009c 00000000 		.word	.LC0
 1638 00a0 00000000 		.word	.LANCHOR24
 1639 00a4 00000000 		.word	printf
 1640 00a8 00000000 		.word	prvTaskIsTaskSuspended
 1641 00ac 00000000 		.word	.LANCHOR19
 1642 00b0 00000000 		.word	vListInsertEnd
 1643 00b4 00000000 		.word	.LANCHOR5
 1644 00b8 00000000 		.word	uxListRemove
 1645 00bc 00000000 		.word	.LANCHOR17
 1646 00c0 00000000 		.word	.LANCHOR11
 1647 00c4 00000000 		.word	.LANCHOR4
 1648              		.cfi_endproc
 1649              	.LFE12:
 1651              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1652              		.align	1
 1653              		.global	vTaskStartScheduler
 1654              		.thumb
 1655              		.thumb_func
 1657              	vTaskStartScheduler:
 1658              	.LFB13:
1544:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
 1659              		.loc 1 1544 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663 0000 30B5     		push	{r4, r5, lr}
 1664              	.LCFI13:
 1665              		.cfi_def_cfa_offset 12
 1666              		.cfi_offset 4, -12
 1667              		.cfi_offset 5, -8
 1668              		.cfi_offset 14, -4
1557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 1669              		.loc 1 1557 0
 1670 0002 0024     		movs	r4, #0
1544:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
 1671              		.loc 1 1544 0
 1672 0004 85B0     		sub	sp, sp, #20
 1673              	.LCFI14:
 1674              		.cfi_def_cfa_offset 32
1557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 1675              		.loc 1 1557 0
 1676 0006 1748     		ldr	r0, .L152
 1677 0008 8022     		movs	r2, #128
 1678 000a 0094     		str	r4, [sp]
 1679 000c 2346     		mov	r3, r4
 1680 000e 0194     		str	r4, [sp, #4]
 1681 0010 0294     		str	r4, [sp, #8]
 1682 0012 0394     		str	r4, [sp, #12]
 1683 0014 1449     		ldr	r1, .L152+4
 1684 0016 154D     		ldr	r5, .L152+8
 1685 0018 A847     		blx	r5
 1686              	.LVL160:
1563:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 1687              		.loc 1 1563 0
 1688 001a 0128     		cmp	r0, #1
 1689 001c 13D1     		bne	.L149
1565:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 1690              		.loc 1 1565 0
 1691 001e 144B     		ldr	r3, .L152+12
 1692 0020 9847     		blx	r3
 1693              	.LVL161:
1574:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 1694              		.loc 1 1574 0
 1695 0022 0128     		cmp	r0, #1
 1696 0024 0FD1     		bne	.L149
1581:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1697              		.loc 1 1581 0
 1698              	@ 1581 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1699 0026 72B6     		CPSID i   
 1700 0028 BFF34F8F 	DSB       
 1701 002c BFF36F8F 	ISB         
 1702              	@ 0 "" 2
1591:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1703              		.loc 1 1591 0
 1704              		.thumb
 1705 0030 4FF0FF32 		mov	r2, #-1
 1706 0034 0F4B     		ldr	r3, .L152+16
 1707 0036 1A60     		str	r2, [r3]
1592:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1708              		.loc 1 1592 0
 1709 0038 0F4B     		ldr	r3, .L152+20
 1710 003a 1860     		str	r0, [r3]
1593:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1711              		.loc 1 1593 0
 1712 003c 0F4B     		ldr	r3, .L152+24
 1713 003e 1C60     		str	r4, [r3]
1602:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 1714              		.loc 1 1602 0
 1715 0040 0F4B     		ldr	r3, .L152+28
 1716 0042 9847     		blx	r3
 1717              	.LVL162:
 1718 0044 0CE0     		b	.L148
 1719              	.LVL163:
 1720              	.L149:
1617:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 1721              		.loc 1 1617 0
 1722 0046 58B9     		cbnz	r0, .L148
1617:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 1723              		.loc 1 1617 0 is_stmt 0 discriminator 1
 1724              	@ 1617 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1725 0048 72B6     		CPSID i   
 1726 004a BFF34F8F 	DSB       
 1727 004e BFF36F8F 	ISB         
 1728              	@ 0 "" 2
 1729              		.thumb
 1730 0052 0C48     		ldr	r0, .L152+32
 1731              	.LVL164:
 1732 0054 40F25162 		movw	r2, #1617
 1733 0058 0B49     		ldr	r1, .L152+36
 1734 005a 0C4B     		ldr	r3, .L152+40
 1735 005c 9847     		blx	r3
 1736              	.LVL165:
 1737              	.L151:
1617:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 1738              		.loc 1 1617 0 discriminator 2
 1739 005e FEE7     		b	.L151
 1740              	.L148:
1619:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 1741              		.loc 1 1619 0 is_stmt 1
 1742 0060 05B0     		add	sp, sp, #20
 1743              	.LCFI15:
 1744              		.cfi_def_cfa_offset 12
 1745              		@ sp needed
 1746 0062 30BD     		pop	{r4, r5, pc}
 1747              	.L153:
 1748              		.align	2
 1749              	.L152:
 1750 0064 00000000 		.word	prvIdleTask
 1751 0068 20000000 		.word	.LC1
 1752 006c 00000000 		.word	xTaskGenericCreate
 1753 0070 00000000 		.word	xTimerCreateTimerTask
 1754 0074 00000000 		.word	.LANCHOR1
 1755 0078 00000000 		.word	.LANCHOR15
 1756 007c 00000000 		.word	.LANCHOR6
 1757 0080 00000000 		.word	xPortStartScheduler
 1758 0084 00000000 		.word	.LC0
 1759 0088 00000000 		.word	.LANCHOR25
 1760 008c 00000000 		.word	printf
 1761              		.cfi_endproc
 1762              	.LFE13:
 1764              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1765              		.align	1
 1766              		.global	vTaskEndScheduler
 1767              		.thumb
 1768              		.thumb_func
 1770              	vTaskEndScheduler:
 1771              	.LFB14:
1623:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1772              		.loc 1 1623 0
 1773              		.cfi_startproc
 1774              		@ args = 0, pretend = 0, frame = 0
 1775              		@ frame_needed = 0, uses_anonymous_args = 0
 1776 0000 08B5     		push	{r3, lr}
 1777              	.LCFI16:
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 3, -8
 1780              		.cfi_offset 14, -4
1627:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1781              		.loc 1 1627 0
 1782              	@ 1627 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1783 0002 72B6     		CPSID i   
 1784 0004 BFF34F8F 	DSB       
 1785 0008 BFF36F8F 	ISB         
 1786              	@ 0 "" 2
1628:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	vPortEndScheduler();
 1787              		.loc 1 1628 0
 1788              		.thumb
 1789 000c 0022     		movs	r2, #0
 1790 000e 024B     		ldr	r3, .L155
 1791 0010 1A60     		str	r2, [r3]
1629:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 1792              		.loc 1 1629 0
 1793 0012 024B     		ldr	r3, .L155+4
 1794 0014 9847     		blx	r3
 1795              	.LVL166:
 1796 0016 08BD     		pop	{r3, pc}
 1797              	.L156:
 1798              		.align	2
 1799              	.L155:
 1800 0018 00000000 		.word	.LANCHOR15
 1801 001c 00000000 		.word	vPortEndScheduler
 1802              		.cfi_endproc
 1803              	.LFE14:
 1805              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1806              		.align	1
 1807              		.global	vTaskSuspendAll
 1808              		.thumb
 1809              		.thumb_func
 1811              	vTaskSuspendAll:
 1812              	.LFB15:
1634:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1813              		.loc 1 1634 0
 1814              		.cfi_startproc
 1815              		@ args = 0, pretend = 0, frame = 0
 1816              		@ frame_needed = 0, uses_anonymous_args = 0
 1817              		@ link register save eliminated.
1639:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 1818              		.loc 1 1639 0
 1819 0000 024A     		ldr	r2, .L158
 1820 0002 1368     		ldr	r3, [r2]
 1821 0004 0133     		adds	r3, r3, #1
 1822 0006 1360     		str	r3, [r2]
 1823 0008 7047     		bx	lr
 1824              	.L159:
 1825 000a 00BF     		.align	2
 1826              	.L158:
 1827 000c 00000000 		.word	.LANCHOR19
 1828              		.cfi_endproc
 1829              	.LFE15:
 1831              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1832              		.align	1
 1833              		.global	xTaskGetTickCount
 1834              		.thumb
 1835              		.thumb_func
 1837              	xTaskGetTickCount:
 1838              	.LFB17:
1765:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTicks;
 1839              		.loc 1 1765 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
1771:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 1844              		.loc 1 1771 0
 1845 0000 014B     		ldr	r3, .L161
 1846 0002 1868     		ldr	r0, [r3]
 1847              	.LVL167:
1776:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 1848              		.loc 1 1776 0
 1849 0004 7047     		bx	lr
 1850              	.L162:
 1851 0006 00BF     		.align	2
 1852              	.L161:
 1853 0008 00000000 		.word	.LANCHOR6
 1854              		.cfi_endproc
 1855              	.LFE17:
 1857              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1858              		.align	1
 1859              		.global	xTaskGetTickCountFromISR
 1860              		.thumb
 1861              		.thumb_func
 1863              	xTaskGetTickCountFromISR:
 1864              	.LFB18:
1780:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xReturn;
 1865              		.loc 1 1780 0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 0
 1868              		@ frame_needed = 0, uses_anonymous_args = 0
 1869              		@ link register save eliminated.
 1870              	.LVL168:
1802:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 1871              		.loc 1 1802 0
 1872 0000 014B     		ldr	r3, .L164
 1873 0002 1868     		ldr	r0, [r3]
 1874              	.LVL169:
1807:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 1875              		.loc 1 1807 0
 1876 0004 7047     		bx	lr
 1877              	.L165:
 1878 0006 00BF     		.align	2
 1879              	.L164:
 1880 0008 00000000 		.word	.LANCHOR6
 1881              		.cfi_endproc
 1882              	.LFE18:
 1884              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1885              		.align	1
 1886              		.global	uxTaskGetNumberOfTasks
 1887              		.thumb
 1888              		.thumb_func
 1890              	uxTaskGetNumberOfTasks:
 1891              	.LFB19:
1811:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1892              		.loc 1 1811 0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 0
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 1896              		@ link register save eliminated.
1814:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 1897              		.loc 1 1814 0
 1898 0000 014B     		ldr	r3, .L167
 1899 0002 1868     		ldr	r0, [r3]
1815:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 1900              		.loc 1 1815 0
 1901 0004 7047     		bx	lr
 1902              	.L168:
 1903 0006 00BF     		.align	2
 1904              	.L167:
 1905 0008 00000000 		.word	.LANCHOR10
 1906              		.cfi_endproc
 1907              	.LFE19:
 1909              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1910              		.align	1
 1911              		.global	xTaskIncrementTick
 1912              		.thumb
 1913              		.thumb_func
 1915              	xTaskIncrementTick:
 1916              	.LFB21:
1940:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t * pxTCB;
 1917              		.loc 1 1940 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 0
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921              	.LVL170:
 1922 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1923              	.LCFI17:
 1924              		.cfi_def_cfa_offset 40
 1925              		.cfi_offset 3, -40
 1926              		.cfi_offset 4, -36
 1927              		.cfi_offset 5, -32
 1928              		.cfi_offset 6, -28
 1929              		.cfi_offset 7, -24
 1930              		.cfi_offset 8, -20
 1931              		.cfi_offset 9, -16
 1932              		.cfi_offset 10, -12
 1933              		.cfi_offset 11, -8
 1934              		.cfi_offset 14, -4
1949:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 1935              		.loc 1 1949 0
 1936 0004 3D4B     		ldr	r3, .L196
 1937 0006 1B68     		ldr	r3, [r3]
 1938 0008 002B     		cmp	r3, #0
 1939 000a 47D1     		bne	.L170
1953:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1940              		.loc 1 1953 0
 1941 000c 3C4B     		ldr	r3, .L196+4
 1942 000e 1A68     		ldr	r2, [r3]
 1943 0010 0132     		adds	r2, r2, #1
 1944 0012 1A60     		str	r2, [r3]
 1945              	.LBB72:
1958:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 1946              		.loc 1 1958 0
 1947 0014 1F68     		ldr	r7, [r3]
 1948              	.LVL171:
1960:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 1949              		.loc 1 1960 0
 1950 0016 D7B9     		cbnz	r7, .L171
 1951              	.LBB73:
1962:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 1952              		.loc 1 1962 0
 1953 0018 3A4B     		ldr	r3, .L196+8
 1954 001a 1A68     		ldr	r2, [r3]
 1955 001c 1268     		ldr	r2, [r2]
 1956 001e 5AB1     		cbz	r2, .L172
1962:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 1957              		.loc 1 1962 0 is_stmt 0 discriminator 1
 1958              	@ 1962 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 1959 0020 72B6     		CPSID i   
 1960 0022 BFF34F8F 	DSB       
 1961 0026 BFF36F8F 	ISB         
 1962              	@ 0 "" 2
 1963              		.thumb
 1964 002a 3748     		ldr	r0, .L196+12
 1965 002c 40F2AA72 		movw	r2, #1962
 1966 0030 3649     		ldr	r1, .L196+16
 1967 0032 374B     		ldr	r3, .L196+20
 1968 0034 9847     		blx	r3
 1969              	.LVL172:
 1970              	.L173:
 1971 0036 FEE7     		b	.L173
 1972              	.L172:
1962:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 1973              		.loc 1 1962 0 discriminator 2
 1974 0038 364A     		ldr	r2, .L196+24
 1975 003a 1968     		ldr	r1, [r3]
 1976              	.LVL173:
 1977 003c 1068     		ldr	r0, [r2]
 1978 003e 1860     		str	r0, [r3]
 1979 0040 1160     		str	r1, [r2]
 1980 0042 354A     		ldr	r2, .L196+28
 1981 0044 1368     		ldr	r3, [r2]
 1982 0046 0133     		adds	r3, r3, #1
 1983 0048 1360     		str	r3, [r2]
 1984 004a 344B     		ldr	r3, .L196+32
 1985 004c 9847     		blx	r3
 1986              	.LVL174:
 1987              	.L171:
 1988              	.LBE73:
1973:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 1989              		.loc 1 1973 0 is_stmt 1
 1990 004e 344E     		ldr	r6, .L196+36
 1991 0050 0024     		movs	r4, #0
 1992 0052 DFF8E480 		ldr	r8, .L196+60
 1993 0056 DFF8E490 		ldr	r9, .L196+64
 1994 005a 3368     		ldr	r3, [r6]
 1995 005c 9F42     		cmp	r7, r3
 1996 005e 0DD3     		bcc	.L175
 1997              	.LVL175:
 1998              	.L174:
1977:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 1999              		.loc 1 1977 0
 2000 0060 284B     		ldr	r3, .L196+8
 2001 0062 1A68     		ldr	r2, [r3]
 2002 0064 1268     		ldr	r2, [r2]
 2003 0066 12B9     		cbnz	r2, .L192
1984:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						break;
 2004              		.loc 1 1984 0
 2005 0068 4FF0FF33 		mov	r3, #-1
 2006 006c 05E0     		b	.L195
 2007              	.L192:
1993:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2008              		.loc 1 1993 0
 2009 006e 1B68     		ldr	r3, [r3]
 2010 0070 DB68     		ldr	r3, [r3, #12]
 2011 0072 DD68     		ldr	r5, [r3, #12]
 2012              	.LVL176:
1994:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2013              		.loc 1 1994 0
 2014 0074 6B68     		ldr	r3, [r5, #4]
 2015              	.LVL177:
1996:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
 2016              		.loc 1 1996 0
 2017 0076 9F42     		cmp	r7, r3
 2018 0078 18D2     		bcs	.L194
 2019              	.LVL178:
 2020              	.L195:
1984:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						break;
 2021              		.loc 1 1984 0
 2022 007a 3360     		str	r3, [r6]
 2023              	.LVL179:
 2024              	.L175:
 2025              	.LBE72:
2057:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2026              		.loc 1 2057 0
 2027 007c D9F80030 		ldr	r3, [r9]
 2028 0080 DA6A     		ldr	r2, [r3, #44]
 2029 0082 1423     		movs	r3, #20
 2030 0084 5343     		muls	r3, r2, r3
 2031 0086 58F80330 		ldr	r3, [r8, r3]
2059:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 2032              		.loc 1 2059 0
 2033 008a 022B     		cmp	r3, #2
2072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2034              		.loc 1 2072 0
 2035 008c 254B     		ldr	r3, .L196+40
2059:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 2036              		.loc 1 2059 0
 2037 008e 28BF     		it	cs
 2038 0090 0124     		movcs	r4, #1
 2039              	.LVL180:
2072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2040              		.loc 1 2072 0
 2041 0092 1B68     		ldr	r3, [r3]
 2042 0094 53BB     		cbnz	r3, .L181
2074:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 2043              		.loc 1 2074 0
 2044 0096 244B     		ldr	r3, .L196+44
 2045 0098 9847     		blx	r3
 2046              	.LVL181:
 2047 009a 27E0     		b	.L181
 2048              	.LVL182:
 2049              	.L170:
2085:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2050              		.loc 1 2085 0
 2051 009c 214A     		ldr	r2, .L196+40
1943:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2052              		.loc 1 1943 0
 2053 009e 0024     		movs	r4, #0
2085:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2054              		.loc 1 2085 0
 2055 00a0 1368     		ldr	r3, [r2]
 2056 00a2 0133     		adds	r3, r3, #1
 2057 00a4 1360     		str	r3, [r2]
2091:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 2058              		.loc 1 2091 0
 2059 00a6 204B     		ldr	r3, .L196+44
 2060 00a8 9847     		blx	r3
 2061              	.LVL183:
 2062 00aa 1FE0     		b	.L181
 2063              	.LVL184:
 2064              	.L194:
 2065              	.LBB74:
2012:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2066              		.loc 1 2012 0
 2067 00ac 05F1040A 		add	r10, r5, #4
 2068 00b0 5046     		mov	r0, r10
 2069 00b2 DFF88CB0 		ldr	fp, .L196+68
 2070 00b6 D847     		blx	fp
 2071              	.LVL185:
2016:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
 2072              		.loc 1 2016 0
 2073 00b8 AB6A     		ldr	r3, [r5, #40]
 2074 00ba 13B1     		cbz	r3, .L178
2018:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
 2075              		.loc 1 2018 0
 2076 00bc 05F11800 		add	r0, r5, #24
 2077 00c0 D847     		blx	fp
 2078              	.LVL186:
 2079              	.L178:
2027:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2080              		.loc 1 2027 0
 2081 00c2 1A48     		ldr	r0, .L196+48
 2082 00c4 0123     		movs	r3, #1
 2083 00c6 E96A     		ldr	r1, [r5, #44]
 2084 00c8 0268     		ldr	r2, [r0]
 2085 00ca 8B40     		lsls	r3, r3, r1
 2086 00cc 1343     		orrs	r3, r3, r2
 2087 00ce 0360     		str	r3, [r0]
 2088 00d0 1420     		movs	r0, #20
 2089 00d2 174B     		ldr	r3, .L196+52
 2090 00d4 00FB0180 		mla	r0, r0, r1, r8
 2091 00d8 5146     		mov	r1, r10
 2092 00da 9847     		blx	r3
 2093              	.LVL187:
2037:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							{
 2094              		.loc 1 2037 0
 2095 00dc D9F80030 		ldr	r3, [r9]
 2096 00e0 EA6A     		ldr	r2, [r5, #44]
 2097 00e2 DB6A     		ldr	r3, [r3, #44]
2039:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							}
 2098              		.loc 1 2039 0
 2099 00e4 9A42     		cmp	r2, r3
 2100 00e6 28BF     		it	cs
 2101 00e8 0124     		movcs	r4, #1
 2102              	.LVL188:
 2103 00ea B9E7     		b	.L174
 2104              	.LVL189:
 2105              	.L181:
 2106              	.LBE74:
2098:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2107              		.loc 1 2098 0
 2108 00ec 114B     		ldr	r3, .L196+56
 2109 00ee 1B68     		ldr	r3, [r3]
2100:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 2110              		.loc 1 2100 0
 2111 00f0 002B     		cmp	r3, #0
 2112 00f2 18BF     		it	ne
 2113 00f4 0124     		movne	r4, #1
 2114              	.LVL190:
2110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 2115              		.loc 1 2110 0
 2116 00f6 2046     		mov	r0, r4
 2117 00f8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2118              	.L197:
 2119              		.align	2
 2120              	.L196:
 2121 00fc 00000000 		.word	.LANCHOR19
 2122 0100 00000000 		.word	.LANCHOR6
 2123 0104 00000000 		.word	.LANCHOR0
 2124 0108 00000000 		.word	.LC0
 2125 010c 00000000 		.word	.LANCHOR26
 2126 0110 00000000 		.word	printf
 2127 0114 00000000 		.word	.LANCHOR7
 2128 0118 00000000 		.word	.LANCHOR27
 2129 011c 00000000 		.word	prvResetNextTaskUnblockTime
 2130 0120 00000000 		.word	.LANCHOR1
 2131 0124 00000000 		.word	.LANCHOR28
 2132 0128 00000000 		.word	vApplicationTickHook
 2133 012c 00000000 		.word	.LANCHOR17
 2134 0130 00000000 		.word	vListInsertEnd
 2135 0134 00000000 		.word	.LANCHOR29
 2136 0138 00000000 		.word	.LANCHOR11
 2137 013c 00000000 		.word	.LANCHOR5
 2138 0140 00000000 		.word	uxListRemove
 2139              		.cfi_endproc
 2140              	.LFE21:
 2142              		.section	.text.xTaskResumeAll,"ax",%progbits
 2143              		.align	1
 2144              		.global	xTaskResumeAll
 2145              		.thumb
 2146              		.thumb_func
 2148              	xTaskResumeAll:
 2149              	.LFB16:
1672:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxTCB;
 2150              		.loc 1 1672 0
 2151              		.cfi_startproc
 2152              		@ args = 0, pretend = 0, frame = 0
 2153              		@ frame_needed = 0, uses_anonymous_args = 0
 2154              	.LVL191:
 2155 0000 70B5     		push	{r4, r5, r6, lr}
 2156              	.LCFI18:
 2157              		.cfi_def_cfa_offset 16
 2158              		.cfi_offset 4, -16
 2159              		.cfi_offset 5, -12
 2160              		.cfi_offset 6, -8
 2161              		.cfi_offset 14, -4
1678:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2162              		.loc 1 1678 0
 2163 0002 2E4C     		ldr	r4, .L218
 2164 0004 2368     		ldr	r3, [r4]
 2165 0006 5BB9     		cbnz	r3, .L199
1678:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2166              		.loc 1 1678 0 is_stmt 0 discriminator 1
 2167              	@ 1678 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2168 0008 72B6     		CPSID i   
 2169 000a BFF34F8F 	DSB       
 2170 000e BFF36F8F 	ISB         
 2171              	@ 0 "" 2
 2172              		.thumb
 2173 0012 2B48     		ldr	r0, .L218+4
 2174 0014 40F28E62 		movw	r2, #1678
 2175 0018 2A49     		ldr	r1, .L218+8
 2176 001a 2B4B     		ldr	r3, .L218+12
 2177 001c 9847     		blx	r3
 2178              	.LVL192:
 2179              	.L200:
 2180 001e FEE7     		b	.L200
 2181              	.L199:
1685:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 2182              		.loc 1 1685 0 is_stmt 1
 2183 0020 2A4B     		ldr	r3, .L218+16
 2184 0022 9847     		blx	r3
 2185              	.LVL193:
1687:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2186              		.loc 1 1687 0
 2187 0024 2368     		ldr	r3, [r4]
 2188 0026 013B     		subs	r3, r3, #1
 2189 0028 2360     		str	r3, [r4]
1689:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2190              		.loc 1 1689 0
 2191 002a 2368     		ldr	r3, [r4]
 2192 002c 0BB1     		cbz	r3, .L201
 2193              	.L204:
1674:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2194              		.loc 1 1674 0
 2195 002e 0024     		movs	r4, #0
 2196 0030 3FE0     		b	.L202
 2197              	.L201:
1691:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2198              		.loc 1 1691 0
 2199 0032 274B     		ldr	r3, .L218+20
 2200 0034 1B68     		ldr	r3, [r3]
 2201 0036 002B     		cmp	r3, #0
 2202 0038 F9D0     		beq	.L204
 2203              	.L205:
1695:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2204              		.loc 1 1695 0
 2205 003a 264B     		ldr	r3, .L218+24
 2206 003c 1A68     		ldr	r2, [r3]
 2207 003e 02B3     		cbz	r2, .L217
1697:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2208              		.loc 1 1697 0
 2209 0040 DB68     		ldr	r3, [r3, #12]
1698:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2210              		.loc 1 1698 0
 2211 0042 254D     		ldr	r5, .L218+28
1697:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2212              		.loc 1 1697 0
 2213 0044 DC68     		ldr	r4, [r3, #12]
 2214              	.LVL194:
1699:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2215              		.loc 1 1699 0
 2216 0046 261D     		adds	r6, r4, #4
1698:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2217              		.loc 1 1698 0
 2218 0048 04F11800 		add	r0, r4, #24
 2219 004c A847     		blx	r5
 2220              	.LVL195:
1699:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2221              		.loc 1 1699 0
 2222 004e 3046     		mov	r0, r6
 2223 0050 A847     		blx	r5
 2224              	.LVL196:
1700:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2225              		.loc 1 1700 0
 2226 0052 2249     		ldr	r1, .L218+32
 2227 0054 E26A     		ldr	r2, [r4, #44]
 2228 0056 0125     		movs	r5, #1
 2229 0058 0B68     		ldr	r3, [r1]
 2230 005a 05FA02F0 		lsl	r0, r5, r2
 2231 005e 0343     		orrs	r3, r3, r0
 2232 0060 1420     		movs	r0, #20
 2233 0062 0B60     		str	r3, [r1]
 2234 0064 3146     		mov	r1, r6
 2235 0066 1E4B     		ldr	r3, .L218+36
 2236 0068 00FB0230 		mla	r0, r0, r2, r3
 2237 006c 1D4B     		ldr	r3, .L218+40
 2238 006e 9847     		blx	r3
 2239              	.LVL197:
1704:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 2240              		.loc 1 1704 0
 2241 0070 1D4B     		ldr	r3, .L218+44
 2242 0072 E26A     		ldr	r2, [r4, #44]
 2243 0074 1B68     		ldr	r3, [r3]
 2244 0076 DB6A     		ldr	r3, [r3, #44]
 2245 0078 9A42     		cmp	r2, r3
1706:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 2246              		.loc 1 1706 0
 2247 007a 24BF     		itt	cs
 2248 007c 1B4B     		ldrcs	r3, .L218+48
 2249 007e 1D60     		strcs	r5, [r3]
 2250 0080 DBE7     		b	.L205
 2251              	.LVL198:
 2252              	.L217:
1718:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2253              		.loc 1 1718 0
 2254 0082 1B4C     		ldr	r4, .L218+52
 2255 0084 2368     		ldr	r3, [r4]
 2256 0086 83B9     		cbnz	r3, .L215
 2257              	.L211:
1738:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2258              		.loc 1 1738 0
 2259 0088 184B     		ldr	r3, .L218+48
 2260 008a 1C68     		ldr	r4, [r3]
 2261 008c 012C     		cmp	r4, #1
 2262 008e CED1     		bne	.L204
 2263              	.LVL199:
1745:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2264              		.loc 1 1745 0
 2265              	@ 1745 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2266 0090 00DF     		SWI 0     
 2267 0092 BFF36F8F 	ISB         
 2268              	@ 0 "" 2
 2269              		.thumb
 2270 0096 0CE0     		b	.L202
 2271              	.LVL200:
 2272              	.L210:
1722:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
 2273              		.loc 1 1722 0
 2274 0098 164B     		ldr	r3, .L218+56
 2275 009a 9847     		blx	r3
 2276              	.LVL201:
 2277 009c 10B1     		cbz	r0, .L209
1724:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
 2278              		.loc 1 1724 0
 2279 009e 0122     		movs	r2, #1
 2280 00a0 124B     		ldr	r3, .L218+48
 2281 00a2 1A60     		str	r2, [r3]
 2282              	.L209:
1730:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 2283              		.loc 1 1730 0
 2284 00a4 2368     		ldr	r3, [r4]
 2285 00a6 013B     		subs	r3, r3, #1
 2286 00a8 2360     		str	r3, [r4]
 2287              	.L215:
1720:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 2288              		.loc 1 1720 0
 2289 00aa 2368     		ldr	r3, [r4]
 2290 00ac 002B     		cmp	r3, #0
 2291 00ae F3D1     		bne	.L210
 2292 00b0 EAE7     		b	.L211
 2293              	.LVL202:
 2294              	.L202:
1758:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2295              		.loc 1 1758 0
 2296 00b2 114B     		ldr	r3, .L218+60
 2297 00b4 9847     		blx	r3
 2298              	.LVL203:
1761:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 2299              		.loc 1 1761 0
 2300 00b6 2046     		mov	r0, r4
 2301 00b8 70BD     		pop	{r4, r5, r6, pc}
 2302              	.LVL204:
 2303              	.L219:
 2304 00ba 00BF     		.align	2
 2305              	.L218:
 2306 00bc 00000000 		.word	.LANCHOR19
 2307 00c0 00000000 		.word	.LC0
 2308 00c4 00000000 		.word	.LANCHOR30
 2309 00c8 00000000 		.word	printf
 2310 00cc 00000000 		.word	vPortEnterCritical
 2311 00d0 00000000 		.word	.LANCHOR10
 2312 00d4 00000000 		.word	.LANCHOR4
 2313 00d8 00000000 		.word	uxListRemove
 2314 00dc 00000000 		.word	.LANCHOR17
 2315 00e0 00000000 		.word	.LANCHOR11
 2316 00e4 00000000 		.word	vListInsertEnd
 2317 00e8 00000000 		.word	.LANCHOR5
 2318 00ec 00000000 		.word	.LANCHOR29
 2319 00f0 00000000 		.word	.LANCHOR28
 2320 00f4 00000000 		.word	xTaskIncrementTick
 2321 00f8 00000000 		.word	vPortExitCritical
 2322              		.cfi_endproc
 2323              	.LFE16:
 2325              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2326              		.align	1
 2327              		.global	vTaskDelayUntil
 2328              		.thumb
 2329              		.thumb_func
 2331              	vTaskDelayUntil:
 2332              	.LFB3:
 827:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 2333              		.loc 1 827 0
 2334              		.cfi_startproc
 2335              		@ args = 0, pretend = 0, frame = 0
 2336              		@ frame_needed = 0, uses_anonymous_args = 0
 2337              	.LVL205:
 2338 0000 70B5     		push	{r4, r5, r6, lr}
 2339              	.LCFI19:
 2340              		.cfi_def_cfa_offset 16
 2341              		.cfi_offset 4, -16
 2342              		.cfi_offset 5, -12
 2343              		.cfi_offset 6, -8
 2344              		.cfi_offset 14, -4
 827:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 2345              		.loc 1 827 0
 2346 0002 0C46     		mov	r4, r1
 831:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2347              		.loc 1 831 0
 2348 0004 0646     		mov	r6, r0
 2349 0006 58B9     		cbnz	r0, .L221
 831:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2350              		.loc 1 831 0 is_stmt 0 discriminator 1
 2351              	@ 831 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2352 0008 72B6     		CPSID i   
 2353 000a BFF34F8F 	DSB       
 2354 000e BFF36F8F 	ISB         
 2355              	@ 0 "" 2
 2356              		.thumb
 2357 0012 2948     		ldr	r0, .L238
 2358              	.LVL206:
 2359 0014 40F23F32 		movw	r2, #831
 2360 0018 2849     		ldr	r1, .L238+4
 2361              	.LVL207:
 2362 001a 294B     		ldr	r3, .L238+8
 2363 001c 9847     		blx	r3
 2364              	.LVL208:
 2365              	.L222:
 2366 001e FEE7     		b	.L222
 2367              	.LVL209:
 2368              	.L221:
 832:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2369              		.loc 1 832 0 is_stmt 1
 2370 0020 59B9     		cbnz	r1, .L223
 832:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2371              		.loc 1 832 0 is_stmt 0 discriminator 1
 2372              	@ 832 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2373 0022 72B6     		CPSID i   
 2374 0024 BFF34F8F 	DSB       
 2375 0028 BFF36F8F 	ISB         
 2376              	@ 0 "" 2
 2377              		.thumb
 2378 002c 2248     		ldr	r0, .L238
 2379              	.LVL210:
 2380 002e 4FF45072 		mov	r2, #832
 2381 0032 2249     		ldr	r1, .L238+4
 2382              	.LVL211:
 2383 0034 224B     		ldr	r3, .L238+8
 2384 0036 9847     		blx	r3
 2385              	.LVL212:
 2386              	.L224:
 832:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2387              		.loc 1 832 0 discriminator 2
 2388 0038 FEE7     		b	.L224
 2389              	.LVL213:
 2390              	.L223:
 833:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2391              		.loc 1 833 0 is_stmt 1
 2392 003a 224B     		ldr	r3, .L238+12
 2393 003c 1D68     		ldr	r5, [r3]
 2394 003e 5DB1     		cbz	r5, .L225
 833:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2395              		.loc 1 833 0 is_stmt 0 discriminator 1
 2396              	@ 833 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2397 0040 72B6     		CPSID i   
 2398 0042 BFF34F8F 	DSB       
 2399 0046 BFF36F8F 	ISB         
 2400              	@ 0 "" 2
 2401              		.thumb
 2402 004a 1B48     		ldr	r0, .L238
 2403              	.LVL214:
 2404 004c 40F24132 		movw	r2, #833
 2405 0050 1A49     		ldr	r1, .L238+4
 2406              	.LVL215:
 2407 0052 1B4B     		ldr	r3, .L238+8
 2408 0054 9847     		blx	r3
 2409              	.LVL216:
 2410              	.L226:
 833:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2411              		.loc 1 833 0 discriminator 3
 2412 0056 FEE7     		b	.L226
 2413              	.LVL217:
 2414              	.L225:
 835:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2415              		.loc 1 835 0 is_stmt 1
 2416 0058 1B4B     		ldr	r3, .L238+16
 2417 005a 9847     		blx	r3
 2418              	.LVL218:
 2419              	.LBB75:
 839:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2420              		.loc 1 839 0
 2421 005c 1B4B     		ldr	r3, .L238+20
 842:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2422              		.loc 1 842 0
 2423 005e 3268     		ldr	r2, [r6]
 839:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2424              		.loc 1 839 0
 2425 0060 1B68     		ldr	r3, [r3]
 2426              	.LVL219:
 842:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2427              		.loc 1 842 0
 2428 0062 1444     		add	r4, r4, r2
 2429              	.LVL220:
 844:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2430              		.loc 1 844 0
 2431 0064 9342     		cmp	r3, r2
 2432 0066 02D2     		bcs	.L227
 851:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2433              		.loc 1 851 0
 2434 0068 9442     		cmp	r4, r2
 2435 006a 07D2     		bcs	.L232
 2436 006c 01E0     		b	.L237
 2437              	.L227:
 865:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2438              		.loc 1 865 0
 2439 006e 9442     		cmp	r4, r2
 2440 0070 06D3     		bcc	.L233
 2441              	.L237:
 865:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2442              		.loc 1 865 0 is_stmt 0 discriminator 1
 2443 0072 9C42     		cmp	r4, r3
 2444 0074 94BF     		ite	ls
 2445 0076 0023     		movls	r3, #0
 2446              	.LVL221:
 2447 0078 0123     		movhi	r3, #1
 2448 007a 02E0     		b	.L228
 2449              	.LVL222:
 2450              	.L232:
 2451              	.LBE75:
 829:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2452              		.loc 1 829 0 is_stmt 1
 2453 007c 2B46     		mov	r3, r5
 2454              	.LVL223:
 2455 007e 00E0     		b	.L228
 2456              	.LVL224:
 2457              	.L233:
 2458              	.LBB76:
 867:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2459              		.loc 1 867 0
 2460 0080 0123     		movs	r3, #1
 2461              	.LVL225:
 2462              	.L228:
 876:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2463              		.loc 1 876 0
 2464 0082 3460     		str	r4, [r6]
 878:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2465              		.loc 1 878 0
 2466 0084 8BB1     		cbz	r3, .L229
 884:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2467              		.loc 1 884 0
 2468 0086 124D     		ldr	r5, .L238+24
 2469 0088 124B     		ldr	r3, .L238+28
 2470 008a 2868     		ldr	r0, [r5]
 2471 008c 0430     		adds	r0, r0, #4
 2472 008e 9847     		blx	r3
 2473              	.LVL226:
 2474 0090 40B9     		cbnz	r0, .L230
 889:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2475              		.loc 1 889 0
 2476 0092 2B68     		ldr	r3, [r5]
 2477 0094 1049     		ldr	r1, .L238+32
 2478 0096 D86A     		ldr	r0, [r3, #44]
 2479 0098 0123     		movs	r3, #1
 2480 009a 0A68     		ldr	r2, [r1]
 2481 009c 8340     		lsls	r3, r3, r0
 2482 009e 22EA0303 		bic	r3, r2, r3
 2483 00a2 0B60     		str	r3, [r1]
 2484              	.L230:
 896:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 2485              		.loc 1 896 0
 2486 00a4 2046     		mov	r0, r4
 2487 00a6 0D4B     		ldr	r3, .L238+36
 2488 00a8 9847     		blx	r3
 2489              	.LVL227:
 2490              	.L229:
 2491              	.LBE76:
 903:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2492              		.loc 1 903 0
 2493 00aa 0D4B     		ldr	r3, .L238+40
 2494 00ac 9847     		blx	r3
 2495              	.LVL228:
 907:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2496              		.loc 1 907 0
 2497 00ae 10B9     		cbnz	r0, .L220
 909:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 2498              		.loc 1 909 0
 2499              	@ 909 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2500 00b0 00DF     		SWI 0     
 2501 00b2 BFF36F8F 	ISB         
 2502              	@ 0 "" 2
 2503              		.thumb
 2504              	.L220:
 2505 00b6 70BD     		pop	{r4, r5, r6, pc}
 2506              	.LVL229:
 2507              	.L239:
 2508              		.align	2
 2509              	.L238:
 2510 00b8 00000000 		.word	.LC0
 2511 00bc 00000000 		.word	.LANCHOR31
 2512 00c0 00000000 		.word	printf
 2513 00c4 00000000 		.word	.LANCHOR19
 2514 00c8 00000000 		.word	vTaskSuspendAll
 2515 00cc 00000000 		.word	.LANCHOR6
 2516 00d0 00000000 		.word	.LANCHOR5
 2517 00d4 00000000 		.word	uxListRemove
 2518 00d8 00000000 		.word	.LANCHOR17
 2519 00dc 00000000 		.word	prvAddCurrentTaskToDelayedList
 2520 00e0 00000000 		.word	xTaskResumeAll
 2521              		.cfi_endproc
 2522              	.LFE3:
 2524              		.section	.text.vTaskDelay,"ax",%progbits
 2525              		.align	1
 2526              		.global	vTaskDelay
 2527              		.thumb
 2528              		.thumb_func
 2530              	vTaskDelay:
 2531              	.LFB4:
 923:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 2532              		.loc 1 923 0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 0
 2535              		@ frame_needed = 0, uses_anonymous_args = 0
 2536              	.LVL230:
 2537 0000 38B5     		push	{r3, r4, r5, lr}
 2538              	.LCFI20:
 2539              		.cfi_def_cfa_offset 16
 2540              		.cfi_offset 3, -16
 2541              		.cfi_offset 4, -12
 2542              		.cfi_offset 5, -8
 2543              		.cfi_offset 14, -4
 929:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2544              		.loc 1 929 0
 2545 0002 0446     		mov	r4, r0
 2546 0004 18B9     		cbnz	r0, .L241
 2547              	.LVL231:
 2548              	.L246:
 975:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 2549              		.loc 1 975 0
 2550              	@ 975 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2551 0006 00DF     		SWI 0     
 2552 0008 BFF36F8F 	ISB         
 2553              	@ 0 "" 2
 2554              		.thumb
 2555 000c 38BD     		pop	{r3, r4, r5, pc}
 2556              	.LVL232:
 2557              	.L241:
 931:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vTaskSuspendAll();
 2558              		.loc 1 931 0
 2559 000e 154B     		ldr	r3, .L250
 2560 0010 1B68     		ldr	r3, [r3]
 2561 0012 5BB1     		cbz	r3, .L243
 931:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vTaskSuspendAll();
 2562              		.loc 1 931 0 is_stmt 0 discriminator 1
 2563              	@ 931 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2564 0014 72B6     		CPSID i   
 2565 0016 BFF34F8F 	DSB       
 2566 001a BFF36F8F 	ISB         
 2567              	@ 0 "" 2
 2568              		.thumb
 2569 001e 1248     		ldr	r0, .L250+4
 2570              	.LVL233:
 2571 0020 40F2A332 		movw	r2, #931
 2572 0024 1149     		ldr	r1, .L250+8
 2573 0026 124B     		ldr	r3, .L250+12
 2574 0028 9847     		blx	r3
 2575              	.LVL234:
 2576              	.L244:
 2577 002a FEE7     		b	.L244
 2578              	.LVL235:
 2579              	.L243:
 932:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2580              		.loc 1 932 0 is_stmt 1
 2581 002c 114B     		ldr	r3, .L250+16
 2582 002e 9847     		blx	r3
 2583              	.LVL236:
 951:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2584              		.loc 1 951 0
 2585 0030 114D     		ldr	r5, .L250+20
 946:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2586              		.loc 1 946 0
 2587 0032 124B     		ldr	r3, .L250+24
 2588 0034 1B68     		ldr	r3, [r3]
 951:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2589              		.loc 1 951 0
 2590 0036 2868     		ldr	r0, [r5]
 946:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2591              		.loc 1 946 0
 2592 0038 1C44     		add	r4, r4, r3
 2593              	.LVL237:
 951:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2594              		.loc 1 951 0
 2595 003a 0430     		adds	r0, r0, #4
 2596 003c 104B     		ldr	r3, .L250+28
 2597 003e 9847     		blx	r3
 2598              	.LVL238:
 2599 0040 40B9     		cbnz	r0, .L245
 956:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2600              		.loc 1 956 0
 2601 0042 2B68     		ldr	r3, [r5]
 2602 0044 0F49     		ldr	r1, .L250+32
 2603 0046 D86A     		ldr	r0, [r3, #44]
 2604 0048 0123     		movs	r3, #1
 2605 004a 0A68     		ldr	r2, [r1]
 2606 004c 8340     		lsls	r3, r3, r0
 2607 004e 22EA0303 		bic	r3, r2, r3
 2608 0052 0B60     		str	r3, [r1]
 2609              	.L245:
 962:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 2610              		.loc 1 962 0
 2611 0054 0C4B     		ldr	r3, .L250+36
 2612 0056 2046     		mov	r0, r4
 2613 0058 9847     		blx	r3
 2614              	.LVL239:
 964:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 2615              		.loc 1 964 0
 2616 005a 0C4B     		ldr	r3, .L250+40
 2617 005c 9847     		blx	r3
 2618              	.LVL240:
 973:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2619              		.loc 1 973 0
 2620 005e 0028     		cmp	r0, #0
 2621 0060 D1D0     		beq	.L246
 2622 0062 38BD     		pop	{r3, r4, r5, pc}
 2623              	.LVL241:
 2624              	.L251:
 2625              		.align	2
 2626              	.L250:
 2627 0064 00000000 		.word	.LANCHOR19
 2628 0068 00000000 		.word	.LC0
 2629 006c 00000000 		.word	.LANCHOR32
 2630 0070 00000000 		.word	printf
 2631 0074 00000000 		.word	vTaskSuspendAll
 2632 0078 00000000 		.word	.LANCHOR5
 2633 007c 00000000 		.word	.LANCHOR6
 2634 0080 00000000 		.word	uxListRemove
 2635 0084 00000000 		.word	.LANCHOR17
 2636 0088 00000000 		.word	prvAddCurrentTaskToDelayedList
 2637 008c 00000000 		.word	xTaskResumeAll
 2638              		.cfi_endproc
 2639              	.LFE4:
 2641              		.section	.text.prvIdleTask,"ax",%progbits
 2642              		.align	1
 2643              		.thumb
 2644              		.thumb_func
 2646              	prvIdleTask:
 2647              	.LFB33:
2691:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Stop warnings. */
 2648              		.loc 1 2691 0
 2649              		.cfi_startproc
 2650              		@ Volatile: function does not return.
 2651              		@ args = 0, pretend = 0, frame = 0
 2652              		@ frame_needed = 0, uses_anonymous_args = 0
 2653              	.LVL242:
 2654 0000 08B5     		push	{r3, lr}
 2655              	.LCFI21:
 2656              		.cfi_def_cfa_offset 8
 2657              		.cfi_offset 3, -8
 2658              		.cfi_offset 14, -4
 2659              	.LVL243:
 2660              	.L254:
 2661              	.LBB84:
 2662              	.LBB85:
3038:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2663              		.loc 1 3038 0
 2664 0002 184C     		ldr	r4, .L261
 2665 0004 2368     		ldr	r3, [r4]
 2666 0006 1BB3     		cbz	r3, .L260
3042:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 2667              		.loc 1 3042 0
 2668 0008 174D     		ldr	r5, .L261+4
3040:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2669              		.loc 1 3040 0
 2670 000a 184B     		ldr	r3, .L261+8
 2671 000c 9847     		blx	r3
 2672              	.LVL244:
3044:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2673              		.loc 1 3044 0
 2674 000e 184B     		ldr	r3, .L261+12
3042:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 2675              		.loc 1 3042 0
 2676 0010 2E68     		ldr	r6, [r5]
 2677              	.LVL245:
3044:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2678              		.loc 1 3044 0
 2679 0012 9847     		blx	r3
 2680              	.LVL246:
3046:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2681              		.loc 1 3046 0
 2682 0014 002E     		cmp	r6, #0
 2683 0016 F4D0     		beq	.L254
 2684              	.LBB86:
3050:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 2685              		.loc 1 3050 0
 2686 0018 164B     		ldr	r3, .L261+16
 2687 001a 9847     		blx	r3
 2688              	.LVL247:
3052:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2689              		.loc 1 3052 0
 2690 001c EB68     		ldr	r3, [r5, #12]
 2691 001e DD68     		ldr	r5, [r3, #12]
 2692              	.LVL248:
3053:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2693              		.loc 1 3053 0
 2694 0020 154B     		ldr	r3, .L261+20
 2695 0022 281D     		adds	r0, r5, #4
 2696 0024 9847     		blx	r3
 2697              	.LVL249:
3054:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					--uxTasksDeleted;
 2698              		.loc 1 3054 0
 2699 0026 154A     		ldr	r2, .L261+24
 2700 0028 1368     		ldr	r3, [r2]
 2701 002a 013B     		subs	r3, r3, #1
 2702 002c 1360     		str	r3, [r2]
3055:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2703              		.loc 1 3055 0
 2704 002e 2368     		ldr	r3, [r4]
 2705 0030 013B     		subs	r3, r3, #1
 2706 0032 2360     		str	r3, [r4]
3057:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2707              		.loc 1 3057 0
 2708 0034 124B     		ldr	r3, .L261+28
 2709 0036 9847     		blx	r3
 2710              	.LVL250:
 2711              	.LBB87:
 2712              	.LBB88:
3337:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 2713              		.loc 1 3337 0
 2714 0038 124C     		ldr	r4, .L261+32
 2715 003a 286B     		ldr	r0, [r5, #48]
 2716 003c 40F60952 		movw	r2, #3337
 2717 0040 1149     		ldr	r1, .L261+36
 2718 0042 A047     		blx	r4
 2719              	.LVL251:
3341:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 2720              		.loc 1 3341 0
 2721 0044 2846     		mov	r0, r5
 2722 0046 1049     		ldr	r1, .L261+36
 2723 0048 40F60D52 		movw	r2, #3341
 2724 004c A047     		blx	r4
 2725              	.LVL252:
 2726 004e D8E7     		b	.L254
 2727              	.LVL253:
 2728              	.L260:
 2729              	.LBE88:
 2730              	.LBE87:
 2731              	.LBE86:
 2732              	.LBE85:
 2733              	.LBE84:
2721:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2734              		.loc 1 2721 0
 2735 0050 0E4B     		ldr	r3, .L261+40
 2736 0052 1B68     		ldr	r3, [r3]
 2737 0054 012B     		cmp	r3, #1
 2738 0056 02D9     		bls	.L256
2723:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 2739              		.loc 1 2723 0
 2740              	@ 2723 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2741 0058 00DF     		SWI 0     
 2742 005a BFF36F8F 	ISB         
 2743              	@ 0 "" 2
 2744              		.thumb
 2745              	.L256:
 2746              	.LBB89:
2741:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 2747              		.loc 1 2741 0
 2748 005e 0C4B     		ldr	r3, .L261+44
 2749 0060 9847     		blx	r3
 2750              	.LVL254:
 2751              	.LBE89:
2789:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 2752              		.loc 1 2789 0
 2753 0062 CEE7     		b	.L254
 2754              	.L262:
 2755              		.align	2
 2756              	.L261:
 2757 0064 00000000 		.word	.LANCHOR18
 2758 0068 00000000 		.word	.LANCHOR14
 2759 006c 00000000 		.word	vTaskSuspendAll
 2760 0070 00000000 		.word	xTaskResumeAll
 2761 0074 00000000 		.word	vPortEnterCritical
 2762 0078 00000000 		.word	uxListRemove
 2763 007c 00000000 		.word	.LANCHOR10
 2764 0080 00000000 		.word	vPortExitCritical
 2765 0084 00000000 		.word	vPortFree1
 2766 0088 00000000 		.word	.LANCHOR33
 2767 008c 00000000 		.word	.LANCHOR11
 2768 0090 00000000 		.word	vApplicationIdleHook
 2769              		.cfi_endproc
 2770              	.LFE33:
 2772              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2773              		.align	1
 2774              		.global	uxTaskGetSystemState
 2775              		.thumb
 2776              		.thumb_func
 2778              	uxTaskGetSystemState:
 2779              	.LFB20:
1836:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2780              		.loc 1 1836 0
 2781              		.cfi_startproc
 2782              		@ args = 0, pretend = 0, frame = 0
 2783              		@ frame_needed = 0, uses_anonymous_args = 0
 2784              	.LVL255:
 2785 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2786              	.LCFI22:
 2787              		.cfi_def_cfa_offset 24
 2788              		.cfi_offset 4, -24
 2789              		.cfi_offset 5, -20
 2790              		.cfi_offset 6, -16
 2791              		.cfi_offset 7, -12
 2792              		.cfi_offset 8, -8
 2793              		.cfi_offset 14, -4
1839:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2794              		.loc 1 1839 0
 2795 0004 1E4B     		ldr	r3, .L271
1836:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2796              		.loc 1 1836 0
 2797 0006 0C46     		mov	r4, r1
 2798 0008 0646     		mov	r6, r0
 2799 000a 1746     		mov	r7, r2
1839:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 2800              		.loc 1 1839 0
 2801 000c 9847     		blx	r3
 2802              	.LVL256:
1842:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 2803              		.loc 1 1842 0
 2804 000e 1D4B     		ldr	r3, .L271+4
 2805 0010 1B68     		ldr	r3, [r3]
 2806 0012 9C42     		cmp	r4, r3
 2807 0014 2DD3     		bcc	.L266
 2808 0016 4FF00008 		mov	r8, #0
 2809 001a 4446     		mov	r4, r8
 2810              	.LVL257:
 2811              	.L265:
1849:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2812              		.loc 1 1849 0 discriminator 1
 2813 001c 1A49     		ldr	r1, .L271+8
 2814 001e 06EB4410 		add	r0, r6, r4, lsl #5
 2815 0022 0122     		movs	r2, #1
 2816 0024 4144     		add	r1, r1, r8
 2817 0026 194D     		ldr	r5, .L271+12
 2818 0028 A8F11408 		sub	r8, r8, #20
 2819 002c A847     		blx	r5
 2820              	.LVL258:
1851:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2821              		.loc 1 1851 0 discriminator 1
 2822 002e 18F5A07F 		cmn	r8, #320
1849:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2823              		.loc 1 1849 0 discriminator 1
 2824 0032 0444     		add	r4, r4, r0
 2825              	.LVL259:
1851:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2826              		.loc 1 1851 0 discriminator 1
 2827 0034 F2D1     		bne	.L265
1855:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2828              		.loc 1 1855 0
 2829 0036 164B     		ldr	r3, .L271+16
 2830 0038 06EB4410 		add	r0, r6, r4, lsl #5
 2831 003c 0222     		movs	r2, #2
 2832 003e 1968     		ldr	r1, [r3]
 2833 0040 A847     		blx	r5
 2834              	.LVL260:
1856:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2835              		.loc 1 1856 0
 2836 0042 144B     		ldr	r3, .L271+20
 2837 0044 0222     		movs	r2, #2
 2838 0046 1968     		ldr	r1, [r3]
1855:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2839              		.loc 1 1855 0
 2840 0048 0444     		add	r4, r4, r0
 2841              	.LVL261:
1856:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2842              		.loc 1 1856 0
 2843 004a 06EB4410 		add	r0, r6, r4, lsl #5
 2844 004e A847     		blx	r5
 2845              	.LVL262:
1862:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2846              		.loc 1 1862 0
 2847 0050 1149     		ldr	r1, .L271+24
 2848 0052 0422     		movs	r2, #4
1856:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2849              		.loc 1 1856 0
 2850 0054 0444     		add	r4, r4, r0
 2851              	.LVL263:
1862:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2852              		.loc 1 1862 0
 2853 0056 06EB4410 		add	r0, r6, r4, lsl #5
 2854 005a A847     		blx	r5
 2855              	.LVL264:
1870:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2856              		.loc 1 1870 0
 2857 005c 0F49     		ldr	r1, .L271+28
 2858 005e 0322     		movs	r2, #3
1862:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2859              		.loc 1 1862 0
 2860 0060 0444     		add	r4, r4, r0
 2861              	.LVL265:
1870:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 2862              		.loc 1 1870 0
 2863 0062 06EB4410 		add	r0, r6, r4, lsl #5
 2864 0066 A847     		blx	r5
 2865              	.LVL266:
 2866 0068 0444     		add	r4, r4, r0
 2867              	.LVL267:
1887:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
 2868              		.loc 1 1887 0
 2869 006a 1FB1     		cbz	r7, .L264
1889:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 2870              		.loc 1 1889 0
 2871 006c 0023     		movs	r3, #0
 2872 006e 3B60     		str	r3, [r7]
 2873 0070 00E0     		b	.L264
 2874              	.LVL268:
 2875              	.L266:
1837:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2876              		.loc 1 1837 0
 2877 0072 0024     		movs	r4, #0
 2878              	.LVL269:
 2879              	.L264:
1899:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2880              		.loc 1 1899 0
 2881 0074 0A4B     		ldr	r3, .L271+32
 2882 0076 9847     		blx	r3
 2883              	.LVL270:
1902:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2884              		.loc 1 1902 0
 2885 0078 2046     		mov	r0, r4
 2886 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2887              	.LVL271:
 2888              	.L272:
 2889 007e 00BF     		.align	2
 2890              	.L271:
 2891 0080 00000000 		.word	vTaskSuspendAll
 2892 0084 00000000 		.word	.LANCHOR10
 2893 0088 2C010000 		.word	.LANCHOR11+300
 2894 008c 00000000 		.word	prvListTaskWithinSingleList
 2895 0090 00000000 		.word	.LANCHOR0
 2896 0094 00000000 		.word	.LANCHOR7
 2897 0098 00000000 		.word	.LANCHOR14
 2898 009c 00000000 		.word	.LANCHOR3
 2899 00a0 00000000 		.word	xTaskResumeAll
 2900              		.cfi_endproc
 2901              	.LFE20:
 2903              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2904              		.align	1
 2905              		.global	vTaskSwitchContext
 2906              		.thumb
 2907              		.thumb_func
 2909              	vTaskSwitchContext:
 2910              	.LFB22:
2204:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2911              		.loc 1 2204 0
 2912              		.cfi_startproc
 2913              		@ args = 0, pretend = 0, frame = 0
 2914              		@ frame_needed = 0, uses_anonymous_args = 0
 2915 0000 38B5     		push	{r3, r4, r5, lr}
 2916              	.LCFI23:
 2917              		.cfi_def_cfa_offset 16
 2918              		.cfi_offset 3, -16
 2919              		.cfi_offset 4, -12
 2920              		.cfi_offset 5, -8
 2921              		.cfi_offset 14, -4
2205:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 2922              		.loc 1 2205 0
 2923 0002 244B     		ldr	r3, .L284
 2924 0004 1A68     		ldr	r2, [r3]
 2925 0006 244B     		ldr	r3, .L284+4
 2926 0008 12B1     		cbz	r2, .L274
2209:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 2927              		.loc 1 2209 0
 2928 000a 0122     		movs	r2, #1
 2929 000c 1A60     		str	r2, [r3]
 2930 000e 38BD     		pop	{r3, r4, r5, pc}
 2931              	.L274:
 2932              	.LBB96:
2244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2933              		.loc 1 2244 0
 2934 0010 224C     		ldr	r4, .L284+8
 2935              	.LBE96:
2213:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2936              		.loc 1 2213 0
 2937 0012 1A60     		str	r2, [r3]
 2938              	.LBB97:
2244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2939              		.loc 1 2244 0
 2940 0014 2368     		ldr	r3, [r4]
 2941 0016 1B6B     		ldr	r3, [r3, #48]
 2942              	.LVL272:
 2943 0018 1A68     		ldr	r2, [r3]
 2944 001a B2F1A53F 		cmp	r2, #-1515870811
 2945 001e 0BD1     		bne	.L276
2244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2946              		.loc 1 2244 0 is_stmt 0 discriminator 2
 2947 0020 5A68     		ldr	r2, [r3, #4]
 2948 0022 B2F1A53F 		cmp	r2, #-1515870811
 2949 0026 07D1     		bne	.L276
2244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2950              		.loc 1 2244 0 discriminator 4
 2951 0028 9A68     		ldr	r2, [r3, #8]
 2952 002a B2F1A53F 		cmp	r2, #-1515870811
 2953 002e 03D1     		bne	.L276
2244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2954              		.loc 1 2244 0 discriminator 6
 2955 0030 DB68     		ldr	r3, [r3, #12]
 2956              	.LVL273:
 2957 0032 B3F1A53F 		cmp	r3, #-1515870811
 2958 0036 04D0     		beq	.L277
 2959              	.L276:
2244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 2960              		.loc 1 2244 0 discriminator 7
 2961 0038 2068     		ldr	r0, [r4]
 2962 003a 2168     		ldr	r1, [r4]
 2963 003c 184B     		ldr	r3, .L284+12
 2964 003e 3431     		adds	r1, r1, #52
 2965 0040 9847     		blx	r3
 2966              	.LVL274:
 2967              	.L277:
 2968              	.LBE97:
 2969              	.LBB98:
 2970              	.LBB99:
 2971              	.LBB100:
2248:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2972              		.loc 1 2248 0 is_stmt 1
 2973 0042 184B     		ldr	r3, .L284+16
 2974 0044 1849     		ldr	r1, .L284+20
 2975 0046 1A68     		ldr	r2, [r3]
 2976 0048 1423     		movs	r3, #20
 2977 004a B2FA82F2 		clz	r2, r2
 2978 004e C2F11F02 		rsb	r2, r2, #31
 2979              	.LVL275:
 2980 0052 5343     		muls	r3, r2, r3
 2981 0054 C818     		adds	r0, r1, r3
 2982 0056 CD58     		ldr	r5, [r1, r3]
 2983 0058 5DB9     		cbnz	r5, .L278
 2984              	@ 2248 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 2985 005a 72B6     		CPSID i   
 2986 005c BFF34F8F 	DSB       
 2987 0060 BFF36F8F 	ISB         
 2988              	@ 0 "" 2
 2989              		.thumb
 2990 0064 1148     		ldr	r0, .L284+24
 2991 0066 40F6C802 		movw	r2, #2248
 2992              	.LVL276:
 2993 006a 1149     		ldr	r1, .L284+28
 2994 006c 114B     		ldr	r3, .L284+32
 2995 006e 9847     		blx	r3
 2996              	.LVL277:
 2997              	.L279:
 2998 0070 FEE7     		b	.L279
 2999              	.LVL278:
 3000              	.L278:
 3001              	.LBB101:
 3002 0072 4568     		ldr	r5, [r0, #4]
 3003 0074 0833     		adds	r3, r3, #8
 3004 0076 0B44     		add	r3, r3, r1
 3005 0078 6D68     		ldr	r5, [r5, #4]
 3006 007a 4560     		str	r5, [r0, #4]
 3007 007c 9D42     		cmp	r5, r3
 3008 007e 04BF     		itt	eq
 3009 0080 6B68     		ldreq	r3, [r5, #4]
 3010 0082 4360     		streq	r3, [r0, #4]
 3011 0084 1423     		movs	r3, #20
 3012 0086 03FB0212 		mla	r2, r3, r2, r1
 3013              	.LVL279:
 3014 008a 5368     		ldr	r3, [r2, #4]
 3015 008c DB68     		ldr	r3, [r3, #12]
 3016 008e 2360     		str	r3, [r4]
 3017 0090 38BD     		pop	{r3, r4, r5, pc}
 3018              	.L285:
 3019 0092 00BF     		.align	2
 3020              	.L284:
 3021 0094 00000000 		.word	.LANCHOR19
 3022 0098 00000000 		.word	.LANCHOR29
 3023 009c 00000000 		.word	.LANCHOR5
 3024 00a0 00000000 		.word	vApplicationStackOverflowHook
 3025 00a4 00000000 		.word	.LANCHOR17
 3026 00a8 00000000 		.word	.LANCHOR11
 3027 00ac 00000000 		.word	.LC0
 3028 00b0 00000000 		.word	.LANCHOR34
 3029 00b4 00000000 		.word	printf
 3030              	.LBE101:
 3031              	.LBE100:
 3032              	.LBE99:
 3033              	.LBE98:
 3034              		.cfi_endproc
 3035              	.LFE22:
 3037              		.section	.text.vTaskSuspend,"ax",%progbits
 3038              		.align	1
 3039              		.global	vTaskSuspend
 3040              		.thumb
 3041              		.thumb_func
 3043              	vTaskSuspend:
 3044              	.LFB9:
1285:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 3045              		.loc 1 1285 0
 3046              		.cfi_startproc
 3047              		@ args = 0, pretend = 0, frame = 0
 3048              		@ frame_needed = 0, uses_anonymous_args = 0
 3049              	.LVL280:
 3050 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3051              	.LCFI24:
 3052              		.cfi_def_cfa_offset 24
 3053              		.cfi_offset 4, -24
 3054              		.cfi_offset 5, -20
 3055              		.cfi_offset 6, -16
 3056              		.cfi_offset 7, -12
 3057              		.cfi_offset 8, -8
 3058              		.cfi_offset 14, -4
1285:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 3059              		.loc 1 1285 0
 3060 0004 0446     		mov	r4, r0
1288:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3061              		.loc 1 1288 0
 3062 0006 2C4D     		ldr	r5, .L302
 3063 0008 A847     		blx	r5
 3064              	.LVL281:
 3065 000a 2C4E     		ldr	r6, .L302+4
1292:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3066              		.loc 1 1292 0
 3067 000c 04B9     		cbnz	r4, .L287
1292:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3068              		.loc 1 1292 0 is_stmt 0 discriminator 1
 3069 000e 3468     		ldr	r4, [r6]
 3070              	.LVL282:
 3071              	.L287:
1298:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 3072              		.loc 1 1298 0 is_stmt 1 discriminator 4
 3073 0010 271D     		adds	r7, r4, #4
 3074 0012 DFF8DC80 		ldr	r8, .L302+56
 3075 0016 3846     		mov	r0, r7
 3076 0018 C047     		blx	r8
 3077              	.LVL283:
 3078 001a 4346     		mov	r3, r8
 3079 001c 78B9     		cbnz	r0, .L288
1300:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 3080              		.loc 1 1300 0
 3081 001e D4F82CE0 		ldr	lr, [r4, #44]
 3082 0022 1422     		movs	r2, #20
 3083 0024 2649     		ldr	r1, .L302+8
 3084 0026 02FB0EF2 		mul	r2, r2, lr
 3085 002a 8A58     		ldr	r2, [r1, r2]
 3086 002c 3AB9     		cbnz	r2, .L288
1300:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 3087              		.loc 1 1300 0 is_stmt 0 discriminator 1
 3088 002e 2548     		ldr	r0, .L302+12
 3089 0030 0122     		movs	r2, #1
 3090 0032 02FA0EF2 		lsl	r2, r2, lr
 3091 0036 0168     		ldr	r1, [r0]
 3092 0038 21EA0202 		bic	r2, r1, r2
 3093 003c 0260     		str	r2, [r0]
 3094              	.L288:
1308:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 3095              		.loc 1 1308 0 is_stmt 1
 3096 003e A26A     		ldr	r2, [r4, #40]
 3097 0040 12B1     		cbz	r2, .L289
1310:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 3098              		.loc 1 1310 0
 3099 0042 04F11800 		add	r0, r4, #24
 3100 0046 9847     		blx	r3
 3101              	.LVL284:
 3102              	.L289:
1317:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 3103              		.loc 1 1317 0
 3104 0048 DFF8A880 		ldr	r8, .L302+60
 3105 004c 3946     		mov	r1, r7
 3106 004e 1E4B     		ldr	r3, .L302+16
 3107 0050 4046     		mov	r0, r8
1319:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3108              		.loc 1 1319 0
 3109 0052 1E4F     		ldr	r7, .L302+20
1317:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 3110              		.loc 1 1317 0
 3111 0054 9847     		blx	r3
 3112              	.LVL285:
1319:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3113              		.loc 1 1319 0
 3114 0056 B847     		blx	r7
 3115              	.LVL286:
1321:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3116              		.loc 1 1321 0
 3117 0058 3368     		ldr	r3, [r6]
 3118 005a 9C42     		cmp	r4, r3
 3119 005c 1C4B     		ldr	r3, .L302+24
1323:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 3120              		.loc 1 1323 0
 3121 005e 1B68     		ldr	r3, [r3]
1321:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3122              		.loc 1 1321 0
 3123 0060 22D1     		bne	.L290
1323:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 3124              		.loc 1 1323 0
 3125 0062 9BB1     		cbz	r3, .L291
1326:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3126              		.loc 1 1326 0
 3127 0064 1B4B     		ldr	r3, .L302+28
 3128 0066 1B68     		ldr	r3, [r3]
 3129 0068 5BB1     		cbz	r3, .L292
1326:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3130              		.loc 1 1326 0 is_stmt 0 discriminator 1
 3131              	@ 1326 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3132 006a 72B6     		CPSID i   
 3133 006c BFF34F8F 	DSB       
 3134 0070 BFF36F8F 	ISB         
 3135              	@ 0 "" 2
 3136              		.thumb
 3137 0074 1848     		ldr	r0, .L302+32
 3138 0076 40F22E52 		movw	r2, #1326
 3139 007a 1849     		ldr	r1, .L302+36
 3140 007c 184B     		ldr	r3, .L302+40
 3141 007e 9847     		blx	r3
 3142              	.LVL287:
 3143              	.L293:
 3144 0080 FEE7     		b	.L293
 3145              	.L292:
1327:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 3146              		.loc 1 1327 0 is_stmt 1
 3147              	@ 1327 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3148 0082 00DF     		SWI 0     
 3149 0084 BFF36F8F 	ISB         
 3150              	@ 0 "" 2
 3151              		.thumb
 3152 0088 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3153              	.LVL288:
 3154              	.L291:
1334:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 3155              		.loc 1 1334 0
 3156 008c 154A     		ldr	r2, .L302+44
 3157 008e D8F80010 		ldr	r1, [r8]
 3158 0092 1268     		ldr	r2, [r2]
 3159 0094 9142     		cmp	r1, r2
 3160 0096 03D1     		bne	.L295
1340:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 3161              		.loc 1 1340 0
 3162 0098 084A     		ldr	r2, .L302+4
 3163 009a 1360     		str	r3, [r2]
 3164 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3165              	.LVL289:
 3166              	.L295:
1344:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 3167              		.loc 1 1344 0
 3168 00a0 114B     		ldr	r3, .L302+48
 3169 00a2 9847     		blx	r3
 3170              	.LVL290:
 3171 00a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3172              	.LVL291:
 3173              	.L290:
1350:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 3174              		.loc 1 1350 0
 3175 00a8 1BB1     		cbz	r3, .L286
1355:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 3176              		.loc 1 1355 0
 3177 00aa A847     		blx	r5
 3178              	.LVL292:
1357:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 3179              		.loc 1 1357 0
 3180 00ac 0F4B     		ldr	r3, .L302+52
 3181 00ae 9847     		blx	r3
 3182              	.LVL293:
1359:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 3183              		.loc 1 1359 0
 3184 00b0 B847     		blx	r7
 3185              	.LVL294:
 3186              	.L286:
 3187 00b2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3188              	.LVL295:
 3189              	.L303:
 3190 00b6 00BF     		.align	2
 3191              	.L302:
 3192 00b8 00000000 		.word	vPortEnterCritical
 3193 00bc 00000000 		.word	.LANCHOR5
 3194 00c0 00000000 		.word	.LANCHOR11
 3195 00c4 00000000 		.word	.LANCHOR17
 3196 00c8 00000000 		.word	vListInsertEnd
 3197 00cc 00000000 		.word	vPortExitCritical
 3198 00d0 00000000 		.word	.LANCHOR15
 3199 00d4 00000000 		.word	.LANCHOR19
 3200 00d8 00000000 		.word	.LC0
 3201 00dc 00000000 		.word	.LANCHOR35
 3202 00e0 00000000 		.word	printf
 3203 00e4 00000000 		.word	.LANCHOR10
 3204 00e8 00000000 		.word	vTaskSwitchContext
 3205 00ec 00000000 		.word	prvResetNextTaskUnblockTime
 3206 00f0 00000000 		.word	uxListRemove
 3207 00f4 00000000 		.word	.LANCHOR3
 3208              		.cfi_endproc
 3209              	.LFE9:
 3211              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3212              		.align	1
 3213              		.global	vTaskPlaceOnEventList
 3214              		.thumb
 3215              		.thumb_func
 3217              	vTaskPlaceOnEventList:
 3218              	.LFB23:
2263:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTimeToWake;
 3219              		.loc 1 2263 0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 3223              	.LVL296:
 3224 0000 38B5     		push	{r3, r4, r5, lr}
 3225              	.LCFI25:
 3226              		.cfi_def_cfa_offset 16
 3227              		.cfi_offset 3, -16
 3228              		.cfi_offset 4, -12
 3229              		.cfi_offset 5, -8
 3230              		.cfi_offset 14, -4
2263:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTimeToWake;
 3231              		.loc 1 2263 0
 3232 0002 0D46     		mov	r5, r1
2266:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3233              		.loc 1 2266 0
 3234 0004 58B9     		cbnz	r0, .L305
2266:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3235              		.loc 1 2266 0 is_stmt 0 discriminator 1
 3236              	@ 2266 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3237 0006 72B6     		CPSID i   
 3238 0008 BFF34F8F 	DSB       
 3239 000c BFF36F8F 	ISB         
 3240              	@ 0 "" 2
 3241              		.thumb
 3242 0010 1348     		ldr	r0, .L310
 3243              	.LVL297:
 3244 0012 40F6DA02 		movw	r2, #2266
 3245 0016 1349     		ldr	r1, .L310+4
 3246              	.LVL298:
 3247 0018 134B     		ldr	r3, .L310+8
 3248 001a 9847     		blx	r3
 3249              	.LVL299:
 3250              	.L306:
 3251 001c FEE7     		b	.L306
 3252              	.LVL300:
 3253              	.L305:
2275:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3254              		.loc 1 2275 0 is_stmt 1
 3255 001e 134C     		ldr	r4, .L310+12
 3256 0020 134B     		ldr	r3, .L310+16
 3257 0022 2168     		ldr	r1, [r4]
 3258              	.LVL301:
 3259 0024 1831     		adds	r1, r1, #24
 3260 0026 9847     		blx	r3
 3261              	.LVL302:
2280:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 3262              		.loc 1 2280 0
 3263 0028 2068     		ldr	r0, [r4]
 3264 002a 124B     		ldr	r3, .L310+20
 3265 002c 0430     		adds	r0, r0, #4
 3266 002e 9847     		blx	r3
 3267              	.LVL303:
 3268 0030 40B9     		cbnz	r0, .L307
2284:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3269              		.loc 1 2284 0
 3270 0032 2368     		ldr	r3, [r4]
 3271 0034 1049     		ldr	r1, .L310+24
 3272 0036 D86A     		ldr	r0, [r3, #44]
 3273 0038 0123     		movs	r3, #1
 3274 003a 0A68     		ldr	r2, [r1]
 3275 003c 8340     		lsls	r3, r3, r0
 3276 003e 22EA0303 		bic	r3, r2, r3
 3277 0042 0B60     		str	r3, [r1]
 3278              	.L307:
2293:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3279              		.loc 1 2293 0
 3280 0044 6B1C     		adds	r3, r5, #1
 3281 0046 05D1     		bne	.L308
2298:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 3282              		.loc 1 2298 0
 3283 0048 2168     		ldr	r1, [r4]
 3284 004a 0C48     		ldr	r0, .L310+28
 3285 004c 0431     		adds	r1, r1, #4
 3286 004e 0C4B     		ldr	r3, .L310+32
 3287 0050 9847     		blx	r3
 3288              	.LVL304:
 3289 0052 38BD     		pop	{r3, r4, r5, pc}
 3290              	.LVL305:
 3291              	.L308:
2305:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3292              		.loc 1 2305 0
 3293 0054 0B4B     		ldr	r3, .L310+36
 3294 0056 1868     		ldr	r0, [r3]
 3295              	.LVL306:
2306:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 3296              		.loc 1 2306 0
 3297 0058 0B4B     		ldr	r3, .L310+40
 3298 005a 2844     		add	r0, r0, r5
 3299              	.LVL307:
 3300 005c 9847     		blx	r3
 3301              	.LVL308:
 3302 005e 38BD     		pop	{r3, r4, r5, pc}
 3303              	.LVL309:
 3304              	.L311:
 3305              		.align	2
 3306              	.L310:
 3307 0060 00000000 		.word	.LC0
 3308 0064 00000000 		.word	.LANCHOR36
 3309 0068 00000000 		.word	printf
 3310 006c 00000000 		.word	.LANCHOR5
 3311 0070 00000000 		.word	vListInsert
 3312 0074 00000000 		.word	uxListRemove
 3313 0078 00000000 		.word	.LANCHOR17
 3314 007c 00000000 		.word	.LANCHOR3
 3315 0080 00000000 		.word	vListInsertEnd
 3316 0084 00000000 		.word	.LANCHOR6
 3317 0088 00000000 		.word	prvAddCurrentTaskToDelayedList
 3318              		.cfi_endproc
 3319              	.LFE23:
 3321              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3322              		.align	1
 3323              		.global	vTaskPlaceOnUnorderedEventList
 3324              		.thumb
 3325              		.thumb_func
 3327              	vTaskPlaceOnUnorderedEventList:
 3328              	.LFB24:
2322:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTimeToWake;
 3329              		.loc 1 2322 0
 3330              		.cfi_startproc
 3331              		@ args = 0, pretend = 0, frame = 0
 3332              		@ frame_needed = 0, uses_anonymous_args = 0
 3333              	.LVL310:
 3334 0000 70B5     		push	{r4, r5, r6, lr}
 3335              	.LCFI26:
 3336              		.cfi_def_cfa_offset 16
 3337              		.cfi_offset 4, -16
 3338              		.cfi_offset 5, -12
 3339              		.cfi_offset 6, -8
 3340              		.cfi_offset 14, -4
2322:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t xTimeToWake;
 3341              		.loc 1 2322 0
 3342 0002 1646     		mov	r6, r2
2325:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3343              		.loc 1 2325 0
 3344 0004 58B9     		cbnz	r0, .L313
2325:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3345              		.loc 1 2325 0 is_stmt 0 discriminator 1
 3346              	@ 2325 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3347 0006 72B6     		CPSID i   
 3348 0008 BFF34F8F 	DSB       
 3349 000c BFF36F8F 	ISB         
 3350              	@ 0 "" 2
 3351              		.thumb
 3352 0010 1C48     		ldr	r0, .L320
 3353              	.LVL311:
 3354 0012 40F61512 		movw	r2, #2325
 3355              	.LVL312:
 3356 0016 1C49     		ldr	r1, .L320+4
 3357              	.LVL313:
 3358 0018 1C4B     		ldr	r3, .L320+8
 3359 001a 9847     		blx	r3
 3360              	.LVL314:
 3361              	.L314:
 3362 001c FEE7     		b	.L314
 3363              	.LVL315:
 3364              	.L313:
2329:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3365              		.loc 1 2329 0 is_stmt 1
 3366 001e 1C4B     		ldr	r3, .L320+12
 3367 0020 1B68     		ldr	r3, [r3]
 3368 0022 5BB9     		cbnz	r3, .L315
2329:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3369              		.loc 1 2329 0 is_stmt 0 discriminator 1
 3370              	@ 2329 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3371 0024 72B6     		CPSID i   
 3372 0026 BFF34F8F 	DSB       
 3373 002a BFF36F8F 	ISB         
 3374              	@ 0 "" 2
 3375              		.thumb
 3376 002e 1548     		ldr	r0, .L320
 3377              	.LVL316:
 3378 0030 40F61912 		movw	r2, #2329
 3379              	.LVL317:
 3380 0034 1449     		ldr	r1, .L320+4
 3381              	.LVL318:
 3382 0036 154B     		ldr	r3, .L320+8
 3383 0038 9847     		blx	r3
 3384              	.LVL319:
 3385              	.L316:
2329:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3386              		.loc 1 2329 0 discriminator 2
 3387 003a FEE7     		b	.L316
 3388              	.LVL320:
 3389              	.L315:
2334:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3390              		.loc 1 2334 0 is_stmt 1
 3391 003c 154C     		ldr	r4, .L320+16
 3392 003e 41F00041 		orr	r1, r1, #-2147483648
 3393              	.LVL321:
2341:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3394              		.loc 1 2341 0
 3395 0042 154D     		ldr	r5, .L320+20
2334:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3396              		.loc 1 2334 0
 3397 0044 2368     		ldr	r3, [r4]
 3398 0046 9961     		str	r1, [r3, #24]
2341:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3399              		.loc 1 2341 0
 3400 0048 2168     		ldr	r1, [r4]
 3401 004a 1831     		adds	r1, r1, #24
 3402 004c A847     		blx	r5
 3403              	.LVL322:
2346:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 3404              		.loc 1 2346 0
 3405 004e 2068     		ldr	r0, [r4]
 3406 0050 124B     		ldr	r3, .L320+24
 3407 0052 0430     		adds	r0, r0, #4
 3408 0054 9847     		blx	r3
 3409              	.LVL323:
 3410 0056 40B9     		cbnz	r0, .L317
2350:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3411              		.loc 1 2350 0
 3412 0058 2368     		ldr	r3, [r4]
 3413 005a 114A     		ldr	r2, .L320+28
 3414 005c D86A     		ldr	r0, [r3, #44]
 3415 005e 0123     		movs	r3, #1
 3416 0060 1168     		ldr	r1, [r2]
 3417 0062 8340     		lsls	r3, r3, r0
 3418 0064 21EA0303 		bic	r3, r1, r3
 3419 0068 1360     		str	r3, [r2]
 3420              	.L317:
2359:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3421              		.loc 1 2359 0
 3422 006a 731C     		adds	r3, r6, #1
 3423 006c 04D1     		bne	.L318
2364:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 3424              		.loc 1 2364 0
 3425 006e 2168     		ldr	r1, [r4]
 3426 0070 0C48     		ldr	r0, .L320+32
 3427 0072 0431     		adds	r1, r1, #4
 3428 0074 A847     		blx	r5
 3429              	.LVL324:
 3430 0076 70BD     		pop	{r4, r5, r6, pc}
 3431              	.LVL325:
 3432              	.L318:
2371:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3433              		.loc 1 2371 0
 3434 0078 0B4B     		ldr	r3, .L320+36
 3435 007a 1868     		ldr	r0, [r3]
 3436              	.LVL326:
2372:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 3437              		.loc 1 2372 0
 3438 007c 0B4B     		ldr	r3, .L320+40
 3439 007e 3044     		add	r0, r0, r6
 3440              	.LVL327:
 3441 0080 9847     		blx	r3
 3442              	.LVL328:
 3443 0082 70BD     		pop	{r4, r5, r6, pc}
 3444              	.LVL329:
 3445              	.L321:
 3446              		.align	2
 3447              	.L320:
 3448 0084 00000000 		.word	.LC0
 3449 0088 00000000 		.word	.LANCHOR37
 3450 008c 00000000 		.word	printf
 3451 0090 00000000 		.word	.LANCHOR19
 3452 0094 00000000 		.word	.LANCHOR5
 3453 0098 00000000 		.word	vListInsertEnd
 3454 009c 00000000 		.word	uxListRemove
 3455 00a0 00000000 		.word	.LANCHOR17
 3456 00a4 00000000 		.word	.LANCHOR3
 3457 00a8 00000000 		.word	.LANCHOR6
 3458 00ac 00000000 		.word	prvAddCurrentTaskToDelayedList
 3459              		.cfi_endproc
 3460              	.LFE24:
 3462              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3463              		.align	1
 3464              		.global	vTaskPlaceOnEventListRestricted
 3465              		.thumb
 3466              		.thumb_func
 3468              	vTaskPlaceOnEventListRestricted:
 3469              	.LFB25:
2390:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 3470              		.loc 1 2390 0
 3471              		.cfi_startproc
 3472              		@ args = 0, pretend = 0, frame = 0
 3473              		@ frame_needed = 0, uses_anonymous_args = 0
 3474              	.LVL330:
 3475 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3476              	.LCFI27:
 3477              		.cfi_def_cfa_offset 24
 3478              		.cfi_offset 3, -24
 3479              		.cfi_offset 4, -20
 3480              		.cfi_offset 5, -16
 3481              		.cfi_offset 6, -12
 3482              		.cfi_offset 7, -8
 3483              		.cfi_offset 14, -4
2390:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 3484              		.loc 1 2390 0
 3485 0002 0E46     		mov	r6, r1
 3486 0004 1746     		mov	r7, r2
2393:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3487              		.loc 1 2393 0
 3488 0006 58B9     		cbnz	r0, .L323
2393:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3489              		.loc 1 2393 0 is_stmt 0 discriminator 1
 3490              	@ 2393 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3491 0008 72B6     		CPSID i   
 3492 000a BFF34F8F 	DSB       
 3493 000e BFF36F8F 	ISB         
 3494              	@ 0 "" 2
 3495              		.thumb
 3496 0012 1348     		ldr	r0, .L328
 3497              	.LVL331:
 3498 0014 40F65912 		movw	r2, #2393
 3499              	.LVL332:
 3500 0018 1249     		ldr	r1, .L328+4
 3501              	.LVL333:
 3502 001a 134B     		ldr	r3, .L328+8
 3503 001c 9847     		blx	r3
 3504              	.LVL334:
 3505              	.L324:
 3506 001e FEE7     		b	.L324
 3507              	.LVL335:
 3508              	.L323:
2405:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3509              		.loc 1 2405 0 is_stmt 1
 3510 0020 124C     		ldr	r4, .L328+12
 3511 0022 134D     		ldr	r5, .L328+16
 3512 0024 2168     		ldr	r1, [r4]
 3513              	.LVL336:
 3514 0026 1831     		adds	r1, r1, #24
 3515 0028 A847     		blx	r5
 3516              	.LVL337:
2411:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3517              		.loc 1 2411 0
 3518 002a 2068     		ldr	r0, [r4]
 3519 002c 114B     		ldr	r3, .L328+20
 3520 002e 0430     		adds	r0, r0, #4
 3521 0030 9847     		blx	r3
 3522              	.LVL338:
 3523 0032 40B9     		cbnz	r0, .L325
2415:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 3524              		.loc 1 2415 0
 3525 0034 2368     		ldr	r3, [r4]
 3526 0036 1048     		ldr	r0, .L328+24
 3527 0038 DA6A     		ldr	r2, [r3, #44]
 3528 003a 0123     		movs	r3, #1
 3529 003c 0168     		ldr	r1, [r0]
 3530 003e 9340     		lsls	r3, r3, r2
 3531 0040 21EA0303 		bic	r3, r1, r3
 3532 0044 0360     		str	r3, [r0]
 3533              	.L325:
2430:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 3534              		.loc 1 2430 0
 3535 0046 012F     		cmp	r7, #1
 3536 0048 04D1     		bne	.L326
2435:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 3537              		.loc 1 2435 0
 3538 004a 2168     		ldr	r1, [r4]
 3539 004c 0B48     		ldr	r0, .L328+28
 3540 004e 0431     		adds	r1, r1, #4
 3541 0050 A847     		blx	r5
 3542              	.LVL339:
 3543 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3544              	.LVL340:
 3545              	.L326:
2442:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 3546              		.loc 1 2442 0
 3547 0054 0A4B     		ldr	r3, .L328+32
 3548 0056 1868     		ldr	r0, [r3]
 3549              	.LVL341:
2444:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 3550              		.loc 1 2444 0
 3551 0058 0A4B     		ldr	r3, .L328+36
 3552 005a 3044     		add	r0, r0, r6
 3553              	.LVL342:
 3554 005c 9847     		blx	r3
 3555              	.LVL343:
 3556 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3557              	.LVL344:
 3558              	.L329:
 3559              		.align	2
 3560              	.L328:
 3561 0060 00000000 		.word	.LC0
 3562 0064 00000000 		.word	.LANCHOR38
 3563 0068 00000000 		.word	printf
 3564 006c 00000000 		.word	.LANCHOR5
 3565 0070 00000000 		.word	vListInsertEnd
 3566 0074 00000000 		.word	uxListRemove
 3567 0078 00000000 		.word	.LANCHOR17
 3568 007c 00000000 		.word	.LANCHOR3
 3569 0080 00000000 		.word	.LANCHOR6
 3570 0084 00000000 		.word	prvAddCurrentTaskToDelayedList
 3571              		.cfi_endproc
 3572              	.LFE25:
 3574              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3575              		.align	1
 3576              		.global	xTaskRemoveFromEventList
 3577              		.thumb
 3578              		.thumb_func
 3580              	xTaskRemoveFromEventList:
 3581              	.LFB26:
2466:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3582              		.loc 1 2466 0
 3583              		.cfi_startproc
 3584              		@ args = 0, pretend = 0, frame = 0
 3585              		@ frame_needed = 0, uses_anonymous_args = 0
 3586              	.LVL345:
 3587 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3588              	.LCFI28:
 3589              		.cfi_def_cfa_offset 24
 3590              		.cfi_offset 3, -24
 3591              		.cfi_offset 4, -20
 3592              		.cfi_offset 5, -16
 3593              		.cfi_offset 6, -12
 3594              		.cfi_offset 7, -8
 3595              		.cfi_offset 14, -4
2483:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3596              		.loc 1 2483 0
 3597 0002 C368     		ldr	r3, [r0, #12]
 3598 0004 DC68     		ldr	r4, [r3, #12]
 3599              	.LVL346:
2484:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3600              		.loc 1 2484 0
 3601 0006 5CB9     		cbnz	r4, .L331
2484:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3602              		.loc 1 2484 0 is_stmt 0 discriminator 1
 3603              	@ 2484 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3604 0008 72B6     		CPSID i   
 3605 000a BFF34F8F 	DSB       
 3606 000e BFF36F8F 	ISB         
 3607              	@ 0 "" 2
 3608              		.thumb
 3609 0012 1648     		ldr	r0, .L338
 3610              	.LVL347:
 3611 0014 40F6B412 		movw	r2, #2484
 3612 0018 1549     		ldr	r1, .L338+4
 3613 001a 164B     		ldr	r3, .L338+8
 3614 001c 9847     		blx	r3
 3615              	.LVL348:
 3616              	.L332:
 3617 001e FEE7     		b	.L332
 3618              	.LVL349:
 3619              	.L331:
2485:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3620              		.loc 1 2485 0 is_stmt 1
 3621 0020 04F11806 		add	r6, r4, #24
 3622 0024 3046     		mov	r0, r6
 3623              	.LVL350:
 3624 0026 144F     		ldr	r7, .L338+12
 3625 0028 B847     		blx	r7
 3626              	.LVL351:
2487:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 3627              		.loc 1 2487 0
 3628 002a 144B     		ldr	r3, .L338+16
 3629 002c 144D     		ldr	r5, .L338+20
 3630 002e 1B68     		ldr	r3, [r3]
 3631 0030 73B9     		cbnz	r3, .L333
2489:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3632              		.loc 1 2489 0
 3633 0032 261D     		adds	r6, r4, #4
 3634 0034 3046     		mov	r0, r6
 3635 0036 B847     		blx	r7
 3636              	.LVL352:
2490:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3637              		.loc 1 2490 0
 3638 0038 1248     		ldr	r0, .L338+24
 3639 003a E16A     		ldr	r1, [r4, #44]
 3640 003c 0123     		movs	r3, #1
 3641 003e 0268     		ldr	r2, [r0]
 3642 0040 8B40     		lsls	r3, r3, r1
 3643 0042 1343     		orrs	r3, r3, r2
 3644 0044 0360     		str	r3, [r0]
 3645 0046 1420     		movs	r0, #20
 3646 0048 0F4B     		ldr	r3, .L338+28
 3647 004a 00FB0130 		mla	r0, r0, r1, r3
 3648 004e 00E0     		b	.L337
 3649              	.L333:
2496:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3650              		.loc 1 2496 0
 3651 0050 0E48     		ldr	r0, .L338+32
 3652              	.L337:
 3653 0052 3146     		mov	r1, r6
 3654 0054 A847     		blx	r5
 3655              	.LVL353:
2499:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 3656              		.loc 1 2499 0
 3657 0056 0E4B     		ldr	r3, .L338+36
 3658 0058 E26A     		ldr	r2, [r4, #44]
 3659 005a 1B68     		ldr	r3, [r3]
 3660 005c DB6A     		ldr	r3, [r3, #44]
 3661 005e 9A42     		cmp	r2, r3
 3662              	.LVL354:
2508:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3663              		.loc 1 2508 0
 3664 0060 89BF     		itett	hi
 3665 0062 0120     		movhi	r0, #1
2512:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3666              		.loc 1 2512 0
 3667 0064 0020     		movls	r0, #0
 3668              	.LVL355:
2508:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3669              		.loc 1 2508 0
 3670 0066 0B4B     		ldrhi	r3, .L338+40
 3671 0068 1860     		strhi	r0, [r3]
2530:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 3672              		.loc 1 2530 0
 3673 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3674              	.LVL356:
 3675              	.L339:
 3676              		.align	2
 3677              	.L338:
 3678 006c 00000000 		.word	.LC0
 3679 0070 00000000 		.word	.LANCHOR39
 3680 0074 00000000 		.word	printf
 3681 0078 00000000 		.word	uxListRemove
 3682 007c 00000000 		.word	.LANCHOR19
 3683 0080 00000000 		.word	vListInsertEnd
 3684 0084 00000000 		.word	.LANCHOR17
 3685 0088 00000000 		.word	.LANCHOR11
 3686 008c 00000000 		.word	.LANCHOR4
 3687 0090 00000000 		.word	.LANCHOR5
 3688 0094 00000000 		.word	.LANCHOR29
 3689              		.cfi_endproc
 3690              	.LFE26:
 3692              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3693              		.align	1
 3694              		.global	xTaskRemoveFromUnorderedEventList
 3695              		.thumb
 3696              		.thumb_func
 3698              	xTaskRemoveFromUnorderedEventList:
 3699              	.LFB27:
2534:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3700              		.loc 1 2534 0
 3701              		.cfi_startproc
 3702              		@ args = 0, pretend = 0, frame = 0
 3703              		@ frame_needed = 0, uses_anonymous_args = 0
 3704              	.LVL357:
2540:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3705              		.loc 1 2540 0
 3706 0000 1F4A     		ldr	r2, .L347
2534:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3707              		.loc 1 2534 0
 3708 0002 70B5     		push	{r4, r5, r6, lr}
 3709              	.LCFI29:
 3710              		.cfi_def_cfa_offset 16
 3711              		.cfi_offset 4, -16
 3712              		.cfi_offset 5, -12
 3713              		.cfi_offset 6, -8
 3714              		.cfi_offset 14, -4
2540:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3715              		.loc 1 2540 0
 3716 0004 1268     		ldr	r2, [r2]
 3717 0006 5AB9     		cbnz	r2, .L341
2540:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3718              		.loc 1 2540 0 is_stmt 0 discriminator 1
 3719              	@ 2540 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3720 0008 72B6     		CPSID i   
 3721 000a BFF34F8F 	DSB       
 3722 000e BFF36F8F 	ISB         
 3723              	@ 0 "" 2
 3724              		.thumb
 3725 0012 1C48     		ldr	r0, .L347+4
 3726              	.LVL358:
 3727 0014 40F6EC12 		movw	r2, #2540
 3728 0018 1B49     		ldr	r1, .L347+8
 3729              	.LVL359:
 3730 001a 1C4B     		ldr	r3, .L347+12
 3731 001c 9847     		blx	r3
 3732              	.LVL360:
 3733              	.L342:
 3734 001e FEE7     		b	.L342
 3735              	.LVL361:
 3736              	.L341:
2547:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3737              		.loc 1 2547 0 is_stmt 1
 3738 0020 C568     		ldr	r5, [r0, #12]
 3739              	.LVL362:
2543:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3740              		.loc 1 2543 0
 3741 0022 41F00041 		orr	r1, r1, #-2147483648
 3742              	.LVL363:
 3743 0026 0160     		str	r1, [r0]
2548:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3744              		.loc 1 2548 0
 3745 0028 5DB9     		cbnz	r5, .L343
2548:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3746              		.loc 1 2548 0 is_stmt 0 discriminator 1
 3747              	@ 2548 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3748 002a 72B6     		CPSID i   
 3749 002c BFF34F8F 	DSB       
 3750 0030 BFF36F8F 	ISB         
 3751              	@ 0 "" 2
 3752              		.thumb
 3753 0034 1348     		ldr	r0, .L347+4
 3754              	.LVL364:
 3755 0036 40F6F412 		movw	r2, #2548
 3756 003a 1349     		ldr	r1, .L347+8
 3757 003c 134B     		ldr	r3, .L347+12
 3758 003e 9847     		blx	r3
 3759              	.LVL365:
 3760              	.L344:
2548:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3761              		.loc 1 2548 0 discriminator 2
 3762 0040 FEE7     		b	.L344
 3763              	.LVL366:
 3764              	.L343:
2549:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3765              		.loc 1 2549 0 is_stmt 1
 3766 0042 134C     		ldr	r4, .L347+16
2554:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3767              		.loc 1 2554 0
 3768 0044 2E1D     		adds	r6, r5, #4
2549:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3769              		.loc 1 2549 0
 3770 0046 A047     		blx	r4
 3771              	.LVL367:
2554:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3772              		.loc 1 2554 0
 3773 0048 3046     		mov	r0, r6
 3774 004a A047     		blx	r4
 3775              	.LVL368:
2555:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3776              		.loc 1 2555 0
 3777 004c 1149     		ldr	r1, .L347+20
 3778 004e EA6A     		ldr	r2, [r5, #44]
 3779 0050 0124     		movs	r4, #1
 3780 0052 0B68     		ldr	r3, [r1]
 3781 0054 04FA02F0 		lsl	r0, r4, r2
 3782 0058 0343     		orrs	r3, r3, r0
 3783 005a 1420     		movs	r0, #20
 3784 005c 0B60     		str	r3, [r1]
 3785 005e 3146     		mov	r1, r6
 3786 0060 0D4B     		ldr	r3, .L347+24
 3787 0062 00FB0230 		mla	r0, r0, r2, r3
 3788 0066 0D4B     		ldr	r3, .L347+28
 3789 0068 9847     		blx	r3
 3790              	.LVL369:
2557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 3791              		.loc 1 2557 0
 3792 006a 0D4B     		ldr	r3, .L347+32
 3793 006c EA6A     		ldr	r2, [r5, #44]
 3794 006e 1B68     		ldr	r3, [r3]
 3795 0070 DB6A     		ldr	r3, [r3, #44]
 3796 0072 9A42     		cmp	r2, r3
 3797              	.LVL370:
2563:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3798              		.loc 1 2563 0
 3799 0074 89BF     		itett	hi
 3800 0076 2046     		movhi	r0, r4
2571:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3801              		.loc 1 2571 0
 3802 0078 0020     		movls	r0, #0
 3803              	.LVL371:
2567:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 3804              		.loc 1 2567 0
 3805 007a 0A4B     		ldrhi	r3, .L347+36
 3806 007c 1C60     		strhi	r4, [r3]
2575:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 3807              		.loc 1 2575 0
 3808 007e 70BD     		pop	{r4, r5, r6, pc}
 3809              	.LVL372:
 3810              	.L348:
 3811              		.align	2
 3812              	.L347:
 3813 0080 00000000 		.word	.LANCHOR19
 3814 0084 00000000 		.word	.LC0
 3815 0088 00000000 		.word	.LANCHOR40
 3816 008c 00000000 		.word	printf
 3817 0090 00000000 		.word	uxListRemove
 3818 0094 00000000 		.word	.LANCHOR17
 3819 0098 00000000 		.word	.LANCHOR11
 3820 009c 00000000 		.word	vListInsertEnd
 3821 00a0 00000000 		.word	.LANCHOR5
 3822 00a4 00000000 		.word	.LANCHOR29
 3823              		.cfi_endproc
 3824              	.LFE27:
 3826              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3827              		.align	1
 3828              		.global	vTaskSetTimeOutState
 3829              		.thumb
 3830              		.thumb_func
 3832              	vTaskSetTimeOutState:
 3833              	.LFB28:
2579:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3834              		.loc 1 2579 0
 3835              		.cfi_startproc
 3836              		@ args = 0, pretend = 0, frame = 0
 3837              		@ frame_needed = 0, uses_anonymous_args = 0
 3838              	.LVL373:
 3839 0000 08B5     		push	{r3, lr}
 3840              	.LCFI30:
 3841              		.cfi_def_cfa_offset 8
 3842              		.cfi_offset 3, -8
 3843              		.cfi_offset 14, -4
2580:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3844              		.loc 1 2580 0
 3845 0002 58B9     		cbnz	r0, .L350
 3846              	.LVL374:
 3847              	.LBB104:
 3848              	.LBB105:
 3849              	@ 2580 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3850 0004 72B6     		CPSID i   
 3851 0006 BFF34F8F 	DSB       
 3852 000a BFF36F8F 	ISB         
 3853              	@ 0 "" 2
 3854              		.thumb
 3855 000e 0748     		ldr	r0, .L352
 3856              	.LVL375:
 3857 0010 40F61422 		movw	r2, #2580
 3858 0014 0649     		ldr	r1, .L352+4
 3859 0016 074B     		ldr	r3, .L352+8
 3860 0018 9847     		blx	r3
 3861              	.LVL376:
 3862              	.L351:
 3863 001a FEE7     		b	.L351
 3864              	.LVL377:
 3865              	.L350:
 3866              	.LBE105:
 3867              	.LBE104:
2581:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3868              		.loc 1 2581 0
 3869 001c 064B     		ldr	r3, .L352+12
 3870 001e 1B68     		ldr	r3, [r3]
 3871 0020 0360     		str	r3, [r0]
2582:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 3872              		.loc 1 2582 0
 3873 0022 064B     		ldr	r3, .L352+16
 3874 0024 1B68     		ldr	r3, [r3]
 3875 0026 4360     		str	r3, [r0, #4]
 3876 0028 08BD     		pop	{r3, pc}
 3877              	.L353:
 3878 002a 00BF     		.align	2
 3879              	.L352:
 3880 002c 00000000 		.word	.LC0
 3881 0030 00000000 		.word	.LANCHOR41
 3882 0034 00000000 		.word	printf
 3883 0038 00000000 		.word	.LANCHOR27
 3884 003c 00000000 		.word	.LANCHOR6
 3885              		.cfi_endproc
 3886              	.LFE28:
 3888              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3889              		.align	1
 3890              		.global	xTaskCheckForTimeOut
 3891              		.thumb
 3892              		.thumb_func
 3894              	xTaskCheckForTimeOut:
 3895              	.LFB29:
2587:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
 3896              		.loc 1 2587 0
 3897              		.cfi_startproc
 3898              		@ args = 0, pretend = 0, frame = 0
 3899              		@ frame_needed = 0, uses_anonymous_args = 0
 3900              	.LVL378:
 3901 0000 38B5     		push	{r3, r4, r5, lr}
 3902              	.LCFI31:
 3903              		.cfi_def_cfa_offset 16
 3904              		.cfi_offset 3, -16
 3905              		.cfi_offset 4, -12
 3906              		.cfi_offset 5, -8
 3907              		.cfi_offset 14, -4
2587:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** BaseType_t xReturn;
 3908              		.loc 1 2587 0
 3909 0002 0D46     		mov	r5, r1
2590:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3910              		.loc 1 2590 0
 3911 0004 0446     		mov	r4, r0
 3912 0006 58B9     		cbnz	r0, .L355
2590:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3913              		.loc 1 2590 0 is_stmt 0 discriminator 1
 3914              	@ 2590 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3915 0008 72B6     		CPSID i   
 3916 000a BFF34F8F 	DSB       
 3917 000e BFF36F8F 	ISB         
 3918              	@ 0 "" 2
 3919              		.thumb
 3920 0012 1948     		ldr	r0, .L364
 3921              	.LVL379:
 3922 0014 40F61E22 		movw	r2, #2590
 3923 0018 1849     		ldr	r1, .L364+4
 3924              	.LVL380:
 3925 001a 194B     		ldr	r3, .L364+8
 3926 001c 9847     		blx	r3
 3927              	.LVL381:
 3928              	.L356:
 3929 001e FEE7     		b	.L356
 3930              	.LVL382:
 3931              	.L355:
2591:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3932              		.loc 1 2591 0 is_stmt 1
 3933 0020 59B9     		cbnz	r1, .L357
2591:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3934              		.loc 1 2591 0 is_stmt 0 discriminator 1
 3935              	@ 2591 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 3936 0022 72B6     		CPSID i   
 3937 0024 BFF34F8F 	DSB       
 3938 0028 BFF36F8F 	ISB         
 3939              	@ 0 "" 2
 3940              		.thumb
 3941 002c 1248     		ldr	r0, .L364
 3942              	.LVL383:
 3943 002e 40F61F22 		movw	r2, #2591
 3944 0032 1249     		ldr	r1, .L364+4
 3945              	.LVL384:
 3946 0034 124B     		ldr	r3, .L364+8
 3947 0036 9847     		blx	r3
 3948              	.LVL385:
 3949              	.L358:
2591:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3950              		.loc 1 2591 0 discriminator 2
 3951 0038 FEE7     		b	.L358
 3952              	.LVL386:
 3953              	.L357:
2593:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 3954              		.loc 1 2593 0 is_stmt 1
 3955 003a 124B     		ldr	r3, .L364+12
 3956 003c 9847     		blx	r3
 3957              	.LVL387:
 3958              	.LBB106:
2596:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 3959              		.loc 1 2596 0
 3960 003e 124B     		ldr	r3, .L364+16
 3961 0040 1968     		ldr	r1, [r3]
 3962              	.LVL388:
2602:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 3963              		.loc 1 2602 0
 3964 0042 2B68     		ldr	r3, [r5]
 3965 0044 5A1C     		adds	r2, r3, #1
 3966 0046 10D0     		beq	.L361
2609:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3967              		.loc 1 2609 0
 3968 0048 104A     		ldr	r2, .L364+20
 3969 004a 1068     		ldr	r0, [r2]
 3970 004c 2268     		ldr	r2, [r4]
 3971 004e 9042     		cmp	r0, r2
 3972 0050 6268     		ldr	r2, [r4, #4]
 3973 0052 01D0     		beq	.L360
2609:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3974              		.loc 1 2609 0 is_stmt 0 discriminator 1
 3975 0054 9142     		cmp	r1, r2
 3976 0056 0AD2     		bcs	.L363
 3977              	.L360:
2617:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 3978              		.loc 1 2617 0 is_stmt 1
 3979 0058 881A     		subs	r0, r1, r2
 3980 005a 9842     		cmp	r0, r3
 3981 005c 07D2     		bcs	.L363
2620:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3982              		.loc 1 2620 0
 3983 005e 521A     		subs	r2, r2, r1
 3984 0060 1344     		add	r3, r3, r2
2621:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = pdFALSE;
 3985              		.loc 1 2621 0
 3986 0062 2046     		mov	r0, r4
2620:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3987              		.loc 1 2620 0
 3988 0064 2B60     		str	r3, [r5]
2621:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = pdFALSE;
 3989              		.loc 1 2621 0
 3990 0066 0A4B     		ldr	r3, .L364+24
 3991 0068 9847     		blx	r3
 3992              	.LVL389:
 3993              	.L361:
2604:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 3994              		.loc 1 2604 0
 3995 006a 0024     		movs	r4, #0
 3996              	.LVL390:
 3997 006c 00E0     		b	.L359
 3998              	.LVL391:
 3999              	.L363:
2615:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 4000              		.loc 1 2615 0
 4001 006e 0124     		movs	r4, #1
 4002              	.LVL392:
 4003              	.L359:
 4004              	.LBE106:
2629:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4005              		.loc 1 2629 0
 4006 0070 084B     		ldr	r3, .L364+28
 4007 0072 9847     		blx	r3
 4008              	.LVL393:
2632:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
 4009              		.loc 1 2632 0
 4010 0074 2046     		mov	r0, r4
 4011 0076 38BD     		pop	{r3, r4, r5, pc}
 4012              	.LVL394:
 4013              	.L365:
 4014              		.align	2
 4015              	.L364:
 4016 0078 00000000 		.word	.LC0
 4017 007c 00000000 		.word	.LANCHOR42
 4018 0080 00000000 		.word	printf
 4019 0084 00000000 		.word	vPortEnterCritical
 4020 0088 00000000 		.word	.LANCHOR6
 4021 008c 00000000 		.word	.LANCHOR27
 4022 0090 00000000 		.word	vTaskSetTimeOutState
 4023 0094 00000000 		.word	vPortExitCritical
 4024              		.cfi_endproc
 4025              	.LFE29:
 4027              		.section	.text.vTaskMissedYield,"ax",%progbits
 4028              		.align	1
 4029              		.global	vTaskMissedYield
 4030              		.thumb
 4031              		.thumb_func
 4033              	vTaskMissedYield:
 4034              	.LFB30:
2636:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4035              		.loc 1 2636 0
 4036              		.cfi_startproc
 4037              		@ args = 0, pretend = 0, frame = 0
 4038              		@ frame_needed = 0, uses_anonymous_args = 0
 4039              		@ link register save eliminated.
2637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 4040              		.loc 1 2637 0
 4041 0000 0122     		movs	r2, #1
 4042 0002 014B     		ldr	r3, .L367
 4043 0004 1A60     		str	r2, [r3]
 4044 0006 7047     		bx	lr
 4045              	.L368:
 4046              		.align	2
 4047              	.L367:
 4048 0008 00000000 		.word	.LANCHOR29
 4049              		.cfi_endproc
 4050              	.LFE30:
 4052              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4053              		.align	1
 4054              		.global	uxTaskGetTaskNumber
 4055              		.thumb
 4056              		.thumb_func
 4058              	uxTaskGetTaskNumber:
 4059              	.LFB31:
2644:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxReturn;
 4060              		.loc 1 2644 0
 4061              		.cfi_startproc
 4062              		@ args = 0, pretend = 0, frame = 0
 4063              		@ frame_needed = 0, uses_anonymous_args = 0
 4064              		@ link register save eliminated.
 4065              	.LVL395:
2648:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4066              		.loc 1 2648 0
 4067 0000 00B1     		cbz	r0, .L370
 4068              	.LVL396:
2651:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 4069              		.loc 1 2651 0
 4070 0002 806C     		ldr	r0, [r0, #72]
 4071              	.LVL397:
 4072              	.L370:
2659:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4073              		.loc 1 2659 0
 4074 0004 7047     		bx	lr
 4075              		.cfi_endproc
 4076              	.LFE31:
 4078              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4079              		.align	1
 4080              		.global	vTaskSetTaskNumber
 4081              		.thumb
 4082              		.thumb_func
 4084              	vTaskSetTaskNumber:
 4085              	.LFB32:
2667:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
 4086              		.loc 1 2667 0
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 0
 4089              		@ frame_needed = 0, uses_anonymous_args = 0
 4090              		@ link register save eliminated.
 4091              	.LVL398:
2670:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4092              		.loc 1 2670 0
 4093 0000 00B1     		cbz	r0, .L372
 4094              	.LVL399:
2673:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 4095              		.loc 1 2673 0
 4096 0002 8164     		str	r1, [r0, #72]
 4097              	.LVL400:
 4098              	.L372:
 4099 0004 7047     		bx	lr
 4100              		.cfi_endproc
 4101              	.LFE32:
 4103              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4104              		.align	1
 4105              		.global	xTaskGetCurrentTaskHandle
 4106              		.thumb
 4107              		.thumb_func
 4109              	xTaskGetCurrentTaskHandle:
 4110              	.LFB43:
3367:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3368:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
3369:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3370:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3371:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3372:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3373:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3374:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4111              		.loc 1 3374 0
 4112              		.cfi_startproc
 4113              		@ args = 0, pretend = 0, frame = 0
 4114              		@ frame_needed = 0, uses_anonymous_args = 0
 4115              		@ link register save eliminated.
3375:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TaskHandle_t xReturn;
3376:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3377:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3378:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3379:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		individual execution thread. */
3380:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4116              		.loc 1 3380 0
 4117 0000 014B     		ldr	r3, .L378
 4118 0002 1868     		ldr	r0, [r3]
 4119              	.LVL401:
3381:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3382:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
3383:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 4120              		.loc 1 3383 0
 4121 0004 7047     		bx	lr
 4122              	.L379:
 4123 0006 00BF     		.align	2
 4124              	.L378:
 4125 0008 00000000 		.word	.LANCHOR5
 4126              		.cfi_endproc
 4127              	.LFE43:
 4129              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4130              		.align	1
 4131              		.global	xTaskGetSchedulerState
 4132              		.thumb
 4133              		.thumb_func
 4135              	xTaskGetSchedulerState:
 4136              	.LFB44:
3384:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3385:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3386:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3387:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3388:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3389:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3390:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3391:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4137              		.loc 1 3391 0
 4138              		.cfi_startproc
 4139              		@ args = 0, pretend = 0, frame = 0
 4140              		@ frame_needed = 0, uses_anonymous_args = 0
 4141              		@ link register save eliminated.
3392:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn;
3393:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3394:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4142              		.loc 1 3394 0
 4143 0000 054B     		ldr	r3, .L384
 4144 0002 1B68     		ldr	r3, [r3]
 4145 0004 33B1     		cbz	r3, .L382
3395:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3396:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3397:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3398:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3399:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3400:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4146              		.loc 1 3400 0
 4147 0006 054B     		ldr	r3, .L384+4
 4148 0008 1B68     		ldr	r3, [r3]
 4149 000a 002B     		cmp	r3, #0
3401:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3402:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3403:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3404:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3405:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3406:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4150              		.loc 1 3406 0
 4151 000c 0CBF     		ite	eq
 4152 000e 0220     		moveq	r0, #2
 4153 0010 0020     		movne	r0, #0
 4154 0012 7047     		bx	lr
 4155              	.L382:
3396:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 4156              		.loc 1 3396 0
 4157 0014 0120     		movs	r0, #1
 4158              	.LVL402:
3407:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3408:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3409:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3410:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
3411:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 4159              		.loc 1 3411 0
 4160 0016 7047     		bx	lr
 4161              	.L385:
 4162              		.align	2
 4163              	.L384:
 4164 0018 00000000 		.word	.LANCHOR15
 4165 001c 00000000 		.word	.LANCHOR19
 4166              		.cfi_endproc
 4167              	.LFE44:
 4169              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4170              		.align	1
 4171              		.global	vTaskPriorityInherit
 4172              		.thumb
 4173              		.thumb_func
 4175              	vTaskPriorityInherit:
 4176              	.LFB45:
3412:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3413:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3414:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3415:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3416:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3417:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3418:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3419:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4177              		.loc 1 3419 0
 4178              		.cfi_startproc
 4179              		@ args = 0, pretend = 0, frame = 0
 4180              		@ frame_needed = 0, uses_anonymous_args = 0
 4181              	.LVL403:
 4182 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4183              	.LCFI32:
 4184              		.cfi_def_cfa_offset 24
 4185              		.cfi_offset 4, -24
 4186              		.cfi_offset 5, -20
 4187              		.cfi_offset 6, -16
 4188              		.cfi_offset 7, -12
 4189              		.cfi_offset 8, -8
 4190              		.cfi_offset 14, -4
3420:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3421:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3422:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3423:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3424:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4191              		.loc 1 3424 0
 4192 0004 0446     		mov	r4, r0
 4193 0006 0028     		cmp	r0, #0
 4194 0008 38D0     		beq	.L386
3425:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3426:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3427:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3428:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3429:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4195              		.loc 1 3429 0
 4196 000a 1D4D     		ldr	r5, .L397
 4197 000c C36A     		ldr	r3, [r0, #44]
 4198 000e 2A68     		ldr	r2, [r5]
 4199 0010 D26A     		ldr	r2, [r2, #44]
 4200 0012 9342     		cmp	r3, r2
 4201 0014 32D2     		bcs	.L386
3430:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3431:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3432:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3433:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				not	being used for anything else. */
3434:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4202              		.loc 1 3434 0
 4203 0016 8269     		ldr	r2, [r0, #24]
3435:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3436:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3437:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3438:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
3439:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3440:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3441:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3442:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3443:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3444:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				to be moved into a new list. */
3445:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 4204              		.loc 1 3445 0
 4205 0018 1427     		movs	r7, #20
 4206 001a 1A4E     		ldr	r6, .L397+4
3434:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
 4207              		.loc 1 3434 0
 4208 001c 002A     		cmp	r2, #0
 4209              		.loc 1 3445 0
 4210 001e 07FB0363 		mla	r3, r7, r3, r6
3436:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
 4211              		.loc 1 3436 0
 4212 0022 A1BF     		itttt	ge
 4213 0024 2A68     		ldrge	r2, [r5]
 4214 0026 D26A     		ldrge	r2, [r2, #44]
 4215 0028 C2F11002 		rsbge	r2, r2, #16
 4216 002c 8261     		strge	r2, [r0, #24]
 4217              		.loc 1 3445 0
 4218 002e 4269     		ldr	r2, [r0, #20]
 4219 0030 9A42     		cmp	r2, r3
 4220 0032 20D1     		bne	.L396
3446:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3447:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 4221              		.loc 1 3447 0
 4222 0034 00F10408 		add	r8, r0, #4
 4223 0038 134B     		ldr	r3, .L397+8
 4224 003a 4046     		mov	r0, r8
 4225              	.LVL404:
 4226 003c 9847     		blx	r3
 4227              	.LVL405:
 4228 003e 134B     		ldr	r3, .L397+12
 4229 0040 48B9     		cbnz	r0, .L391
3448:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3449:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4230              		.loc 1 3449 0
 4231 0042 E06A     		ldr	r0, [r4, #44]
 4232 0044 4743     		muls	r7, r0, r7
 4233 0046 F259     		ldr	r2, [r6, r7]
 4234 0048 2AB9     		cbnz	r2, .L391
 4235              		.loc 1 3449 0 is_stmt 0 discriminator 1
 4236 004a 0122     		movs	r2, #1
 4237 004c 1968     		ldr	r1, [r3]
 4238 004e 8240     		lsls	r2, r2, r0
 4239 0050 21EA0202 		bic	r2, r1, r2
 4240 0054 1A60     		str	r2, [r3]
 4241              	.L391:
3450:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3451:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
3452:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3453:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3454:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3455:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3456:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3457:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4242              		.loc 1 3457 0 is_stmt 1
 4243 0056 2A68     		ldr	r2, [r5]
3458:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4244              		.loc 1 3458 0
 4245 0058 0120     		movs	r0, #1
 4246 005a 4146     		mov	r1, r8
3457:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4247              		.loc 1 3457 0
 4248 005c D26A     		ldr	r2, [r2, #44]
 4249 005e E262     		str	r2, [r4, #44]
 4250              		.loc 1 3458 0
 4251 0060 1C68     		ldr	r4, [r3]
 4252              	.LVL406:
 4253 0062 9040     		lsls	r0, r0, r2
 4254 0064 2043     		orrs	r0, r0, r4
 4255 0066 1860     		str	r0, [r3]
 4256 0068 1420     		movs	r0, #20
 4257 006a 094B     		ldr	r3, .L397+16
 4258 006c 00FB0260 		mla	r0, r0, r2, r6
 4259 0070 9847     		blx	r3
 4260              	.LVL407:
 4261 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4262              	.LVL408:
 4263              	.L396:
3459:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3460:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
3461:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3462:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Just inherit the priority. */
3463:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4264              		.loc 1 3463 0
 4265 0076 2B68     		ldr	r3, [r5]
 4266 0078 DB6A     		ldr	r3, [r3, #44]
 4267 007a C362     		str	r3, [r0, #44]
 4268              	.L386:
 4269 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4270              	.L398:
 4271              		.align	2
 4272              	.L397:
 4273 0080 00000000 		.word	.LANCHOR5
 4274 0084 00000000 		.word	.LANCHOR11
 4275 0088 00000000 		.word	uxListRemove
 4276 008c 00000000 		.word	.LANCHOR17
 4277 0090 00000000 		.word	vListInsertEnd
 4278              		.cfi_endproc
 4279              	.LFE45:
 4281              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4282              		.align	1
 4283              		.global	xTaskPriorityDisinherit
 4284              		.thumb
 4285              		.thumb_func
 4287              	xTaskPriorityDisinherit:
 4288              	.LFB46:
3464:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3465:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3466:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3467:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3468:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3469:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3470:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3471:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3472:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3473:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3474:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3475:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3476:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3477:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3478:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3479:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3480:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3481:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3482:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3483:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3484:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3485:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4289              		.loc 1 3485 0
 4290              		.cfi_startproc
 4291              		@ args = 0, pretend = 0, frame = 0
 4292              		@ frame_needed = 0, uses_anonymous_args = 0
 4293              	.LVL409:
 4294 0000 70B5     		push	{r4, r5, r6, lr}
 4295              	.LCFI33:
 4296              		.cfi_def_cfa_offset 16
 4297              		.cfi_offset 4, -16
 4298              		.cfi_offset 5, -12
 4299              		.cfi_offset 6, -8
 4300              		.cfi_offset 14, -4
3486:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3487:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3488:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3489:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4301              		.loc 1 3489 0
 4302 0002 0446     		mov	r4, r0
 4303 0004 08B9     		cbnz	r0, .L400
 4304              	.L406:
3487:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4305              		.loc 1 3487 0
 4306 0006 0020     		movs	r0, #0
 4307              	.LVL410:
 4308 0008 70BD     		pop	{r4, r5, r6, pc}
 4309              	.LVL411:
 4310              	.L400:
3490:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3491:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3492:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3493:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3494:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			be the running state task. */
3495:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 4311              		.loc 1 3495 0
 4312 000a 254B     		ldr	r3, .L408
 4313 000c 1B68     		ldr	r3, [r3]
 4314 000e 9842     		cmp	r0, r3
 4315 0010 0BD0     		beq	.L402
 4316              		.loc 1 3495 0 is_stmt 0 discriminator 1
 4317              	@ 3495 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 4318 0012 72B6     		CPSID i   
 4319 0014 BFF34F8F 	DSB       
 4320 0018 BFF36F8F 	ISB         
 4321              	@ 0 "" 2
 4322              		.thumb
 4323 001c 2148     		ldr	r0, .L408+4
 4324              	.LVL412:
 4325 001e 40F6A752 		movw	r2, #3495
 4326 0022 2149     		ldr	r1, .L408+8
 4327 0024 214B     		ldr	r3, .L408+12
 4328 0026 9847     		blx	r3
 4329              	.LVL413:
 4330              	.L403:
 4331 0028 FEE7     		b	.L403
 4332              	.LVL414:
 4333              	.L402:
3496:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3497:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4334              		.loc 1 3497 0 is_stmt 1
 4335 002a 036D     		ldr	r3, [r0, #80]
 4336 002c 5BB9     		cbnz	r3, .L404
 4337              		.loc 1 3497 0 is_stmt 0 discriminator 1
 4338              	@ 3497 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 4339 002e 72B6     		CPSID i   
 4340 0030 BFF34F8F 	DSB       
 4341 0034 BFF36F8F 	ISB         
 4342              	@ 0 "" 2
 4343              		.thumb
 4344 0038 1A48     		ldr	r0, .L408+4
 4345              	.LVL415:
 4346 003a 40F6A952 		movw	r2, #3497
 4347 003e 1A49     		ldr	r1, .L408+8
 4348 0040 1A4B     		ldr	r3, .L408+12
 4349 0042 9847     		blx	r3
 4350              	.LVL416:
 4351              	.L405:
 4352              		.loc 1 3497 0 discriminator 2
 4353 0044 FEE7     		b	.L405
 4354              	.LVL417:
 4355              	.L404:
3498:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3499:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3500:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3501:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			task? */
3502:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4356              		.loc 1 3502 0 is_stmt 1
 4357 0046 C16A     		ldr	r1, [r0, #44]
3498:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4358              		.loc 1 3498 0
 4359 0048 013B     		subs	r3, r3, #1
 4360              		.loc 1 3502 0
 4361 004a C26C     		ldr	r2, [r0, #76]
3498:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4362              		.loc 1 3498 0
 4363 004c 0365     		str	r3, [r0, #80]
 4364              		.loc 1 3502 0
 4365 004e 9142     		cmp	r1, r2
 4366 0050 D9D0     		beq	.L406
3503:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3504:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3505:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4367              		.loc 1 3505 0
 4368 0052 002B     		cmp	r3, #0
 4369 0054 D7D1     		bne	.L406
3506:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3507:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3508:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3509:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3510:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3511:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					the	holding task from the ready	list. */
3512:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 4370              		.loc 1 3512 0
 4371 0056 051D     		adds	r5, r0, #4
 4372 0058 2846     		mov	r0, r5
 4373              	.LVL418:
 4374 005a 154B     		ldr	r3, .L408+16
 4375 005c 9847     		blx	r3
 4376              	.LVL419:
 4377 005e 1549     		ldr	r1, .L408+20
 4378 0060 154A     		ldr	r2, .L408+24
 4379 0062 50B9     		cbnz	r0, .L407
3513:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3514:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4380              		.loc 1 3514 0
 4381 0064 E66A     		ldr	r6, [r4, #44]
 4382 0066 1423     		movs	r3, #20
 4383 0068 7343     		muls	r3, r6, r3
 4384 006a CB58     		ldr	r3, [r1, r3]
 4385 006c 2BB9     		cbnz	r3, .L407
 4386              		.loc 1 3514 0 is_stmt 0 discriminator 1
 4387 006e 0123     		movs	r3, #1
 4388 0070 1068     		ldr	r0, [r2]
 4389 0072 B340     		lsls	r3, r3, r6
 4390 0074 20EA0303 		bic	r3, r0, r3
 4391 0078 1360     		str	r3, [r2]
 4392              	.L407:
3515:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3516:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
3517:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3518:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3519:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3520:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3521:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3522:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					new	ready list. */
3523:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3524:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4393              		.loc 1 3524 0 is_stmt 1
 4394 007a E36C     		ldr	r3, [r4, #76]
 4395 007c E362     		str	r3, [r4, #44]
3525:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3526:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3527:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3528:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					running to give back the mutex. */
3529:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4396              		.loc 1 3529 0
 4397 007e C3F11000 		rsb	r0, r3, #16
 4398 0082 A061     		str	r0, [r4, #24]
3530:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4399              		.loc 1 3530 0
 4400 0084 0124     		movs	r4, #1
 4401              	.LVL420:
 4402 0086 1068     		ldr	r0, [r2]
 4403 0088 04FA03F6 		lsl	r6, r4, r3
 4404 008c 3043     		orrs	r0, r0, r6
 4405 008e 1060     		str	r0, [r2]
 4406 0090 1420     		movs	r0, #20
 4407 0092 00FB0310 		mla	r0, r0, r3, r1
 4408 0096 2946     		mov	r1, r5
 4409 0098 084B     		ldr	r3, .L408+28
 4410 009a 9847     		blx	r3
 4411              	.LVL421:
3531:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3532:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3533:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					This is only actually required in the corner case whereby
3534:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3535:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					in an order different to that in which they were taken.
3536:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3537:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3538:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3539:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					a task is waiting on it or not. */
3540:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					xReturn = pdTRUE;
 4412              		.loc 1 3540 0
 4413 009c 2046     		mov	r0, r4
 4414              	.LVL422:
3541:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3542:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
3543:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3544:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3545:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3546:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3547:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3548:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3549:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3550:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3551:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3552:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3553:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3554:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3555:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3556:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3557:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
3558:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 4415              		.loc 1 3558 0
 4416 009e 70BD     		pop	{r4, r5, r6, pc}
 4417              	.LVL423:
 4418              	.L409:
 4419              		.align	2
 4420              	.L408:
 4421 00a0 00000000 		.word	.LANCHOR5
 4422 00a4 00000000 		.word	.LC0
 4423 00a8 00000000 		.word	.LANCHOR43
 4424 00ac 00000000 		.word	printf
 4425 00b0 00000000 		.word	uxListRemove
 4426 00b4 00000000 		.word	.LANCHOR11
 4427 00b8 00000000 		.word	.LANCHOR17
 4428 00bc 00000000 		.word	vListInsertEnd
 4429              		.cfi_endproc
 4430              	.LFE46:
 4432              		.section	.text.vTaskList,"ax",%progbits
 4433              		.align	1
 4434              		.global	vTaskList
 4435              		.thumb
 4436              		.thumb_func
 4438              	vTaskList:
 4439              	.LFB48:
3559:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3560:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3561:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3562:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3563:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3564:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3565:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskEnterCritical( void )
3566:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3567:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3568:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3569:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3570:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3571:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3572:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3573:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3574:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3575:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3576:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3577:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3578:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			critical section. */
3579:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3580:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3581:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3582:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3583:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3584:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3585:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3586:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3587:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3588:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3589:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3590:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3591:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3592:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3593:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3594:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3595:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskExitCritical( void )
3596:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3597:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3598:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3599:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3600:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3601:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3602:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3603:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3604:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3605:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3606:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3607:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
3608:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3609:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3610:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3611:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3612:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3613:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3614:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3615:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3616:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3617:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3618:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3619:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3620:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3621:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3622:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3623:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3624:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3625:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3626:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3627:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3628:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3629:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3630:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	size_t x;
3631:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3632:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Start by copying the entire string. */
3633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3634:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3635:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3636:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		printed out. */
3637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3638:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3639:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3640:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3641:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3642:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Terminate. */
3643:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3644:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3645:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Return the new end of string. */
3646:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3647:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3648:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3649:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3650:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3651:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3652:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3653:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3654:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3655:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4440              		.loc 1 3655 0
 4441              		.cfi_startproc
 4442              		@ args = 0, pretend = 0, frame = 8
 4443              		@ frame_needed = 0, uses_anonymous_args = 0
 4444              	.LVL424:
 4445 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 4446              	.LCFI34:
 4447              		.cfi_def_cfa_offset 40
 4448              		.cfi_offset 4, -24
 4449              		.cfi_offset 5, -20
 4450              		.cfi_offset 6, -16
 4451              		.cfi_offset 7, -12
 4452              		.cfi_offset 8, -8
 4453              		.cfi_offset 14, -4
3656:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3657:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3658:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	char cStatus;
3659:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3660:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/*
3661:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * PLEASE NOTE:
3662:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 *
3663:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3664:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3665:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * scheduler.
3666:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 *
3667:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3668:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3669:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * displays task names, states and stack usage.
3670:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 *
3671:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3672:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3673:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3674:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3675:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3676:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3677:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * snprintf() implementation!).
3678:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 *
3679:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3680:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3681:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * through a call to vTaskList().
3682:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 */
3683:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3684:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3685:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3686:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3687:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3688:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3689:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		function is executing. */
3690:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 4454              		.loc 1 3690 0
 4455 0004 2E4B     		ldr	r3, .L423
3686:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4456              		.loc 1 3686 0
 4457 0006 0026     		movs	r6, #0
3655:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4458              		.loc 1 3655 0
 4459 0008 0446     		mov	r4, r0
3686:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4460              		.loc 1 3686 0
 4461 000a 0670     		strb	r6, [r0]
 4462              		.loc 1 3690 0
 4463 000c 1A68     		ldr	r2, [r3]
 4464 000e 0292     		str	r2, [sp, #8]
3691:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3692:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Allocate an array index for each task. */
3693:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 4465              		.loc 1 3693 0
 4466 0010 40F66D62 		movw	r2, #3693
 4467 0014 1868     		ldr	r0, [r3]
 4468              	.LVL425:
 4469 0016 2B49     		ldr	r1, .L423+4
 4470 0018 2B4B     		ldr	r3, .L423+8
 4471 001a 4001     		lsls	r0, r0, #5
 4472 001c 9847     		blx	r3
 4473              	.LVL426:
3694:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3695:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
 4474              		.loc 1 3695 0
 4475 001e 0546     		mov	r5, r0
 4476 0020 0028     		cmp	r0, #0
 4477 0022 49D0     		beq	.L410
3696:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3697:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Generate the (binary) data. */
3698:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 4478              		.loc 1 3698 0
 4479 0024 0299     		ldr	r1, [sp, #8]
 4480 0026 3246     		mov	r2, r6
 4481 0028 284B     		ldr	r3, .L423+12
 4482 002a 9847     		blx	r3
 4483              	.LVL427:
 4484 002c 0290     		str	r0, [sp, #8]
3699:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3700:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3701:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 4485              		.loc 1 3701 0
 4486 002e 0396     		str	r6, [sp, #12]
 4487              	.L412:
 4488              		.loc 1 3701 0 is_stmt 0 discriminator 1
 4489 0030 039A     		ldr	r2, [sp, #12]
 4490 0032 029B     		ldr	r3, [sp, #8]
 4491 0034 9A42     		cmp	r2, r3
 4492 0036 39D2     		bcs	.L421
3702:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3703:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 4493              		.loc 1 3703 0 is_stmt 1
 4494 0038 039B     		ldr	r3, [sp, #12]
 4495              	.LBB109:
 4496              	.LBB110:
3633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4497              		.loc 1 3633 0
 4498 003a 2046     		mov	r0, r4
3637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4499              		.loc 1 3637 0
 4500 003c 244E     		ldr	r6, .L423+16
 4501              	.LBE110:
 4502              	.LBE109:
 4503              		.loc 1 3703 0
 4504 003e 05EB4313 		add	r3, r5, r3, lsl #5
 4505 0042 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4506 0044 013B     		subs	r3, r3, #1
 4507 0046 DBB2     		uxtb	r3, r3
 4508 0048 032B     		cmp	r3, #3
 4509 004a 8EBF     		itee	hi
 4510 004c 4FF00008 		movhi	r8, #0
 4511 0050 204A     		ldrls	r2, .L423+20
 4512 0052 12F80380 		ldrbls	r8, [r2, r3]	@ zero_extendqisi2
 4513              	.LVL428:
3704:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3705:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3706:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 										break;
3707:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3708:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3709:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 										break;
3710:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3711:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3712:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 										break;
3713:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3714:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
3715:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 										break;
3716:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3717:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					default:			/* Should not get here, but it is included
3718:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 										to prevent static checking errors. */
3719:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 										cStatus = 0x00;
3720:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 										break;
3721:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3722:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3723:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
3724:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				can be printed in tabular form more easily. */
3725:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 4514              		.loc 1 3725 0
 4515 0056 039B     		ldr	r3, [sp, #12]
 4516              	.LVL429:
 4517 0058 05EB4313 		add	r3, r5, r3, lsl #5
 4518              	.LVL430:
 4519              	.LBB112:
 4520              	.LBB111:
3633:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4521              		.loc 1 3633 0
 4522 005c 5968     		ldr	r1, [r3, #4]
 4523 005e 1E4B     		ldr	r3, .L423+24
 4524 0060 9847     		blx	r3
 4525              	.LVL431:
3637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4526              		.loc 1 3637 0
 4527 0062 2046     		mov	r0, r4
 4528 0064 B047     		blx	r6
 4529              	.LVL432:
 4530              	.L414:
 4531 0066 0E28     		cmp	r0, #14
 4532 0068 03D8     		bhi	.L422
3639:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
 4533              		.loc 1 3639 0
 4534 006a 2023     		movs	r3, #32
 4535 006c 2354     		strb	r3, [r4, r0]
3637:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4536              		.loc 1 3637 0
 4537 006e 0130     		adds	r0, r0, #1
 4538              	.LVL433:
 4539 0070 F9E7     		b	.L414
 4540              	.L422:
3643:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4541              		.loc 1 3643 0
 4542 0072 0023     		movs	r3, #0
 4543 0074 2718     		adds	r7, r4, r0
 4544 0076 2354     		strb	r3, [r4, r0]
 4545              	.LVL434:
 4546              	.LBE111:
 4547              	.LBE112:
3726:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3727:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Write the rest of the string. */
3728:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 4548              		.loc 1 3728 0
 4549 0078 039B     		ldr	r3, [sp, #12]
 4550 007a 0398     		ldr	r0, [sp, #12]
 4551              	.LVL435:
 4552 007c 0399     		ldr	r1, [sp, #12]
 4553 007e 05EB4313 		add	r3, r5, r3, lsl #5
 4554 0082 05EB4010 		add	r0, r5, r0, lsl #5
 4555 0086 828B     		ldrh	r2, [r0, #28]
 4556 0088 05EB4111 		add	r1, r5, r1, lsl #5
 4557 008c 0092     		str	r2, [sp]
 4558 008e 3846     		mov	r0, r7
 4559 0090 124C     		ldr	r4, .L423+28
 4560              	.LVL436:
 4561 0092 8A68     		ldr	r2, [r1, #8]
 4562 0094 0192     		str	r2, [sp, #4]
 4563 0096 4246     		mov	r2, r8
 4564 0098 1B69     		ldr	r3, [r3, #16]
 4565 009a 1149     		ldr	r1, .L423+32
 4566 009c A047     		blx	r4
 4567              	.LVL437:
3729:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 4568              		.loc 1 3729 0
 4569 009e 3846     		mov	r0, r7
 4570 00a0 B047     		blx	r6
 4571              	.LVL438:
3701:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
 4572              		.loc 1 3701 0
 4573 00a2 039B     		ldr	r3, [sp, #12]
 4574 00a4 0133     		adds	r3, r3, #1
 4575 00a6 0393     		str	r3, [sp, #12]
 4576              		.loc 1 3729 0
 4577 00a8 3C18     		adds	r4, r7, r0
 4578              	.LVL439:
 4579 00aa C1E7     		b	.L412
 4580              	.LVL440:
 4581              	.L421:
3730:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3731:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3732:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Free the array again. */
3733:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
 4582              		.loc 1 3733 0
 4583 00ac 2846     		mov	r0, r5
 4584 00ae 40F69562 		movw	r2, #3733
 4585 00b2 0449     		ldr	r1, .L423+4
 4586 00b4 0B4B     		ldr	r3, .L423+36
 4587 00b6 9847     		blx	r3
 4588              	.LVL441:
 4589              	.L410:
3734:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3735:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3736:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3737:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3738:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3739:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 4590              		.loc 1 3739 0
 4591 00b8 04B0     		add	sp, sp, #16
 4592              	.LCFI35:
 4593              		.cfi_def_cfa_offset 24
 4594              		@ sp needed
 4595 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4596              	.LVL442:
 4597              	.L424:
 4598 00be 00BF     		.align	2
 4599              	.L423:
 4600 00c0 00000000 		.word	.LANCHOR10
 4601 00c4 00000000 		.word	.LANCHOR44
 4602 00c8 00000000 		.word	pvPortMalloc1
 4603 00cc 00000000 		.word	uxTaskGetSystemState
 4604 00d0 00000000 		.word	strlen
 4605 00d4 00000000 		.word	.LANCHOR45
 4606 00d8 00000000 		.word	strcpy
 4607 00dc 00000000 		.word	sprintf
 4608 00e0 25000000 		.word	.LC2
 4609 00e4 00000000 		.word	vPortFree1
 4610              		.cfi_endproc
 4611              	.LFE48:
 4613              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4614              		.align	1
 4615              		.global	uxTaskResetEventItemValue
 4616              		.thumb
 4617              		.thumb_func
 4619              	uxTaskResetEventItemValue:
 4620              	.LFB49:
3740:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3741:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
3742:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*----------------------------------------------------------*/
3743:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3744:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3745:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3746:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3747:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
3748:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3749:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3750:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3751:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3752:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3753:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3754:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3755:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3756:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		#endif
3757:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3758:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/*
3759:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * PLEASE NOTE:
3760:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 *
3761:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3762:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3763:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * scheduler.
3764:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 *
3765:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3766:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3767:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3768:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * in both absolute and percentage terms.
3769:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 *
3770:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3771:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3772:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3773:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3774:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3775:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3776:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * a full snprintf() implementation!).
3777:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 *
3778:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3779:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3780:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3781:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		 */
3782:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3783:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3784:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3785:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3786:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3787:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		function is executing. */
3788:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3789:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3790:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* Allocate an array index for each task. */
3791:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3792:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3793:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3794:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3795:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Generate the (binary) data. */
3796:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3797:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3798:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* For percentage calculations. */
3799:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			ulTotalTime /= 100UL;
3800:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3801:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Avoid divide by zero errors. */
3802:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( ulTotalTime > 0 )
3803:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3804:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
3805:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3806:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3807:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
3808:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
3809:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3810:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3811:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3812:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* Write the task name to the string, padding with
3813:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					spaces so it can be printed in tabular form more
3814:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					easily. */
3815:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3816:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3817:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3818:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3819:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3820:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
3821:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
3822:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
3823:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#else
3824:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
3825:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3826:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							printf() library can be used. */
3827:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3828:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
3829:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#endif
3830:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3831:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
3832:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3833:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* If the percentage is zero here then the task has
3834:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						consumed less than 1% of the total run time. */
3835:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3836:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
3837:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
3838:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
3839:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#else
3840:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
3841:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3842:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							printf() library can be used. */
3843:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3844:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
3845:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						#endif
3846:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3847:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3848:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3849:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3850:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3851:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3852:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3853:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3854:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3855:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3856:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Free the array again. */
3857:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
3858:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3859:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		else
3860:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3861:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3862:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3863:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
3864:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3865:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
3866:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3867:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3868:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
3869:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** {
 4621              		.loc 1 3869 0
 4622              		.cfi_startproc
 4623              		@ args = 0, pretend = 0, frame = 0
 4624              		@ frame_needed = 0, uses_anonymous_args = 0
 4625              		@ link register save eliminated.
3870:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** TickType_t uxReturn;
3871:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3872:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4626              		.loc 1 3872 0
 4627 0000 044B     		ldr	r3, .L426
 4628 0002 1A68     		ldr	r2, [r3]
 4629 0004 9069     		ldr	r0, [r2, #24]
 4630              	.LVL443:
3873:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3874:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3875:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	queues and semaphores. */
3876:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4631              		.loc 1 3876 0
 4632 0006 1A68     		ldr	r2, [r3]
 4633 0008 1B68     		ldr	r3, [r3]
 4634 000a DB6A     		ldr	r3, [r3, #44]
 4635 000c C3F11003 		rsb	r3, r3, #16
 4636 0010 9361     		str	r3, [r2, #24]
3877:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3878:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	return uxReturn;
3879:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** }
 4637              		.loc 1 3879 0
 4638 0012 7047     		bx	lr
 4639              	.L427:
 4640              		.align	2
 4641              	.L426:
 4642 0014 00000000 		.word	.LANCHOR5
 4643              		.cfi_endproc
 4644              	.LFE49:
 4646              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4647              		.align	1
 4648              		.global	pvTaskIncrementMutexHeldCount
 4649              		.thumb
 4650              		.thumb_func
 4652              	pvTaskIncrementMutexHeldCount:
 4653              	.LFB50:
3880:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3881:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3882:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3883:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3884:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3885:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4654              		.loc 1 3885 0
 4655              		.cfi_startproc
 4656              		@ args = 0, pretend = 0, frame = 0
 4657              		@ frame_needed = 0, uses_anonymous_args = 0
 4658              		@ link register save eliminated.
3886:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3887:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
3888:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 4659              		.loc 1 3888 0
 4660 0000 044B     		ldr	r3, .L433
 4661 0002 1A68     		ldr	r2, [r3]
 4662 0004 1AB1     		cbz	r2, .L429
3889:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3890:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4663              		.loc 1 3890 0
 4664 0006 1968     		ldr	r1, [r3]
 4665 0008 0A6D     		ldr	r2, [r1, #80]
 4666 000a 0132     		adds	r2, r2, #1
 4667 000c 0A65     		str	r2, [r1, #80]
 4668              	.L429:
3891:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3892:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3893:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return pxCurrentTCB;
 4669              		.loc 1 3893 0
 4670 000e 1868     		ldr	r0, [r3]
3894:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 4671              		.loc 1 3894 0
 4672 0010 7047     		bx	lr
 4673              	.L434:
 4674 0012 00BF     		.align	2
 4675              	.L433:
 4676 0014 00000000 		.word	.LANCHOR5
 4677              		.cfi_endproc
 4678              	.LFE50:
 4680              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4681              		.align	1
 4682              		.global	ulTaskNotifyTake
 4683              		.thumb
 4684              		.thumb_func
 4686              	ulTaskNotifyTake:
 4687              	.LFB51:
3895:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3896:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3897:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
3898:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3899:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
3900:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3901:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
3902:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4688              		.loc 1 3902 0
 4689              		.cfi_startproc
 4690              		@ args = 0, pretend = 0, frame = 0
 4691              		@ frame_needed = 0, uses_anonymous_args = 0
 4692              	.LVL444:
 4693 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4694              	.LCFI36:
 4695              		.cfi_def_cfa_offset 24
 4696              		.cfi_offset 4, -24
 4697              		.cfi_offset 5, -20
 4698              		.cfi_offset 6, -16
 4699              		.cfi_offset 7, -12
 4700              		.cfi_offset 8, -8
 4701              		.cfi_offset 14, -4
3903:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
3904:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	uint32_t ulReturn;
3905:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3906:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
3907:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3908:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
3909:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4702              		.loc 1 3909 0
 4703 0004 214C     		ldr	r4, .L450
3902:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 4704              		.loc 1 3902 0
 4705 0006 8046     		mov	r8, r0
3906:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4706              		.loc 1 3906 0
 4707 0008 214E     		ldr	r6, .L450+4
3902:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 4708              		.loc 1 3902 0
 4709 000a 0F46     		mov	r7, r1
3906:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4710              		.loc 1 3906 0
 4711 000c B047     		blx	r6
 4712              	.LVL445:
 4713              		.loc 1 3909 0
 4714 000e 2368     		ldr	r3, [r4]
 4715 0010 5B6D     		ldr	r3, [r3, #84]
 4716 0012 0BBB     		cbnz	r3, .L437
3910:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3911:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
3912:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 4717              		.loc 1 3912 0
 4718 0014 0125     		movs	r5, #1
 4719 0016 2368     		ldr	r3, [r4]
 4720 0018 83F85850 		strb	r5, [r3, #88]
3913:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3914:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4721              		.loc 1 3914 0
 4722 001c E7B1     		cbz	r7, .L437
3915:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3916:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The task is going to block.  First it must be removed
3917:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					from the ready list. */
3918:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 4723              		.loc 1 3918 0
 4724 001e 2068     		ldr	r0, [r4]
 4725 0020 1C4B     		ldr	r3, .L450+8
 4726 0022 0430     		adds	r0, r0, #4
 4727 0024 9847     		blx	r3
 4728              	.LVL446:
 4729 0026 38B9     		cbnz	r0, .L439
3919:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3920:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* The current task must be in a ready list, so there is
3921:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						no need to check, and the port reset macro can be called
3922:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						directly. */
3923:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 4730              		.loc 1 3923 0
 4731 0028 2168     		ldr	r1, [r4]
 4732 002a 1B4A     		ldr	r2, .L450+12
 4733 002c C96A     		ldr	r1, [r1, #44]
 4734 002e 1368     		ldr	r3, [r2]
 4735 0030 8D40     		lsls	r5, r5, r1
 4736 0032 23EA0505 		bic	r5, r3, r5
 4737 0036 1560     		str	r5, [r2]
 4738              	.L439:
3924:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3925:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
3926:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3927:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3928:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3929:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3930:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
3931:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3932:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 4739              		.loc 1 3932 0
 4740 0038 7B1C     		adds	r3, r7, #1
 4741 003a 05D1     		bne	.L440
3933:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
3934:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* Add the task to the suspended task list instead
3935:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							of a delayed task list to ensure the task is not
3936:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							woken by a timing event.  It will block
3937:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							indefinitely. */
3938:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 4742              		.loc 1 3938 0
 4743 003c 2168     		ldr	r1, [r4]
 4744 003e 1748     		ldr	r0, .L450+16
 4745 0040 0431     		adds	r1, r1, #4
 4746 0042 174B     		ldr	r3, .L450+20
 4747 0044 9847     		blx	r3
 4748              	.LVL447:
 4749 0046 04E0     		b	.L441
 4750              	.L440:
3939:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
3940:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						else
3941:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
3942:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* Calculate the time at which the task should be
3943:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							woken if no notification events occur.  This may
3944:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3945:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							handle it. */
3946:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 4751              		.loc 1 3946 0
 4752 0048 164B     		ldr	r3, .L450+24
 4753 004a 1868     		ldr	r0, [r3]
 4754              	.LVL448:
3947:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 4755              		.loc 1 3947 0
 4756 004c 164B     		ldr	r3, .L450+28
 4757 004e 3844     		add	r0, r0, r7
 4758              	.LVL449:
 4759 0050 9847     		blx	r3
 4760              	.LVL450:
 4761              	.L441:
3948:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
3949:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3950:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
3951:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
3952:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* Calculate the time at which the task should be
3953:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							woken if the event does not occur.  This may
3954:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3955:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							handle it. */
3956:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
3957:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
3958:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
3959:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
3960:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3961:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
3962:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3963:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
3964:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					section (some will yield immediately, others wait until the
3965:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					critical section exits) - but it is not something that
3966:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					application code should ever do. */
3967:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					portYIELD_WITHIN_API();
 4762              		.loc 1 3967 0
 4763              	@ 3967 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 4764 0052 00DF     		SWI 0     
 4765 0054 BFF36F8F 	ISB         
 4766              	@ 0 "" 2
 4767              		.thumb
 4768              	.L437:
3968:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3969:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
3970:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3971:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3972:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3973:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3974:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3975:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3976:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3977:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3978:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
3979:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4769              		.loc 1 3979 0
 4770 0058 144D     		ldr	r5, .L450+32
 4771 005a A847     		blx	r5
 4772              	.LVL451:
3980:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3981:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
 4773              		.loc 1 3981 0
 4774 005c B047     		blx	r6
 4775              	.LVL452:
3982:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
3983:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
3984:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4776              		.loc 1 3984 0
 4777 005e 2268     		ldr	r2, [r4]
 4778 0060 0A4B     		ldr	r3, .L450
 4779 0062 566D     		ldr	r6, [r2, #84]
 4780              	.LVL453:
3985:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
3986:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( ulReturn != 0UL )
 4781              		.loc 1 3986 0
 4782 0064 56B1     		cbz	r6, .L442
3987:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3988:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4783              		.loc 1 3988 0
 4784 0066 B8F1000F 		cmp	r8, #0
 4785 006a 03D0     		beq	.L443
3989:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3990:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4786              		.loc 1 3990 0
 4787 006c 0022     		movs	r2, #0
 4788 006e 1B68     		ldr	r3, [r3]
 4789 0070 5A65     		str	r2, [r3, #84]
 4790 0072 03E0     		b	.L442
 4791              	.L443:
3991:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3992:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
3993:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
3994:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( pxCurrentTCB->ulNotifiedValue )--;
 4792              		.loc 1 3994 0
 4793 0074 1A68     		ldr	r2, [r3]
 4794 0076 536D     		ldr	r3, [r2, #84]
 4795 0078 013B     		subs	r3, r3, #1
 4796 007a 5365     		str	r3, [r2, #84]
 4797              	.L442:
3995:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
3996:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
3997:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
3998:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
3999:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4000:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4001:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4002:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 4798              		.loc 1 4002 0
 4799 007c 0022     		movs	r2, #0
 4800 007e 2368     		ldr	r3, [r4]
 4801 0080 83F85820 		strb	r2, [r3, #88]
4003:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
4004:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4802              		.loc 1 4004 0
 4803 0084 A847     		blx	r5
 4804              	.LVL454:
4005:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4006:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return ulReturn;
4007:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 4805              		.loc 1 4007 0
 4806 0086 3046     		mov	r0, r6
 4807 0088 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4808              	.LVL455:
 4809              	.L451:
 4810              		.align	2
 4811              	.L450:
 4812 008c 00000000 		.word	.LANCHOR5
 4813 0090 00000000 		.word	vPortEnterCritical
 4814 0094 00000000 		.word	uxListRemove
 4815 0098 00000000 		.word	.LANCHOR17
 4816 009c 00000000 		.word	.LANCHOR3
 4817 00a0 00000000 		.word	vListInsertEnd
 4818 00a4 00000000 		.word	.LANCHOR6
 4819 00a8 00000000 		.word	prvAddCurrentTaskToDelayedList
 4820 00ac 00000000 		.word	vPortExitCritical
 4821              		.cfi_endproc
 4822              	.LFE51:
 4824              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4825              		.align	1
 4826              		.global	xTaskNotifyWait
 4827              		.thumb
 4828              		.thumb_func
 4830              	xTaskNotifyWait:
 4831              	.LFB52:
4008:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4009:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4010:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4012:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4013:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4014:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4015:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4832              		.loc 1 4015 0
 4833              		.cfi_startproc
 4834              		@ args = 0, pretend = 0, frame = 0
 4835              		@ frame_needed = 0, uses_anonymous_args = 0
 4836              	.LVL456:
 4837 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4838              	.LCFI37:
 4839              		.cfi_def_cfa_offset 32
 4840              		.cfi_offset 3, -32
 4841              		.cfi_offset 4, -28
 4842              		.cfi_offset 5, -24
 4843              		.cfi_offset 6, -20
 4844              		.cfi_offset 7, -16
 4845              		.cfi_offset 8, -12
 4846              		.cfi_offset 9, -8
 4847              		.cfi_offset 14, -4
4016:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
4017:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn;
4018:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4019:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
4020:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
4021:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4022:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB->eNotifyState != eNotified )
 4848              		.loc 1 4022 0
 4849 0004 2A4C     		ldr	r4, .L468
4015:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 4850              		.loc 1 4015 0
 4851 0006 9946     		mov	r9, r3
4019:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4852              		.loc 1 4019 0
 4853 0008 2A4D     		ldr	r5, .L468+4
4015:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TickType_t xTimeToWake;
 4854              		.loc 1 4015 0
 4855 000a 0646     		mov	r6, r0
 4856 000c 0F46     		mov	r7, r1
 4857 000e 9046     		mov	r8, r2
4019:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
 4858              		.loc 1 4019 0
 4859 0010 A847     		blx	r5
 4860              	.LVL457:
 4861              		.loc 1 4022 0
 4862 0012 2368     		ldr	r3, [r4]
 4863 0014 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4864 0018 022B     		cmp	r3, #2
 4865 001a 29D0     		beq	.L454
4023:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4024:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4025:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4026:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				clear the value to zero. */
4027:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 4866              		.loc 1 4027 0
 4867 001c 2368     		ldr	r3, [r4]
 4868 001e 5A6D     		ldr	r2, [r3, #84]
 4869 0020 22EA0600 		bic	r0, r2, r6
4028:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4029:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4030:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 4870              		.loc 1 4030 0
 4871 0024 0126     		movs	r6, #1
 4872              	.LVL458:
4027:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 4873              		.loc 1 4027 0
 4874 0026 5865     		str	r0, [r3, #84]
 4875              		.loc 1 4030 0
 4876 0028 2368     		ldr	r3, [r4]
 4877 002a 83F85860 		strb	r6, [r3, #88]
4031:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4032:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4878              		.loc 1 4032 0
 4879 002e B9F1000F 		cmp	r9, #0
 4880 0032 1DD0     		beq	.L454
4033:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4034:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The task is going to block.  First it must be removed
4035:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					from the	ready list. */
4036:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 4881              		.loc 1 4036 0
 4882 0034 2068     		ldr	r0, [r4]
 4883 0036 204B     		ldr	r3, .L468+8
 4884 0038 0430     		adds	r0, r0, #4
 4885 003a 9847     		blx	r3
 4886              	.LVL459:
 4887 003c 38B9     		cbnz	r0, .L456
4037:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4038:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* The current task must be in a ready list, so there is
4039:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						no need to check, and the port reset macro can be called
4040:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						directly. */
4041:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 4888              		.loc 1 4041 0
 4889 003e 2168     		ldr	r1, [r4]
 4890 0040 1E4B     		ldr	r3, .L468+12
 4891 0042 C96A     		ldr	r1, [r1, #44]
 4892 0044 1A68     		ldr	r2, [r3]
 4893 0046 8E40     		lsls	r6, r6, r1
 4894 0048 22EA0606 		bic	r6, r2, r6
 4895 004c 1E60     		str	r6, [r3]
 4896              	.L456:
4042:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4043:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
4044:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4045:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4046:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4047:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4048:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
4049:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4050:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 4897              		.loc 1 4050 0
 4898 004e B9F1FF3F 		cmp	r9, #-1
 4899 0052 05D1     		bne	.L457
4051:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
4052:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* Add the task to the suspended task list instead
4053:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							of a delayed task list to ensure the task is not
4054:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							woken by a timing event.  It will block
4055:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							indefinitely. */
4056:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 4900              		.loc 1 4056 0
 4901 0054 2168     		ldr	r1, [r4]
 4902 0056 1A48     		ldr	r0, .L468+16
 4903 0058 0431     		adds	r1, r1, #4
 4904 005a 1A4B     		ldr	r3, .L468+20
 4905 005c 9847     		blx	r3
 4906              	.LVL460:
 4907 005e 04E0     		b	.L458
 4908              	.L457:
4057:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
4058:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						else
4059:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						{
4060:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* Calculate the time at which the task should be
4061:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							woken if no notification events occur.  This may
4062:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4063:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							handle it. */
4064:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 4909              		.loc 1 4064 0
 4910 0060 194B     		ldr	r3, .L468+24
 4911 0062 1868     		ldr	r0, [r3]
 4912              	.LVL461:
4065:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 4913              		.loc 1 4065 0
 4914 0064 194B     		ldr	r3, .L468+28
 4915 0066 4844     		add	r0, r0, r9
 4916              	.LVL462:
 4917 0068 9847     		blx	r3
 4918              	.LVL463:
 4919              	.L458:
4066:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						}
4067:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4068:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
4069:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4070:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							/* Calculate the time at which the task should be
4071:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							woken if the event does not occur.  This may
4072:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4073:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							handle it. */
4074:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
4075:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
4076:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4077:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
4078:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4079:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4080:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4081:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4082:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4083:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					critical section exits) - but it is not something that
4084:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					application code should ever do. */
4085:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					portYIELD_WITHIN_API();
 4920              		.loc 1 4085 0
 4921              	@ 4085 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 4922 006a 00DF     		SWI 0     
 4923 006c BFF36F8F 	ISB         
 4924              	@ 0 "" 2
 4925              		.thumb
 4926              	.L454:
4086:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4087:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
4088:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4089:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4090:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4091:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4092:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
4093:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4094:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4095:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4096:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
4097:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4927              		.loc 1 4097 0
 4928 0070 174E     		ldr	r6, .L468+32
 4929 0072 B047     		blx	r6
 4930              	.LVL464:
4098:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4099:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
 4931              		.loc 1 4099 0
 4932 0074 A847     		blx	r5
 4933              	.LVL465:
4100:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
4101:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4102:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4103:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 4934              		.loc 1 4103 0
 4935 0076 B8F1000F 		cmp	r8, #0
 4936 007a 03D0     		beq	.L459
4104:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4105:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4106:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				have changed. */
4107:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 4937              		.loc 1 4107 0
 4938 007c 2368     		ldr	r3, [r4]
 4939 007e 5B6D     		ldr	r3, [r3, #84]
 4940 0080 C8F80030 		str	r3, [r8]
 4941              	.L459:
4108:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4109:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4110:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If eNotifyValue is set then either the task never entered the
4111:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4112:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4113:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			unblocked because of a timeout. */
4114:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 4942              		.loc 1 4114 0
 4943 0084 2368     		ldr	r3, [r4]
 4944 0086 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4945 008a 012B     		cmp	r3, #1
4115:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4116:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* A notification was not received. */
4117:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = pdFALSE;
4118:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4119:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
4120:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4121:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* A notification was already pending or a notification was
4122:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				received while the task was waiting. */
4123:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4124:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = pdTRUE;
4125:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4126:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4127:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 4946              		.loc 1 4127 0
 4947 008c 4FF00002 		mov	r2, #0
4124:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 4948              		.loc 1 4124 0
 4949 0090 1BBF     		ittet	ne
 4950 0092 0125     		movne	r5, #1
4123:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = pdTRUE;
 4951              		.loc 1 4123 0
 4952 0094 064B     		ldrne	r3, .L468
4117:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 4953              		.loc 1 4117 0
 4954 0096 0025     		moveq	r5, #0
4123:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = pdTRUE;
 4955              		.loc 1 4123 0
 4956 0098 1B68     		ldrne	r3, [r3]
 4957 009a 1EBF     		ittt	ne
 4958 009c 596D     		ldrne	r1, [r3, #84]
 4959 009e B943     		bicne	r1, r1, r7
 4960 00a0 5965     		strne	r1, [r3, #84]
 4961              	.LVL466:
 4962              		.loc 1 4127 0
 4963 00a2 2368     		ldr	r3, [r4]
 4964 00a4 83F85820 		strb	r2, [r3, #88]
4128:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
4129:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4965              		.loc 1 4129 0
 4966 00a8 B047     		blx	r6
 4967              	.LVL467:
4130:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4131:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
4132:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 4968              		.loc 1 4132 0
 4969 00aa 2846     		mov	r0, r5
 4970 00ac BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4971              	.LVL468:
 4972              	.L469:
 4973              		.align	2
 4974              	.L468:
 4975 00b0 00000000 		.word	.LANCHOR5
 4976 00b4 00000000 		.word	vPortEnterCritical
 4977 00b8 00000000 		.word	uxListRemove
 4978 00bc 00000000 		.word	.LANCHOR17
 4979 00c0 00000000 		.word	.LANCHOR3
 4980 00c4 00000000 		.word	vListInsertEnd
 4981 00c8 00000000 		.word	.LANCHOR6
 4982 00cc 00000000 		.word	prvAddCurrentTaskToDelayedList
 4983 00d0 00000000 		.word	vPortExitCritical
 4984              		.cfi_endproc
 4985              	.LFE52:
 4987              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4988              		.align	1
 4989              		.global	xTaskGenericNotify
 4990              		.thumb
 4991              		.thumb_func
 4993              	xTaskGenericNotify:
 4994              	.LFB53:
4133:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4134:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4135:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
4136:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4137:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4138:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4139:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4140:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 4995              		.loc 1 4140 0
 4996              		.cfi_startproc
 4997              		@ args = 0, pretend = 0, frame = 0
 4998              		@ frame_needed = 0, uses_anonymous_args = 0
 4999              	.LVL469:
 5000 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5001              	.LCFI38:
 5002              		.cfi_def_cfa_offset 24
 5003              		.cfi_offset 3, -24
 5004              		.cfi_offset 4, -20
 5005              		.cfi_offset 5, -16
 5006              		.cfi_offset 6, -12
 5007              		.cfi_offset 7, -8
 5008              		.cfi_offset 14, -4
 5009              		.loc 1 4140 0
 5010 0002 0F46     		mov	r7, r1
 5011 0004 1646     		mov	r6, r2
 5012 0006 1D46     		mov	r5, r3
4141:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * pxTCB;
4142:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4143:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4144:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4145:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5013              		.loc 1 4145 0
 5014 0008 0446     		mov	r4, r0
 5015 000a 58B9     		cbnz	r0, .L471
 5016              		.loc 1 4145 0 is_stmt 0 discriminator 1
 5017              	@ 4145 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5018 000c 72B6     		CPSID i   
 5019 000e BFF34F8F 	DSB       
 5020 0012 BFF36F8F 	ISB         
 5021              	@ 0 "" 2
 5022              		.thumb
 5023 0016 2B48     		ldr	r0, .L490
 5024              	.LVL470:
 5025 0018 41F23102 		movw	r2, #4145
 5026              	.LVL471:
 5027 001c 2A49     		ldr	r1, .L490+4
 5028              	.LVL472:
 5029 001e 2B4B     		ldr	r3, .L490+8
 5030              	.LVL473:
 5031 0020 9847     		blx	r3
 5032              	.LVL474:
 5033              	.L472:
 5034 0022 FEE7     		b	.L472
 5035              	.LVL475:
 5036              	.L471:
4146:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4147:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4148:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
 5037              		.loc 1 4148 0 is_stmt 1
 5038 0024 2A4B     		ldr	r3, .L490+12
 5039              	.LVL476:
 5040 0026 9847     		blx	r3
 5041              	.LVL477:
4149:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
4150:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5042              		.loc 1 4150 0
 5043 0028 0DB1     		cbz	r5, .L473
4151:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4152:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5044              		.loc 1 4152 0
 5045 002a 636D     		ldr	r3, [r4, #84]
 5046 002c 2B60     		str	r3, [r5]
 5047              	.L473:
4153:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4154:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4155:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
4156:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4157:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 5048              		.loc 1 4157 0
 5049 002e 0223     		movs	r3, #2
4155:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 5050              		.loc 1 4155 0
 5051 0030 94F85850 		ldrb	r5, [r4, #88]	@ zero_extendqisi2
 5052              	.LVL478:
4158:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4159:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			switch( eAction )
 5053              		.loc 1 4159 0
 5054 0034 721E     		subs	r2, r6, #1
4155:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 5055              		.loc 1 4155 0
 5056 0036 EDB2     		uxtb	r5, r5
 5057              	.LVL479:
4157:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 5058              		.loc 1 4157 0
 5059 0038 84F85830 		strb	r3, [r4, #88]
 5060              		.loc 1 4159 0
 5061 003c 032A     		cmp	r2, #3
 5062 003e 0DD8     		bhi	.L474
 5063 0040 DFE802F0 		tbb	[pc, r2]
 5064              	.L476:
 5065 0044 02       		.byte	(.L475-.L476)/2
 5066 0045 05       		.byte	(.L477-.L476)/2
 5067 0046 0B       		.byte	(.L489-.L476)/2
 5068 0047 09       		.byte	(.L479-.L476)/2
 5069              		.p2align 1
 5070              	.L475:
4160:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4161:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eSetBits	:
4162:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5071              		.loc 1 4162 0
 5072 0048 616D     		ldr	r1, [r4, #84]
 5073 004a 0F43     		orrs	r7, r7, r1
 5074              	.LVL480:
 5075 004c 05E0     		b	.L489
 5076              	.LVL481:
 5077              	.L477:
4163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
4164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eIncrement	:
4166:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5078              		.loc 1 4166 0
 5079 004e 636D     		ldr	r3, [r4, #84]
 5080 0050 0133     		adds	r3, r3, #1
 5081 0052 6365     		str	r3, [r4, #84]
4167:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
 5082              		.loc 1 4167 0
 5083 0054 02E0     		b	.L474
 5084              	.L479:
4168:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4169:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4170:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4171:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
4172:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4173:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4174:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 5085              		.loc 1 4174 0
 5086 0056 022D     		cmp	r5, #2
 5087 0058 2ED0     		beq	.L485
 5088              	.LVL482:
 5089              	.L489:
4175:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4176:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5090              		.loc 1 4176 0
 5091 005a 6765     		str	r7, [r4, #84]
 5092              	.L474:
4177:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4178:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
4179:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4180:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* The value could not be written to the task. */
4181:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						xReturn = pdFAIL;
4182:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4183:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
4184:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4185:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eNoAction:
4186:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The task is being notified without its notify value being
4187:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					updated. */
4188:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
4189:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4190:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4191:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_NOTIFY();
4192:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4193:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4194:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			notification then unblock it now. */
4195:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 5093              		.loc 1 4195 0
 5094 005c 012D     		cmp	r5, #1
 5095 005e 01D0     		beq	.L481
 5096              	.L484:
4140:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * pxTCB;
 5097              		.loc 1 4140 0
 5098 0060 0125     		movs	r5, #1
 5099              	.LVL483:
 5100 0062 2AE0     		b	.L480
 5101              	.LVL484:
 5102              	.L481:
4196:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4197:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 5103              		.loc 1 4197 0
 5104 0064 261D     		adds	r6, r4, #4
 5105 0066 1B4B     		ldr	r3, .L490+16
 5106 0068 3046     		mov	r0, r6
 5107 006a 9847     		blx	r3
 5108              	.LVL485:
4198:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5109              		.loc 1 4198 0
 5110 006c 1A49     		ldr	r1, .L490+20
 5111 006e E26A     		ldr	r2, [r4, #44]
 5112 0070 0B68     		ldr	r3, [r1]
 5113 0072 05FA02F0 		lsl	r0, r5, r2
 5114 0076 0343     		orrs	r3, r3, r0
 5115 0078 1420     		movs	r0, #20
 5116 007a 0B60     		str	r3, [r1]
 5117 007c 3146     		mov	r1, r6
 5118 007e 174B     		ldr	r3, .L490+24
 5119 0080 00FB0230 		mla	r0, r0, r2, r3
 5120 0084 164B     		ldr	r3, .L490+28
 5121 0086 9847     		blx	r3
 5122              	.LVL486:
4199:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4200:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The task should not have been on an event list. */
4201:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5123              		.loc 1 4201 0
 5124 0088 A36A     		ldr	r3, [r4, #40]
 5125 008a 5BB1     		cbz	r3, .L482
 5126              		.loc 1 4201 0 is_stmt 0 discriminator 1
 5127              	@ 4201 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5128 008c 72B6     		CPSID i   
 5129 008e BFF34F8F 	DSB       
 5130 0092 BFF36F8F 	ISB         
 5131              	@ 0 "" 2
 5132              		.thumb
 5133 0096 0B48     		ldr	r0, .L490
 5134 0098 41F26902 		movw	r2, #4201
 5135 009c 0A49     		ldr	r1, .L490+4
 5136 009e 0B4B     		ldr	r3, .L490+8
 5137 00a0 9847     		blx	r3
 5138              	.LVL487:
 5139              	.L483:
 5140              		.loc 1 4201 0 discriminator 2
 5141 00a2 FEE7     		b	.L483
 5142              	.L482:
4202:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4203:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4204:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4205:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4206:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4207:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4208:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4209:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					because it will automatically get reset to a new value when
4210:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4211:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4212:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4213:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4214:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					earliest possible time. */
4215:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4216:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4217:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				#endif
4218:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4219:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5143              		.loc 1 4219 0 is_stmt 1
 5144 00a4 0F4B     		ldr	r3, .L490+32
 5145 00a6 E26A     		ldr	r2, [r4, #44]
 5146 00a8 1B68     		ldr	r3, [r3]
 5147 00aa DB6A     		ldr	r3, [r3, #44]
 5148 00ac 9A42     		cmp	r2, r3
 5149 00ae D7D9     		bls	.L484
4220:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4221:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The notified task has a priority above the currently
4222:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					executing task so a yield is required. */
4223:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5150              		.loc 1 4223 0
 5151              	@ 4223 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5152 00b0 00DF     		SWI 0     
 5153 00b2 BFF36F8F 	ISB         
 5154              	@ 0 "" 2
 5155              		.thumb
 5156 00b6 00E0     		b	.L480
 5157              	.LVL488:
 5158              	.L485:
4181:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 5159              		.loc 1 4181 0
 5160 00b8 0025     		movs	r5, #0
 5161              	.LVL489:
 5162              	.L480:
4224:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4225:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
4226:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4227:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4228:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4229:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4230:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
4231:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4232:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4233:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4234:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
4235:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5163              		.loc 1 4235 0
 5164 00ba 0B4B     		ldr	r3, .L490+36
 5165 00bc 9847     		blx	r3
 5166              	.LVL490:
4236:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4237:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
4238:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 5167              		.loc 1 4238 0
 5168 00be 2846     		mov	r0, r5
 5169 00c0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5170              	.LVL491:
 5171              	.L491:
 5172 00c2 00BF     		.align	2
 5173              	.L490:
 5174 00c4 00000000 		.word	.LC0
 5175 00c8 00000000 		.word	.LANCHOR46
 5176 00cc 00000000 		.word	printf
 5177 00d0 00000000 		.word	vPortEnterCritical
 5178 00d4 00000000 		.word	uxListRemove
 5179 00d8 00000000 		.word	.LANCHOR17
 5180 00dc 00000000 		.word	.LANCHOR11
 5181 00e0 00000000 		.word	vListInsertEnd
 5182 00e4 00000000 		.word	.LANCHOR5
 5183 00e8 00000000 		.word	vPortExitCritical
 5184              		.cfi_endproc
 5185              	.LFE53:
 5187              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5188              		.align	1
 5189              		.global	xTaskGenericNotifyFromISR
 5190              		.thumb
 5191              		.thumb_func
 5193              	xTaskGenericNotifyFromISR:
 5194              	.LFB54:
4239:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4240:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4241:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
4242:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4243:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4244:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4245:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4246:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 5195              		.loc 1 4246 0
 5196              		.cfi_startproc
 5197              		@ args = 4, pretend = 0, frame = 8
 5198              		@ frame_needed = 0, uses_anonymous_args = 0
 5199              	.LVL492:
 5200 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 5201              	.LCFI39:
 5202              		.cfi_def_cfa_offset 40
 5203              		.cfi_offset 4, -28
 5204              		.cfi_offset 5, -24
 5205              		.cfi_offset 6, -20
 5206              		.cfi_offset 7, -16
 5207              		.cfi_offset 8, -12
 5208              		.cfi_offset 9, -8
 5209              		.cfi_offset 14, -4
 5210              		.loc 1 4246 0
 5211 0004 0A9F     		ldr	r7, [sp, #40]
4247:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * pxTCB;
4248:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4249:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4250:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4251:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4252:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5212              		.loc 1 4252 0
 5213 0006 0446     		mov	r4, r0
 5214 0008 58B9     		cbnz	r0, .L493
 5215              		.loc 1 4252 0 is_stmt 0 discriminator 1
 5216              	@ 4252 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5217 000a 72B6     		CPSID i   
 5218 000c BFF34F8F 	DSB       
 5219 0010 BFF36F8F 	ISB         
 5220              	@ 0 "" 2
 5221              		.thumb
 5222 0014 3548     		ldr	r0, .L519
 5223              	.LVL493:
 5224 0016 41F29C02 		movw	r2, #4252
 5225              	.LVL494:
 5226 001a 3549     		ldr	r1, .L519+4
 5227              	.LVL495:
 5228 001c 354B     		ldr	r3, .L519+8
 5229              	.LVL496:
 5230 001e 9847     		blx	r3
 5231              	.LVL497:
 5232              	.L494:
 5233 0020 FEE7     		b	.L494
 5234              	.LVL498:
 5235              	.L493:
 5236              	.LBB113:
 5237              	.LBB114:
 163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     ulCPSR &= portINTERRUPT_ENABLE_BIT;
 5238              		.loc 2 163 0 is_stmt 1
 5239              	@ 163 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h"
 5240 0022 EFF30080 		MRS r0, CPSR
 5241              	@ 0 "" 2
 5242              	.LVL499:
 5243              		.thumb
 5244 0026 0190     		str	r0, [sp, #4]
 164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     portDISABLE_INTERRUPTS();
 5245              		.loc 2 164 0
 5246 0028 0198     		ldr	r0, [sp, #4]
 5247 002a 00F08000 		and	r0, r0, #128
 5248 002e 0190     		str	r0, [sp, #4]
 165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     return ulCPSR;
 5249              		.loc 2 165 0
 5250              	@ 165 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h"
 5251 0030 72B6     		CPSID i   
 5252 0032 BFF34F8F 	DSB       
 5253 0036 BFF36F8F 	ISB         
 5254              	@ 0 "" 2
 5255              		.loc 2 166 0
 5256              		.thumb
 5257 003a 019E     		ldr	r6, [sp, #4]
 5258              	.LBE114:
 5259              	.LBE113:
4253:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4254:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4255:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4256:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4257:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4258:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4259:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4260:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4261:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4262:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4263:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4264:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4265:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4266:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4267:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4268:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		provided on the following link:
4269:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4270:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4271:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4272:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4273:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4274:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4275:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
4276:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5260              		.loc 1 4276 0
 5261 003c 0BB1     		cbz	r3, .L495
4277:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4278:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5262              		.loc 1 4278 0
 5263 003e 606D     		ldr	r0, [r4, #84]
 5264 0040 1860     		str	r0, [r3]
 5265              	.L495:
4279:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4280:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4281:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
4282:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 5266              		.loc 1 4282 0
 5267 0042 0223     		movs	r3, #2
 5268              	.LVL500:
4281:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 5269              		.loc 1 4281 0
 5270 0044 94F85850 		ldrb	r5, [r4, #88]	@ zero_extendqisi2
4283:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4284:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			switch( eAction )
 5271              		.loc 1 4284 0
 5272 0048 013A     		subs	r2, r2, #1
 5273              	.LVL501:
4281:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 5274              		.loc 1 4281 0
 5275 004a EDB2     		uxtb	r5, r5
 5276              	.LVL502:
4282:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 5277              		.loc 1 4282 0
 5278 004c 84F85830 		strb	r3, [r4, #88]
 5279              		.loc 1 4284 0
 5280 0050 032A     		cmp	r2, #3
 5281 0052 0DD8     		bhi	.L496
 5282 0054 DFE802F0 		tbb	[pc, r2]
 5283              	.L498:
 5284 0058 02       		.byte	(.L497-.L498)/2
 5285 0059 05       		.byte	(.L499-.L498)/2
 5286 005a 0B       		.byte	(.L517-.L498)/2
 5287 005b 09       		.byte	(.L501-.L498)/2
 5288              		.p2align 1
 5289              	.L497:
4285:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4286:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eSetBits	:
4287:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5290              		.loc 1 4287 0
 5291 005c 636D     		ldr	r3, [r4, #84]
 5292 005e 1943     		orrs	r1, r1, r3
 5293              	.LVL503:
 5294 0060 05E0     		b	.L517
 5295              	.LVL504:
 5296              	.L499:
4288:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
4289:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4290:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eIncrement	:
4291:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5297              		.loc 1 4291 0
 5298 0062 636D     		ldr	r3, [r4, #84]
 5299 0064 0133     		adds	r3, r3, #1
 5300 0066 6365     		str	r3, [r4, #84]
4292:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
 5301              		.loc 1 4292 0
 5302 0068 02E0     		b	.L496
 5303              	.L501:
4293:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4294:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4295:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4296:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
4297:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4298:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4299:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 5304              		.loc 1 4299 0
 5305 006a 022D     		cmp	r5, #2
 5306 006c 37D0     		beq	.L510
 5307              	.LVL505:
 5308              	.L517:
4300:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4301:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5309              		.loc 1 4301 0
 5310 006e 6165     		str	r1, [r4, #84]
 5311              	.L496:
4302:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4303:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					else
4304:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4305:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						/* The value could not be written to the task. */
4306:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						xReturn = pdFAIL;
4307:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4308:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
4309:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4310:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				case eNoAction :
4311:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The task is being notified without its notify value being
4312:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					updated. */
4313:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					break;
4314:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4315:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4316:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4317:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4318:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4319:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			notification then unblock it now. */
4320:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 5312              		.loc 1 4320 0
 5313 0070 012D     		cmp	r5, #1
 5314 0072 01D0     		beq	.L503
 5315              	.LVL506:
 5316              	.L508:
4246:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * pxTCB;
 5317              		.loc 1 4246 0
 5318 0074 0120     		movs	r0, #1
 5319 0076 33E0     		b	.L502
 5320              	.LVL507:
 5321              	.L503:
4321:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4322:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The task should not have been on an event list. */
4323:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5322              		.loc 1 4323 0
 5323 0078 A36A     		ldr	r3, [r4, #40]
 5324 007a 5BB1     		cbz	r3, .L504
 5325              		.loc 1 4323 0 is_stmt 0 discriminator 1
 5326              	@ 4323 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5327 007c 72B6     		CPSID i   
 5328 007e BFF34F8F 	DSB       
 5329 0082 BFF36F8F 	ISB         
 5330              	@ 0 "" 2
 5331              		.thumb
 5332 0086 1948     		ldr	r0, .L519
 5333 0088 41F2E302 		movw	r2, #4323
 5334 008c 1849     		ldr	r1, .L519+4
 5335 008e 194B     		ldr	r3, .L519+8
 5336 0090 9847     		blx	r3
 5337              	.LVL508:
 5338              	.L505:
 5339              		.loc 1 4323 0 discriminator 2
 5340 0092 FEE7     		b	.L505
 5341              	.L504:
4324:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4325:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5342              		.loc 1 4325 0 is_stmt 1
 5343 0094 184B     		ldr	r3, .L519+12
 5344 0096 DFF87880 		ldr	r8, .L519+36
 5345 009a 1B68     		ldr	r3, [r3]
 5346 009c 83B9     		cbnz	r3, .L506
4326:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4327:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 5347              		.loc 1 4327 0
 5348 009e 04F10409 		add	r9, r4, #4
 5349 00a2 164B     		ldr	r3, .L519+16
 5350 00a4 4846     		mov	r0, r9
 5351 00a6 9847     		blx	r3
 5352              	.LVL509:
4328:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5353              		.loc 1 4328 0
 5354 00a8 1549     		ldr	r1, .L519+20
 5355 00aa E26A     		ldr	r2, [r4, #44]
 5356 00ac 1420     		movs	r0, #20
 5357 00ae 0B68     		ldr	r3, [r1]
 5358 00b0 9540     		lsls	r5, r5, r2
 5359              	.LVL510:
 5360 00b2 1D43     		orrs	r5, r5, r3
 5361 00b4 134B     		ldr	r3, .L519+24
 5362 00b6 0D60     		str	r5, [r1]
 5363 00b8 4946     		mov	r1, r9
 5364 00ba 00FB0230 		mla	r0, r0, r2, r3
 5365 00be 02E0     		b	.L518
 5366              	.LVL511:
 5367              	.L506:
4329:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4330:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
4331:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4332:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4333:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4334:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5368              		.loc 1 4334 0
 5369 00c0 1148     		ldr	r0, .L519+28
 5370 00c2 04F11801 		add	r1, r4, #24
 5371              	.LVL512:
 5372              	.L518:
 5373 00c6 C047     		blx	r8
 5374              	.LVL513:
4335:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4336:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4337:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5375              		.loc 1 4337 0
 5376 00c8 104B     		ldr	r3, .L519+32
 5377 00ca E26A     		ldr	r2, [r4, #44]
 5378 00cc 1B68     		ldr	r3, [r3]
 5379 00ce DB6A     		ldr	r3, [r3, #44]
 5380 00d0 9A42     		cmp	r2, r3
 5381 00d2 CFD9     		bls	.L508
4338:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4339:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The notified task has a priority above the currently
4340:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					executing task so a yield is required. */
4341:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5382              		.loc 1 4341 0
 5383 00d4 002F     		cmp	r7, #0
 5384 00d6 CDD0     		beq	.L508
4342:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4343:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5385              		.loc 1 4343 0
 5386 00d8 0120     		movs	r0, #1
 5387 00da 3860     		str	r0, [r7]
 5388 00dc 00E0     		b	.L502
 5389              	.LVL514:
 5390              	.L510:
4306:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
 5391              		.loc 1 4306 0
 5392 00de 0020     		movs	r0, #0
 5393              	.LVL515:
 5394              	.L502:
4344:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4345:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4346:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
4347:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4348:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4349:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4350:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4351:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
4352:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 5395              		.loc 1 4352 0
 5396 00e0 06B9     		cbnz	r6, .L509
 5397              		.loc 1 4352 0 is_stmt 0 discriminator 1
 5398              	@ 4352 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5399 00e2 62B6     		CPSIE i   
 5400              	
 5401              	@ 0 "" 2
 5402              		.thumb
 5403              	.L509:
4353:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4354:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
4355:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 5404              		.loc 1 4355 0 is_stmt 1
 5405 00e4 03B0     		add	sp, sp, #12
 5406              	.LCFI40:
 5407              		.cfi_def_cfa_offset 28
 5408              		@ sp needed
 5409 00e6 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5410              	.LVL516:
 5411              	.L520:
 5412 00ea 00BF     		.align	2
 5413              	.L519:
 5414 00ec 00000000 		.word	.LC0
 5415 00f0 00000000 		.word	.LANCHOR47
 5416 00f4 00000000 		.word	printf
 5417 00f8 00000000 		.word	.LANCHOR19
 5418 00fc 00000000 		.word	uxListRemove
 5419 0100 00000000 		.word	.LANCHOR17
 5420 0104 00000000 		.word	.LANCHOR11
 5421 0108 00000000 		.word	.LANCHOR4
 5422 010c 00000000 		.word	.LANCHOR5
 5423 0110 00000000 		.word	vListInsertEnd
 5424              		.cfi_endproc
 5425              	.LFE54:
 5427              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5428              		.align	1
 5429              		.global	vTaskNotifyGiveFromISR
 5430              		.thumb
 5431              		.thumb_func
 5433              	vTaskNotifyGiveFromISR:
 5434              	.LFB55:
4356:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4357:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4358:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
4359:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4360:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4361:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4362:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4363:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 5435              		.loc 1 4363 0
 5436              		.cfi_startproc
 5437              		@ args = 0, pretend = 0, frame = 8
 5438              		@ frame_needed = 0, uses_anonymous_args = 0
 5439              	.LVL517:
 5440 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 5441              	.LCFI41:
 5442              		.cfi_def_cfa_offset 40
 5443              		.cfi_offset 4, -28
 5444              		.cfi_offset 5, -24
 5445              		.cfi_offset 6, -20
 5446              		.cfi_offset 7, -16
 5447              		.cfi_offset 8, -12
 5448              		.cfi_offset 9, -8
 5449              		.cfi_offset 14, -4
 5450              		.loc 1 4363 0
 5451 0004 0E46     		mov	r6, r1
4364:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t * pxTCB;
4365:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4366:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4367:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4368:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5452              		.loc 1 4368 0
 5453 0006 0446     		mov	r4, r0
 5454 0008 58B9     		cbnz	r0, .L522
 5455              		.loc 1 4368 0 is_stmt 0 discriminator 1
 5456              	@ 4368 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5457 000a 72B6     		CPSID i   
 5458 000c BFF34F8F 	DSB       
 5459 0010 BFF36F8F 	ISB         
 5460              	@ 0 "" 2
 5461              		.thumb
 5462 0014 2A48     		ldr	r0, .L536
 5463              	.LVL518:
 5464 0016 41F21012 		movw	r2, #4368
 5465 001a 2A49     		ldr	r1, .L536+4
 5466              	.LVL519:
 5467 001c 2A4B     		ldr	r3, .L536+8
 5468 001e 9847     		blx	r3
 5469              	.LVL520:
 5470              	.L523:
 5471 0020 FEE7     		b	.L523
 5472              	.LVL521:
 5473              	.L522:
 5474              	.LBB115:
 5475              	.LBB116:
 163:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     ulCPSR &= portINTERRUPT_ENABLE_BIT;
 5476              		.loc 2 163 0 is_stmt 1
 5477              	@ 163 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h"
 5478 0022 EFF30083 		MRS r3, CPSR
 5479              	@ 0 "" 2
 5480              		.thumb
 5481 0026 0193     		str	r3, [sp, #4]
 164:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     portDISABLE_INTERRUPTS();
 5482              		.loc 2 164 0
 5483 0028 019B     		ldr	r3, [sp, #4]
 5484 002a 03F08003 		and	r3, r3, #128
 5485 002e 0193     		str	r3, [sp, #4]
 165:/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h ****     return ulCPSR;
 5486              		.loc 2 165 0
 5487              	@ 165 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacro.h"
 5488 0030 72B6     		CPSID i   
 5489 0032 BFF34F8F 	DSB       
 5490 0036 BFF36F8F 	ISB         
 5491              	@ 0 "" 2
 5492              		.thumb
 5493              	.LBE116:
 5494              	.LBE115:
4369:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4370:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4371:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4372:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4373:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4374:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4375:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4376:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4377:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4378:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4379:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4380:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4381:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4382:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4383:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4384:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		provided on the following link:
4385:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4386:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4387:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4388:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4389:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4390:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4391:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
4392:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
4393:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 5495              		.loc 1 4393 0
 5496 003a 0223     		movs	r3, #2
 5497              	.LBB118:
 5498              	.LBB117:
 5499              		.loc 2 166 0
 5500 003c 019F     		ldr	r7, [sp, #4]
 5501              	.LBE117:
 5502              	.LBE118:
4392:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 5503              		.loc 1 4392 0
 5504 003e 90F85850 		ldrb	r5, [r0, #88]	@ zero_extendqisi2
 5505              		.loc 1 4393 0
 5506 0042 80F85830 		strb	r3, [r0, #88]
4392:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 5507              		.loc 1 4392 0
 5508 0046 EDB2     		uxtb	r5, r5
 5509              	.LVL522:
4394:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4395:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4396:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			semaphore. */
4397:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5510              		.loc 1 4397 0
 5511 0048 436D     		ldr	r3, [r0, #84]
4398:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4399:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4400:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4401:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4402:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			notification then unblock it now. */
4403:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 5512              		.loc 1 4403 0
 5513 004a 012D     		cmp	r5, #1
4397:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
 5514              		.loc 1 4397 0
 5515 004c 03F10103 		add	r3, r3, #1
 5516 0050 4365     		str	r3, [r0, #84]
 5517              		.loc 1 4403 0
 5518 0052 30D1     		bne	.L525
4404:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4405:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				/* The task should not have been on an event list. */
4406:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5519              		.loc 1 4406 0
 5520 0054 836A     		ldr	r3, [r0, #40]
 5521 0056 5BB1     		cbz	r3, .L526
 5522              		.loc 1 4406 0 is_stmt 0 discriminator 1
 5523              	@ 4406 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5524 0058 72B6     		CPSID i   
 5525 005a BFF34F8F 	DSB       
 5526 005e BFF36F8F 	ISB         
 5527              	@ 0 "" 2
 5528              		.thumb
 5529 0062 1748     		ldr	r0, .L536
 5530              	.LVL523:
 5531 0064 41F23612 		movw	r2, #4406
 5532 0068 1649     		ldr	r1, .L536+4
 5533              	.LVL524:
 5534 006a 174B     		ldr	r3, .L536+8
 5535 006c 9847     		blx	r3
 5536              	.LVL525:
 5537              	.L527:
 5538              		.loc 1 4406 0 discriminator 2
 5539 006e FEE7     		b	.L527
 5540              	.LVL526:
 5541              	.L526:
4407:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4408:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5542              		.loc 1 4408 0 is_stmt 1
 5543 0070 164B     		ldr	r3, .L536+12
 5544 0072 DFF87080 		ldr	r8, .L536+36
 5545 0076 1B68     		ldr	r3, [r3]
 5546 0078 83B9     		cbnz	r3, .L528
4409:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4410:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 5547              		.loc 1 4410 0
 5548 007a 00F10409 		add	r9, r0, #4
 5549 007e 144B     		ldr	r3, .L536+16
 5550 0080 4846     		mov	r0, r9
 5551              	.LVL527:
 5552 0082 9847     		blx	r3
 5553              	.LVL528:
4411:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5554              		.loc 1 4411 0
 5555 0084 1349     		ldr	r1, .L536+20
 5556 0086 E26A     		ldr	r2, [r4, #44]
 5557 0088 1420     		movs	r0, #20
 5558 008a 0B68     		ldr	r3, [r1]
 5559 008c 9540     		lsls	r5, r5, r2
 5560              	.LVL529:
 5561 008e 1D43     		orrs	r5, r5, r3
 5562 0090 114B     		ldr	r3, .L536+24
 5563 0092 0D60     		str	r5, [r1]
 5564 0094 4946     		mov	r1, r9
 5565 0096 00FB0230 		mla	r0, r0, r2, r3
 5566 009a 02E0     		b	.L535
 5567              	.LVL530:
 5568              	.L528:
4412:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4413:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
4414:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4415:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4416:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4417:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5569              		.loc 1 4417 0
 5570 009c 0F48     		ldr	r0, .L536+28
 5571              	.LVL531:
 5572 009e 04F11801 		add	r1, r4, #24
 5573              	.LVL532:
 5574              	.L535:
 5575 00a2 C047     		blx	r8
 5576              	.LVL533:
4418:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4419:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4420:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5577              		.loc 1 4420 0
 5578 00a4 0E4B     		ldr	r3, .L536+32
 5579 00a6 E26A     		ldr	r2, [r4, #44]
 5580 00a8 1B68     		ldr	r3, [r3]
 5581 00aa DB6A     		ldr	r3, [r3, #44]
 5582 00ac 9A42     		cmp	r2, r3
 5583 00ae 02D9     		bls	.L525
4421:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4422:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					/* The notified task has a priority above the currently
4423:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					executing task so a yield is required. */
4424:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5584              		.loc 1 4424 0
 5585 00b0 0EB1     		cbz	r6, .L525
4425:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					{
4426:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5586              		.loc 1 4426 0
 5587 00b2 0123     		movs	r3, #1
 5588 00b4 3360     		str	r3, [r6]
 5589              	.L525:
4427:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					}
4428:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4429:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				else
4430:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				{
4431:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				}
4433:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4434:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
4435:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 5590              		.loc 1 4435 0
 5591 00b6 07B9     		cbnz	r7, .L521
 5592              		.loc 1 4435 0 is_stmt 0 discriminator 1
 5593              	@ 4435 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c" 1
 5594 00b8 62B6     		CPSIE i   
 5595              	
 5596              	@ 0 "" 2
 5597              		.thumb
 5598              	.L521:
4436:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 5599              		.loc 1 4436 0 is_stmt 1
 5600 00ba 03B0     		add	sp, sp, #12
 5601              	.LCFI42:
 5602              		.cfi_def_cfa_offset 28
 5603              		@ sp needed
 5604 00bc BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5605              	.LVL534:
 5606              	.L537:
 5607              		.align	2
 5608              	.L536:
 5609 00c0 00000000 		.word	.LC0
 5610 00c4 00000000 		.word	.LANCHOR48
 5611 00c8 00000000 		.word	printf
 5612 00cc 00000000 		.word	.LANCHOR19
 5613 00d0 00000000 		.word	uxListRemove
 5614 00d4 00000000 		.word	.LANCHOR17
 5615 00d8 00000000 		.word	.LANCHOR11
 5616 00dc 00000000 		.word	.LANCHOR4
 5617 00e0 00000000 		.word	.LANCHOR5
 5618 00e4 00000000 		.word	vListInsertEnd
 5619              		.cfi_endproc
 5620              	.LFE55:
 5622              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5623              		.align	1
 5624              		.global	xTaskNotifyStateClear
 5625              		.thumb
 5626              		.thumb_func
 5628              	xTaskNotifyStateClear:
 5629              	.LFB56:
4437:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4438:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4439:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4440:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** /*-----------------------------------------------------------*/
4441:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4442:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4443:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4444:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4445:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	{
 5630              		.loc 1 4445 0
 5631              		.cfi_startproc
 5632              		@ args = 0, pretend = 0, frame = 0
 5633              		@ frame_needed = 0, uses_anonymous_args = 0
 5634              	.LVL535:
 5635 0000 38B5     		push	{r3, r4, r5, lr}
 5636              	.LCFI43:
 5637              		.cfi_def_cfa_offset 16
 5638              		.cfi_offset 3, -16
 5639              		.cfi_offset 4, -12
 5640              		.cfi_offset 5, -8
 5641              		.cfi_offset 14, -4
4446:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	TCB_t *pxTCB;
4447:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	BaseType_t xReturn;
4448:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4449:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTask;
4450:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4451:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4452:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		its notification state cleared. */
4453:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( pxTCB );
 5642              		.loc 1 4453 0
 5643 0002 0546     		mov	r5, r0
 5644 0004 08B9     		cbnz	r0, .L539
 5645              		.loc 1 4453 0 is_stmt 0 discriminator 1
 5646 0006 084B     		ldr	r3, .L542
 5647 0008 1D68     		ldr	r5, [r3]
 5648              	.LVL536:
 5649              	.L539:
4454:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4455:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskENTER_CRITICAL();
 5650              		.loc 1 4455 0 is_stmt 1 discriminator 4
 5651 000a 084B     		ldr	r3, .L542+4
 5652 000c 0024     		movs	r4, #0
 5653 000e 9847     		blx	r3
 5654              	.LVL537:
4456:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		{
4457:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			if( pxTCB->eNotifyState == eNotified )
 5655              		.loc 1 4457 0 discriminator 4
 5656 0010 95F85830 		ldrb	r3, [r5, #88]	@ zero_extendqisi2
 5657 0014 022B     		cmp	r3, #2
4458:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4459:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				pxTCB->eNotifyState = eNotWaitingNotification;
4460:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = pdPASS;
4461:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4462:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			else
4463:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			{
4464:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = pdFAIL;
4465:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
4466:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		}
4467:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5658              		.loc 1 4467 0 discriminator 4
 5659 0016 064B     		ldr	r3, .L542+8
4459:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 				xReturn = pdPASS;
 5660              		.loc 1 4459 0 discriminator 4
 5661 0018 04BF     		itt	eq
 5662 001a 85F85840 		strbeq	r4, [r5, #88]
 5663              	.LVL538:
4460:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 			}
 5664              		.loc 1 4460 0 discriminator 4
 5665 001e 0124     		moveq	r4, #1
 5666              	.LVL539:
 5667              		.loc 1 4467 0 discriminator 4
 5668 0020 9847     		blx	r3
 5669              	.LVL540:
4468:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 
4469:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 		return xReturn;
4470:/home/tienluong/workspace/atlantis_fw/platform/os/Source/tasks.c **** 	}
 5670              		.loc 1 4470 0 discriminator 4
 5671 0022 2046     		mov	r0, r4
 5672 0024 38BD     		pop	{r3, r4, r5, pc}
 5673              	.LVL541:
 5674              	.L543:
 5675 0026 00BF     		.align	2
 5676              	.L542:
 5677 0028 00000000 		.word	.LANCHOR5
 5678 002c 00000000 		.word	vPortEnterCritical
 5679 0030 00000000 		.word	vPortExitCritical
 5680              		.cfi_endproc
 5681              	.LFE56:
 5683              		.global	pxCurrentTCB
 5684              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5685              		.align	2
 5686              		.set	.LANCHOR10,. + 0
 5689              	uxCurrentNumberOfTasks:
 5690 0000 00000000 		.space	4
 5691              		.section	.bss.xTickCount,"aw",%nobits
 5692              		.align	2
 5693              		.set	.LANCHOR6,. + 0
 5696              	xTickCount:
 5697 0000 00000000 		.space	4
 5698              		.section	.rodata.__FUNCTION__.6187,"a",%progbits
 5699              		.set	.LANCHOR34,. + 0
 5702              	__FUNCTION__.6187:
 5703 0000 76546173 		.ascii	"vTaskSwitchContext\000"
 5703      6B537769 
 5703      74636843 
 5703      6F6E7465 
 5703      787400
 5704              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5705              		.align	2
 5706              		.set	.LANCHOR0,. + 0
 5709              	pxDelayedTaskList:
 5710 0000 00000000 		.space	4
 5711              		.section	.rodata.__FUNCTION__.6402,"a",%progbits
 5712              		.set	.LANCHOR46,. + 0
 5715              	__FUNCTION__.6402:
 5716 0000 78546173 		.ascii	"xTaskGenericNotify\000"
 5716      6B47656E 
 5716      65726963 
 5716      4E6F7469 
 5716      667900
 5717              		.section	.rodata.__FUNCTION__.6038,"a",%progbits
 5718              		.set	.LANCHOR8,. + 0
 5721              	__FUNCTION__.6038:
 5722 0000 78546173 		.ascii	"xTaskGenericCreate\000"
 5722      6B47656E 
 5722      65726963 
 5722      43726561 
 5722      746500
 5723              		.section	.rodata.__FUNCTION__.6055,"a",%progbits
 5724              		.set	.LANCHOR31,. + 0
 5727              	__FUNCTION__.6055:
 5728 0000 76546173 		.ascii	"vTaskDelayUntil\000"
 5728      6B44656C 
 5728      6179556E 
 5728      74696C00 
 5729              		.section	.rodata.CSWTCH.283,"a",%progbits
 5730              		.set	.LANCHOR45,. + 0
 5733              	CSWTCH.283:
 5734 0000 52       		.byte	82
 5735 0001 42       		.byte	66
 5736 0002 53       		.byte	83
 5737 0003 44       		.byte	68
 5738              		.section	.rodata.__FUNCTION__.6073,"a",%progbits
 5739              		.set	.LANCHOR21,. + 0
 5742              	__FUNCTION__.6073:
 5743 0000 65546173 		.ascii	"eTaskGetState\000"
 5743      6B476574 
 5743      53746174 
 5743      6500
 5744              		.section	.rodata.str1.1,"aMS",%progbits,1
 5745              	.LC0:
 5746 0000 0D0A5B25 		.ascii	"\015\012[%s: %d]: Invalid argument!\015\012\000"
 5746      733A2025 
 5746      645D3A20 
 5746      496E7661 
 5746      6C696420 
 5747              	.LC1:
 5748 0020 49444C45 		.ascii	"IDLE\000"
 5748      00
 5749              	.LC2:
 5750 0025 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 5750      25750925 
 5750      75092575 
 5750      0D0A00
 5751              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5752              		.align	2
 5753              		.set	.LANCHOR5,. + 0
 5756              	pxCurrentTCB:
 5757 0000 00000000 		.space	4
 5758              		.section	.rodata.__FUNCTION__.6422,"a",%progbits
 5759              		.set	.LANCHOR47,. + 0
 5762              	__FUNCTION__.6422:
 5763 0000 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 5763      6B47656E 
 5763      65726963 
 5763      4E6F7469 
 5763      66794672 
 5764              		.section	.rodata.__FUNCTION__.6094,"a",%progbits
 5765              		.set	.LANCHOR22,. + 0
 5768              	__FUNCTION__.6094:
 5769 0000 76546173 		.ascii	"vTaskPrioritySet\000"
 5769      6B507269 
 5769      6F726974 
 5769      79536574 
 5769      00
 5770              		.section	.rodata.__FUNCTION__.6240,"a",%progbits
 5771              		.set	.LANCHOR42,. + 0
 5774              	__FUNCTION__.6240:
 5775 0000 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 5775      6B436865 
 5775      636B466F 
 5775      7254696D 
 5775      654F7574 
 5776              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5777              		.align	2
 5778              		.set	.LANCHOR13,. + 0
 5781              	xDelayedTaskList2:
 5782 0000 00000000 		.space	20
 5782      00000000 
 5782      00000000 
 5782      00000000 
 5782      00000000 
 5783              		.section	.rodata.__FUNCTION__.6113,"a",%progbits
 5784              		.set	.LANCHOR23,. + 0
 5787              	__FUNCTION__.6113:
 5788 0000 76546173 		.ascii	"vTaskResume\000"
 5788      6B526573 
 5788      756D6500 
 5789              		.section	.rodata.__FUNCTION__.6438,"a",%progbits
 5790              		.set	.LANCHOR48,. + 0
 5793              	__FUNCTION__.6438:
 5794 0000 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 5794      6B4E6F74 
 5794      69667947 
 5794      69766546 
 5794      726F6D49 
 5795              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5796              		.align	2
 5797              		.set	.LANCHOR14,. + 0
 5800              	xTasksWaitingTermination:
 5801 0000 00000000 		.space	20
 5801      00000000 
 5801      00000000 
 5801      00000000 
 5801      00000000 
 5802              		.section	.bss.xYieldPending,"aw",%nobits
 5803              		.align	2
 5804              		.set	.LANCHOR29,. + 0
 5807              	xYieldPending:
 5808 0000 00000000 		.space	4
 5809              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5810              		.align	2
 5811              		.set	.LANCHOR1,. + 0
 5814              	xNextTaskUnblockTime:
 5815 0000 00000000 		.space	4
 5816              		.section	.rodata.__FUNCTION__.6127,"a",%progbits
 5817              		.set	.LANCHOR25,. + 0
 5820              	__FUNCTION__.6127:
 5821 0000 76546173 		.ascii	"vTaskStartScheduler\000"
 5821      6B537461 
 5821      72745363 
 5821      68656475 
 5821      6C657200 
 5822              		.section	.rodata.__FUNCTION__.6177,"a",%progbits
 5823              		.set	.LANCHOR26,. + 0
 5826              	__FUNCTION__.6177:
 5827 0000 78546173 		.ascii	"xTaskIncrementTick\000"
 5827      6B496E63 
 5827      72656D65 
 5827      6E745469 
 5827      636B00
 5828              		.section	.bss.uxTasksDeleted,"aw",%nobits
 5829              		.align	2
 5830              		.set	.LANCHOR18,. + 0
 5833              	uxTasksDeleted:
 5834 0000 00000000 		.space	4
 5835              		.section	.rodata.__FUNCTION__.6322,"a",%progbits
 5836              		.set	.LANCHOR33,. + 0
 5839              	__FUNCTION__.6322:
 5840 0000 70727644 		.ascii	"prvDeleteTCB\000"
 5840      656C6574 
 5840      65544342 
 5840      00
 5841              		.section	.rodata.__FUNCTION__.6195,"a",%progbits
 5842              		.set	.LANCHOR36,. + 0
 5845              	__FUNCTION__.6195:
 5846 0000 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 5846      6B506C61 
 5846      63654F6E 
 5846      4576656E 
 5846      744C6973 
 5847              		.section	.rodata.__FUNCTION__.6046,"a",%progbits
 5848              		.set	.LANCHOR20,. + 0
 5851              	__FUNCTION__.6046:
 5852 0000 76546173 		.ascii	"vTaskDelete\000"
 5852      6B44656C 
 5852      65746500 
 5853              		.section	.rodata.__FUNCTION__.6212,"a",%progbits
 5854              		.set	.LANCHOR38,. + 0
 5857              	__FUNCTION__.6212:
 5858 0000 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 5858      6B506C61 
 5858      63654F6E 
 5858      4576656E 
 5858      744C6973 
 5859              		.section	.rodata.__FUNCTION__.6344,"a",%progbits
 5860              		.set	.LANCHOR43,. + 0
 5863              	__FUNCTION__.6344:
 5864 0000 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 5864      6B507269 
 5864      6F726974 
 5864      79446973 
 5864      696E6865 
 5865              		.section	.bss.uxPendedTicks,"aw",%nobits
 5866              		.align	2
 5867              		.set	.LANCHOR28,. + 0
 5870              	uxPendedTicks:
 5871 0000 00000000 		.space	4
 5872              		.section	.rodata.__FUNCTION__.6065,"a",%progbits
 5873              		.set	.LANCHOR32,. + 0
 5876              	__FUNCTION__.6065:
 5877 0000 76546173 		.ascii	"vTaskDelay\000"
 5877      6B44656C 
 5877      617900
 5878              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5879              		.align	2
 5880              		.set	.LANCHOR17,. + 0
 5883              	uxTopReadyPriority:
 5884 0000 00000000 		.space	4
 5885              		.section	.rodata.__FUNCTION__.6362,"a",%progbits
 5886              		.set	.LANCHOR44,. + 0
 5889              	__FUNCTION__.6362:
 5890 0000 76546173 		.ascii	"vTaskList\000"
 5890      6B4C6973 
 5890      7400
 5891              		.section	.bss.xPendingReadyList,"aw",%nobits
 5892              		.align	2
 5893              		.set	.LANCHOR4,. + 0
 5896              	xPendingReadyList:
 5897 0000 00000000 		.space	20
 5897      00000000 
 5897      00000000 
 5897      00000000 
 5897      00000000 
 5898              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5899              		.align	2
 5900              		.set	.LANCHOR7,. + 0
 5903              	pxOverflowDelayedTaskList:
 5904 0000 00000000 		.space	4
 5905              		.section	.rodata.__FUNCTION__.6219,"a",%progbits
 5906              		.set	.LANCHOR39,. + 0
 5909              	__FUNCTION__.6219:
 5910 0000 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 5910      6B52656D 
 5910      6F766546 
 5910      726F6D45 
 5910      76656E74 
 5911              		.section	.rodata.__FUNCTION__.6233,"a",%progbits
 5912              		.set	.LANCHOR41,. + 0
 5915              	__FUNCTION__.6233:
 5916 0000 76546173 		.ascii	"vTaskSetTimeOutState\000"
 5916      6B536574 
 5916      54696D65 
 5916      4F757453 
 5916      74617465 
 5917              		.section	.rodata.__FUNCTION__.6227,"a",%progbits
 5918              		.set	.LANCHOR40,. + 0
 5921              	__FUNCTION__.6227:
 5922 0000 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 5922      6B52656D 
 5922      6F766546 
 5922      726F6D55 
 5922      6E6F7264 
 5923              		.section	.rodata.__FUNCTION__.6100,"a",%progbits
 5924              		.set	.LANCHOR35,. + 0
 5927              	__FUNCTION__.6100:
 5928 0000 76546173 		.ascii	"vTaskSuspend\000"
 5928      6B537573 
 5928      70656E64 
 5928      00
 5929              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5930              		.align	2
 5931              		.set	.LANCHOR19,. + 0
 5934              	uxSchedulerSuspended:
 5935 0000 00000000 		.space	4
 5936              		.section	.rodata.__FUNCTION__.6107,"a",%progbits
 5937              		.set	.LANCHOR2,. + 0
 5940              	__FUNCTION__.6107:
 5941 0000 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 5941      61736B49 
 5941      73546173 
 5941      6B537573 
 5941      70656E64 
 5942              		.section	.rodata.__FUNCTION__.6121,"a",%progbits
 5943              		.set	.LANCHOR24,. + 0
 5946              	__FUNCTION__.6121:
 5947 0000 78546173 		.ascii	"xTaskResumeFromISR\000"
 5947      6B526573 
 5947      756D6546 
 5947      726F6D49 
 5947      535200
 5948              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5949              		.align	2
 5950              		.set	.LANCHOR15,. + 0
 5953              	xSchedulerRunning:
 5954 0000 00000000 		.space	4
 5955              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5956              		.align	2
 5957              		.set	.LANCHOR11,. + 0
 5960              	pxReadyTasksLists:
 5961 0000 00000000 		.space	320
 5961      00000000 
 5961      00000000 
 5961      00000000 
 5961      00000000 
 5962              		.section	.rodata.__FUNCTION__.6140,"a",%progbits
 5963              		.set	.LANCHOR30,. + 0
 5966              	__FUNCTION__.6140:
 5967 0000 78546173 		.ascii	"xTaskResumeAll\000"
 5967      6B526573 
 5967      756D6541 
 5967      6C6C00
 5968              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5969              		.align	2
 5970              		.set	.LANCHOR27,. + 0
 5973              	xNumOfOverflows:
 5974 0000 00000000 		.space	4
 5975              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5976              		.align	2
 5977              		.set	.LANCHOR12,. + 0
 5980              	xDelayedTaskList1:
 5981 0000 00000000 		.space	20
 5981      00000000 
 5981      00000000 
 5981      00000000 
 5981      00000000 
 5982              		.section	.rodata.__FUNCTION__.6299,"a",%progbits
 5983              		.set	.LANCHOR9,. + 0
 5986              	__FUNCTION__.6299:
 5987 0000 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 5987      6C6C6F63 
 5987      61746554 
 5987      4342416E 
 5987      64537461 
 5988              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5989              		.align	2
 5990              		.set	.LANCHOR3,. + 0
 5993              	xSuspendedTaskList:
 5994 0000 00000000 		.space	20
 5994      00000000 
 5994      00000000 
 5994      00000000 
 5994      00000000 
 5995              		.section	.bss.uxTaskNumber,"aw",%nobits
 5996              		.align	2
 5997              		.set	.LANCHOR16,. + 0
 6000              	uxTaskNumber:
 6001 0000 00000000 		.space	4
 6002              		.section	.rodata.__FUNCTION__.6203,"a",%progbits
 6003              		.set	.LANCHOR37,. + 0
 6006              	__FUNCTION__.6203:
 6007 0000 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 6007      6B506C61 
 6007      63654F6E 
 6007      556E6F72 
 6007      64657265 
 6008              		.text
 6009              	.Letext0:
 6010              		.file 3 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 6011              		.file 4 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/machine/_default_types
 6012              		.file 5 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/stdint.h"
 6013              		.file 6 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/include/projdefs.h"
 6014              		.file 7 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/include/list.h"
 6015              		.file 8 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/cc89mUOp.s:19     .text.prvListTaskWithinSingleList:00000000 $t
     /tmp/cc89mUOp.s:23     .text.prvListTaskWithinSingleList:00000000 prvListTaskWithinSingleList
     /tmp/cc89mUOp.s:163    .text.prvResetNextTaskUnblockTime:00000000 $t
     /tmp/cc89mUOp.s:167    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
     /tmp/cc89mUOp.s:202    .text.prvResetNextTaskUnblockTime:0000001c $d
     /tmp/cc89mUOp.s:210    .text.prvTaskIsTaskSuspended:00000000 $t
     /tmp/cc89mUOp.s:214    .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
     /tmp/cc89mUOp.s:274    .text.prvTaskIsTaskSuspended:00000038 $d
     /tmp/cc89mUOp.s:283    .text.prvAddCurrentTaskToDelayedList:00000000 $t
     /tmp/cc89mUOp.s:287    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
     /tmp/cc89mUOp.s:350    .text.prvAddCurrentTaskToDelayedList:00000038 $d
     /tmp/cc89mUOp.s:360    .text.xTaskGenericCreate:00000000 $t
     /tmp/cc89mUOp.s:365    .text.xTaskGenericCreate:00000000 xTaskGenericCreate
     /tmp/cc89mUOp.s:749    .text.xTaskGenericCreate:000001b0 $d
     /tmp/cc89mUOp.s:779    .text.vTaskDelete:00000000 $t
     /tmp/cc89mUOp.s:784    .text.vTaskDelete:00000000 vTaskDelete
     /tmp/cc89mUOp.s:919    .text.vTaskDelete:00000098 $d
     /tmp/cc89mUOp.s:939    .text.eTaskGetState:00000000 $t
     /tmp/cc89mUOp.s:944    .text.eTaskGetState:00000000 eTaskGetState
     /tmp/cc89mUOp.s:1044   .text.eTaskGetState:00000068 $d
     /tmp/cc89mUOp.s:1058   .text.uxTaskPriorityGet:00000000 $t
     /tmp/cc89mUOp.s:1063   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
     /tmp/cc89mUOp.s:1102   .text.uxTaskPriorityGet:00000018 $d
     /tmp/cc89mUOp.s:1109   .text.uxTaskPriorityGetFromISR:00000000 $t
     /tmp/cc89mUOp.s:1114   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
     /tmp/cc89mUOp.s:1177   .text.uxTaskPriorityGetFromISR:0000002c $d
     /tmp/cc89mUOp.s:1182   .text.vTaskPrioritySet:00000000 $t
     /tmp/cc89mUOp.s:1187   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
     /tmp/cc89mUOp.s:1354   .text.vTaskPrioritySet:000000c4 $d
     /tmp/cc89mUOp.s:1368   .text.vTaskResume:00000000 $t
     /tmp/cc89mUOp.s:1373   .text.vTaskResume:00000000 vTaskResume
     /tmp/cc89mUOp.s:1470   .text.vTaskResume:00000070 $d
     /tmp/cc89mUOp.s:1485   .text.xTaskResumeFromISR:00000000 $t
     /tmp/cc89mUOp.s:1490   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
     /tmp/cc89mUOp.s:1637   .text.xTaskResumeFromISR:0000009c $d
     /tmp/cc89mUOp.s:1652   .text.vTaskStartScheduler:00000000 $t
     /tmp/cc89mUOp.s:1657   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
     /tmp/cc89mUOp.s:1750   .text.vTaskStartScheduler:00000064 $d
     /tmp/cc89mUOp.s:2646   .text.prvIdleTask:00000000 prvIdleTask
     /tmp/cc89mUOp.s:1765   .text.vTaskEndScheduler:00000000 $t
     /tmp/cc89mUOp.s:1770   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
     /tmp/cc89mUOp.s:1800   .text.vTaskEndScheduler:00000018 $d
     /tmp/cc89mUOp.s:1806   .text.vTaskSuspendAll:00000000 $t
     /tmp/cc89mUOp.s:1811   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
     /tmp/cc89mUOp.s:1827   .text.vTaskSuspendAll:0000000c $d
     /tmp/cc89mUOp.s:1832   .text.xTaskGetTickCount:00000000 $t
     /tmp/cc89mUOp.s:1837   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
     /tmp/cc89mUOp.s:1853   .text.xTaskGetTickCount:00000008 $d
     /tmp/cc89mUOp.s:1858   .text.xTaskGetTickCountFromISR:00000000 $t
     /tmp/cc89mUOp.s:1863   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
     /tmp/cc89mUOp.s:1880   .text.xTaskGetTickCountFromISR:00000008 $d
     /tmp/cc89mUOp.s:1885   .text.uxTaskGetNumberOfTasks:00000000 $t
     /tmp/cc89mUOp.s:1890   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
     /tmp/cc89mUOp.s:1905   .text.uxTaskGetNumberOfTasks:00000008 $d
     /tmp/cc89mUOp.s:1910   .text.xTaskIncrementTick:00000000 $t
     /tmp/cc89mUOp.s:1915   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
     /tmp/cc89mUOp.s:2121   .text.xTaskIncrementTick:000000fc $d
     /tmp/cc89mUOp.s:2143   .text.xTaskResumeAll:00000000 $t
     /tmp/cc89mUOp.s:2148   .text.xTaskResumeAll:00000000 xTaskResumeAll
     /tmp/cc89mUOp.s:2306   .text.xTaskResumeAll:000000bc $d
     /tmp/cc89mUOp.s:2326   .text.vTaskDelayUntil:00000000 $t
     /tmp/cc89mUOp.s:2331   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
     /tmp/cc89mUOp.s:2510   .text.vTaskDelayUntil:000000b8 $d
     /tmp/cc89mUOp.s:2525   .text.vTaskDelay:00000000 $t
     /tmp/cc89mUOp.s:2530   .text.vTaskDelay:00000000 vTaskDelay
     /tmp/cc89mUOp.s:2627   .text.vTaskDelay:00000064 $d
     /tmp/cc89mUOp.s:2642   .text.prvIdleTask:00000000 $t
     /tmp/cc89mUOp.s:2757   .text.prvIdleTask:00000064 $d
     /tmp/cc89mUOp.s:2773   .text.uxTaskGetSystemState:00000000 $t
     /tmp/cc89mUOp.s:2778   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
     /tmp/cc89mUOp.s:2891   .text.uxTaskGetSystemState:00000080 $d
     /tmp/cc89mUOp.s:2904   .text.vTaskSwitchContext:00000000 $t
     /tmp/cc89mUOp.s:2909   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
     /tmp/cc89mUOp.s:3021   .text.vTaskSwitchContext:00000094 $d
     /tmp/cc89mUOp.s:3038   .text.vTaskSuspend:00000000 $t
     /tmp/cc89mUOp.s:3043   .text.vTaskSuspend:00000000 vTaskSuspend
     /tmp/cc89mUOp.s:3192   .text.vTaskSuspend:000000b8 $d
     /tmp/cc89mUOp.s:3212   .text.vTaskPlaceOnEventList:00000000 $t
     /tmp/cc89mUOp.s:3217   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
     /tmp/cc89mUOp.s:3307   .text.vTaskPlaceOnEventList:00000060 $d
     /tmp/cc89mUOp.s:3322   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
     /tmp/cc89mUOp.s:3327   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
     /tmp/cc89mUOp.s:3448   .text.vTaskPlaceOnUnorderedEventList:00000084 $d
     /tmp/cc89mUOp.s:3463   .text.vTaskPlaceOnEventListRestricted:00000000 $t
     /tmp/cc89mUOp.s:3468   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
     /tmp/cc89mUOp.s:3561   .text.vTaskPlaceOnEventListRestricted:00000060 $d
     /tmp/cc89mUOp.s:3575   .text.xTaskRemoveFromEventList:00000000 $t
     /tmp/cc89mUOp.s:3580   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
     /tmp/cc89mUOp.s:3678   .text.xTaskRemoveFromEventList:0000006c $d
     /tmp/cc89mUOp.s:3693   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
     /tmp/cc89mUOp.s:3698   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
     /tmp/cc89mUOp.s:3813   .text.xTaskRemoveFromUnorderedEventList:00000080 $d
     /tmp/cc89mUOp.s:3827   .text.vTaskSetTimeOutState:00000000 $t
     /tmp/cc89mUOp.s:3832   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
     /tmp/cc89mUOp.s:3880   .text.vTaskSetTimeOutState:0000002c $d
     /tmp/cc89mUOp.s:3889   .text.xTaskCheckForTimeOut:00000000 $t
     /tmp/cc89mUOp.s:3894   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
     /tmp/cc89mUOp.s:4016   .text.xTaskCheckForTimeOut:00000078 $d
     /tmp/cc89mUOp.s:4028   .text.vTaskMissedYield:00000000 $t
     /tmp/cc89mUOp.s:4033   .text.vTaskMissedYield:00000000 vTaskMissedYield
     /tmp/cc89mUOp.s:4048   .text.vTaskMissedYield:00000008 $d
     /tmp/cc89mUOp.s:4053   .text.uxTaskGetTaskNumber:00000000 $t
     /tmp/cc89mUOp.s:4058   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
     /tmp/cc89mUOp.s:4079   .text.vTaskSetTaskNumber:00000000 $t
     /tmp/cc89mUOp.s:4084   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
     /tmp/cc89mUOp.s:4104   .text.xTaskGetCurrentTaskHandle:00000000 $t
     /tmp/cc89mUOp.s:4109   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
     /tmp/cc89mUOp.s:4125   .text.xTaskGetCurrentTaskHandle:00000008 $d
     /tmp/cc89mUOp.s:4130   .text.xTaskGetSchedulerState:00000000 $t
     /tmp/cc89mUOp.s:4135   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
     /tmp/cc89mUOp.s:4164   .text.xTaskGetSchedulerState:00000018 $d
     /tmp/cc89mUOp.s:4170   .text.vTaskPriorityInherit:00000000 $t
     /tmp/cc89mUOp.s:4175   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
     /tmp/cc89mUOp.s:4273   .text.vTaskPriorityInherit:00000080 $d
     /tmp/cc89mUOp.s:4282   .text.xTaskPriorityDisinherit:00000000 $t
     /tmp/cc89mUOp.s:4287   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
     /tmp/cc89mUOp.s:4421   .text.xTaskPriorityDisinherit:000000a0 $d
     /tmp/cc89mUOp.s:4433   .text.vTaskList:00000000 $t
     /tmp/cc89mUOp.s:4438   .text.vTaskList:00000000 vTaskList
     /tmp/cc89mUOp.s:4600   .text.vTaskList:000000c0 $d
     /tmp/cc89mUOp.s:4614   .text.uxTaskResetEventItemValue:00000000 $t
     /tmp/cc89mUOp.s:4619   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
     /tmp/cc89mUOp.s:4642   .text.uxTaskResetEventItemValue:00000014 $d
     /tmp/cc89mUOp.s:4647   .text.pvTaskIncrementMutexHeldCount:00000000 $t
     /tmp/cc89mUOp.s:4652   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
     /tmp/cc89mUOp.s:4676   .text.pvTaskIncrementMutexHeldCount:00000014 $d
     /tmp/cc89mUOp.s:4681   .text.ulTaskNotifyTake:00000000 $t
     /tmp/cc89mUOp.s:4686   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
     /tmp/cc89mUOp.s:4812   .text.ulTaskNotifyTake:0000008c $d
     /tmp/cc89mUOp.s:4825   .text.xTaskNotifyWait:00000000 $t
     /tmp/cc89mUOp.s:4830   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
     /tmp/cc89mUOp.s:4975   .text.xTaskNotifyWait:000000b0 $d
     /tmp/cc89mUOp.s:4988   .text.xTaskGenericNotify:00000000 $t
     /tmp/cc89mUOp.s:4993   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
     /tmp/cc89mUOp.s:5065   .text.xTaskGenericNotify:00000044 $d
     /tmp/cc89mUOp.s:5069   .text.xTaskGenericNotify:00000048 $t
     /tmp/cc89mUOp.s:5174   .text.xTaskGenericNotify:000000c4 $d
     /tmp/cc89mUOp.s:5188   .text.xTaskGenericNotifyFromISR:00000000 $t
     /tmp/cc89mUOp.s:5193   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
     /tmp/cc89mUOp.s:5284   .text.xTaskGenericNotifyFromISR:00000058 $d
     /tmp/cc89mUOp.s:5288   .text.xTaskGenericNotifyFromISR:0000005c $t
     /tmp/cc89mUOp.s:5414   .text.xTaskGenericNotifyFromISR:000000ec $d
     /tmp/cc89mUOp.s:5428   .text.vTaskNotifyGiveFromISR:00000000 $t
     /tmp/cc89mUOp.s:5433   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
     /tmp/cc89mUOp.s:5609   .text.vTaskNotifyGiveFromISR:000000c0 $d
     /tmp/cc89mUOp.s:5623   .text.xTaskNotifyStateClear:00000000 $t
     /tmp/cc89mUOp.s:5628   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
     /tmp/cc89mUOp.s:5677   .text.xTaskNotifyStateClear:00000028 $d
     /tmp/cc89mUOp.s:5756   .bss.pxCurrentTCB:00000000 pxCurrentTCB
     /tmp/cc89mUOp.s:5685   .bss.uxCurrentNumberOfTasks:00000000 $d
     /tmp/cc89mUOp.s:5689   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
     /tmp/cc89mUOp.s:5692   .bss.xTickCount:00000000 $d
     /tmp/cc89mUOp.s:5696   .bss.xTickCount:00000000 xTickCount
     /tmp/cc89mUOp.s:5702   .rodata.__FUNCTION__.6187:00000000 __FUNCTION__.6187
     /tmp/cc89mUOp.s:5705   .bss.pxDelayedTaskList:00000000 $d
     /tmp/cc89mUOp.s:5709   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
     /tmp/cc89mUOp.s:5715   .rodata.__FUNCTION__.6402:00000000 __FUNCTION__.6402
     /tmp/cc89mUOp.s:5721   .rodata.__FUNCTION__.6038:00000000 __FUNCTION__.6038
     /tmp/cc89mUOp.s:5727   .rodata.__FUNCTION__.6055:00000000 __FUNCTION__.6055
     /tmp/cc89mUOp.s:5733   .rodata.CSWTCH.283:00000000 CSWTCH.283
     /tmp/cc89mUOp.s:5742   .rodata.__FUNCTION__.6073:00000000 __FUNCTION__.6073
     /tmp/cc89mUOp.s:5752   .bss.pxCurrentTCB:00000000 $d
     /tmp/cc89mUOp.s:5762   .rodata.__FUNCTION__.6422:00000000 __FUNCTION__.6422
     /tmp/cc89mUOp.s:5768   .rodata.__FUNCTION__.6094:00000000 __FUNCTION__.6094
     /tmp/cc89mUOp.s:5774   .rodata.__FUNCTION__.6240:00000000 __FUNCTION__.6240
     /tmp/cc89mUOp.s:5777   .bss.xDelayedTaskList2:00000000 $d
     /tmp/cc89mUOp.s:5781   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
     /tmp/cc89mUOp.s:5787   .rodata.__FUNCTION__.6113:00000000 __FUNCTION__.6113
     /tmp/cc89mUOp.s:5793   .rodata.__FUNCTION__.6438:00000000 __FUNCTION__.6438
     /tmp/cc89mUOp.s:5796   .bss.xTasksWaitingTermination:00000000 $d
     /tmp/cc89mUOp.s:5800   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
     /tmp/cc89mUOp.s:5803   .bss.xYieldPending:00000000 $d
     /tmp/cc89mUOp.s:5807   .bss.xYieldPending:00000000 xYieldPending
     /tmp/cc89mUOp.s:5810   .bss.xNextTaskUnblockTime:00000000 $d
     /tmp/cc89mUOp.s:5814   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
     /tmp/cc89mUOp.s:5820   .rodata.__FUNCTION__.6127:00000000 __FUNCTION__.6127
     /tmp/cc89mUOp.s:5826   .rodata.__FUNCTION__.6177:00000000 __FUNCTION__.6177
     /tmp/cc89mUOp.s:5829   .bss.uxTasksDeleted:00000000 $d
     /tmp/cc89mUOp.s:5833   .bss.uxTasksDeleted:00000000 uxTasksDeleted
     /tmp/cc89mUOp.s:5839   .rodata.__FUNCTION__.6322:00000000 __FUNCTION__.6322
     /tmp/cc89mUOp.s:5845   .rodata.__FUNCTION__.6195:00000000 __FUNCTION__.6195
     /tmp/cc89mUOp.s:5851   .rodata.__FUNCTION__.6046:00000000 __FUNCTION__.6046
     /tmp/cc89mUOp.s:5857   .rodata.__FUNCTION__.6212:00000000 __FUNCTION__.6212
     /tmp/cc89mUOp.s:5863   .rodata.__FUNCTION__.6344:00000000 __FUNCTION__.6344
     /tmp/cc89mUOp.s:5866   .bss.uxPendedTicks:00000000 $d
     /tmp/cc89mUOp.s:5870   .bss.uxPendedTicks:00000000 uxPendedTicks
     /tmp/cc89mUOp.s:5876   .rodata.__FUNCTION__.6065:00000000 __FUNCTION__.6065
     /tmp/cc89mUOp.s:5879   .bss.uxTopReadyPriority:00000000 $d
     /tmp/cc89mUOp.s:5883   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
     /tmp/cc89mUOp.s:5889   .rodata.__FUNCTION__.6362:00000000 __FUNCTION__.6362
     /tmp/cc89mUOp.s:5892   .bss.xPendingReadyList:00000000 $d
     /tmp/cc89mUOp.s:5896   .bss.xPendingReadyList:00000000 xPendingReadyList
     /tmp/cc89mUOp.s:5899   .bss.pxOverflowDelayedTaskList:00000000 $d
     /tmp/cc89mUOp.s:5903   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
     /tmp/cc89mUOp.s:5909   .rodata.__FUNCTION__.6219:00000000 __FUNCTION__.6219
     /tmp/cc89mUOp.s:5915   .rodata.__FUNCTION__.6233:00000000 __FUNCTION__.6233
     /tmp/cc89mUOp.s:5921   .rodata.__FUNCTION__.6227:00000000 __FUNCTION__.6227
     /tmp/cc89mUOp.s:5927   .rodata.__FUNCTION__.6100:00000000 __FUNCTION__.6100
     /tmp/cc89mUOp.s:5930   .bss.uxSchedulerSuspended:00000000 $d
     /tmp/cc89mUOp.s:5934   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
     /tmp/cc89mUOp.s:5940   .rodata.__FUNCTION__.6107:00000000 __FUNCTION__.6107
     /tmp/cc89mUOp.s:5946   .rodata.__FUNCTION__.6121:00000000 __FUNCTION__.6121
     /tmp/cc89mUOp.s:5949   .bss.xSchedulerRunning:00000000 $d
     /tmp/cc89mUOp.s:5953   .bss.xSchedulerRunning:00000000 xSchedulerRunning
     /tmp/cc89mUOp.s:5956   .bss.pxReadyTasksLists:00000000 $d
     /tmp/cc89mUOp.s:5960   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
     /tmp/cc89mUOp.s:5966   .rodata.__FUNCTION__.6140:00000000 __FUNCTION__.6140
     /tmp/cc89mUOp.s:5969   .bss.xNumOfOverflows:00000000 $d
     /tmp/cc89mUOp.s:5973   .bss.xNumOfOverflows:00000000 xNumOfOverflows
     /tmp/cc89mUOp.s:5976   .bss.xDelayedTaskList1:00000000 $d
     /tmp/cc89mUOp.s:5980   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
     /tmp/cc89mUOp.s:5986   .rodata.__FUNCTION__.6299:00000000 __FUNCTION__.6299
     /tmp/cc89mUOp.s:5989   .bss.xSuspendedTaskList:00000000 $d
     /tmp/cc89mUOp.s:5993   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
     /tmp/cc89mUOp.s:5996   .bss.uxTaskNumber:00000000 $d
     /tmp/cc89mUOp.s:6000   .bss.uxTaskNumber:00000000 uxTaskNumber
     /tmp/cc89mUOp.s:6006   .rodata.__FUNCTION__.6203:00000000 __FUNCTION__.6203
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
printf
vListInsert
pvPortMalloc1
memset
vPortFree1
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vListInitialiseItem
vListInitialise
uxListRemove
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vApplicationTickHook
vApplicationIdleHook
vApplicationStackOverflowHook
strlen
strcpy
sprintf
