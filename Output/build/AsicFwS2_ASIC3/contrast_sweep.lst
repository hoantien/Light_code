   1              		.syntax unified
   2              		.cpu cortex-r4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"contrast_sweep.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZNKSt14default_deleteI13contrast_passEclEPS0_.isra.2,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	_ZNKSt14default_deleteI13contrast_passEclEPS0_.isra.2:
  24              	.LFB2404:
  25              		.file 1 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_
   1:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // unique_ptr implementation -*- C++ -*-
   2:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
   3:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // Copyright (C) 2008-2014 Free Software Foundation, Inc.
   4:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** //
   5:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // terms of the GNU General Public License as published by the
   8:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // any later version.
  10:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  11:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // GNU General Public License for more details.
  15:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  16:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  20:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  25:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** /** @file bits/unique_ptr.h
  26:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****  */
  29:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  30:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #ifndef _UNIQUE_PTR_H
  31:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #define _UNIQUE_PTR_H 1
  32:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  33:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #include <bits/c++config.h>
  34:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #include <debug/debug.h>
  35:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #include <type_traits>
  36:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #include <utility>
  37:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #include <tuple>
  38:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  39:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** namespace std _GLIBCXX_VISIBILITY(default)
  40:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** {
  41:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  42:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  43:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   /**
  44:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****    * @addtogroup pointer_abstractions
  45:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****    * @{
  46:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****    */
  47:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  48:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #if _GLIBCXX_USE_DEPRECATED
  49:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   template<typename> class auto_ptr;
  50:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #endif
  51:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  52:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   /// Primary template of default_delete, used by unique_ptr
  53:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   template<typename _Tp>
  54:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     struct default_delete
  55:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     {
  56:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Default constructor
  57:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       constexpr default_delete() noexcept = default;
  58:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  59:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** @brief Converting constructor.
  60:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
  61:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * Allows conversion from a deleter for arrays of another type, @p _Up,
  62:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * only if @p _Up* is convertible to @p _Tp*.
  63:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
  64:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       template<typename _Up, typename = typename
  65:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
  66:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****         default_delete(const default_delete<_Up>&) noexcept { }
  67:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  68:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Calls @c delete @p __ptr
  69:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       void
  70:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       operator()(_Tp* __ptr) const
  26              		.loc 1 70 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  71:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
  72:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	static_assert(!is_void<_Tp>::value,
  73:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 		      "can't delete pointer to incomplete type");
  74:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	static_assert(sizeof(_Tp)>0,
  75:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 		      "can't delete pointer to incomplete type");
  76:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	delete __ptr;
  32              		.loc 1 76 0
  33 0000 10B1     		cbz	r0, .L1
  34 0002 0368     		ldr	r3, [r0]
  35 0004 5B68     		ldr	r3, [r3, #4]
  36 0006 1847     		bx	r3
  37              	.LVL1:
  38              	.L1:
  39 0008 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE2404:
  43              		.section	.text._ZN14contrast_sweepC2ER13cam_typedef_ttRK9rectanglePvS5_mm,"ax",%progbits
  44              		.align	1
  45              		.global	_ZN14contrast_sweepC2ER13cam_typedef_ttRK9rectanglePvS5_mm
  46              		.thumb
  47              		.thumb_func
  49              	_ZN14contrast_sweepC2ER13cam_typedef_ttRK9rectanglePvS5_mm:
  50              	.LFB2284:
  51              		.file 2 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp"
   1:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** /*******************************************************************************
   2:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * Copyright (c) 2016, The LightCo
   3:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * All rights reserved.
   4:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * Redistribution and use in source and binary forms, with or without
   5:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * modification, are strictly prohibited without prior permission
   6:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * of The LightCo.
   7:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  *
   8:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * @file    contrast_sweep.cpp
   9:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * @author  The LightCo
  10:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * @version V1.0.0
  11:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * @date    August-8-2016
  12:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  * @brief   Implements contrast optimization full sweep
  13:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  *
  14:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****  ******************************************************************************/
  15:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  16:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** #include "assert.h"
  17:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** #include "log.h"
  18:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** #include "contrast_sweep.h"
  19:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  20:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** #define SLOGF_ID                SLOG_ID_AF
  21:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  22:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  23:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** contrast_sweep::contrast_sweep(cam_typedef_t& cam, std::uint16_t scale,
  52              		.loc 2 23 0
  53              		.cfi_startproc
  54              		@ args = 16, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              	.LVL2:
  57 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 32
  60              		.cfi_offset 4, -16
  61              		.cfi_offset 5, -12
  62              		.cfi_offset 6, -8
  63              		.cfi_offset 14, -4
  64              		.loc 2 23 0
  65 0002 0446     		mov	r4, r0
  66 0004 0830     		adds	r0, r0, #8
  67              	.LVL3:
  68 0006 04F15806 		add	r6, r4, #88
  69              	.L5:
  70              	.LVL4:
  71              	.LBB375:
  72              	.LBB376:
  73              	.LBB377:
  74              	.LBB378:
  75              	.LBB379:
  76              	.LBB380:
  77              	.LBB381:
  78              	.LBB382:
  79              	.LBB383:
  80              	.LBB384:
  81              	.LBB385:
  82              	.LBB386:
  83              	.LBB387:
  84              		.file 3 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple"
   1:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // <tuple> -*- C++ -*-
   2:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
   3:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // Copyright (C) 2007-2014 Free Software Foundation, Inc.
   4:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** //
   5:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // software; you can redistribute it and/or modify it under the
   7:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // terms of the GNU General Public License as published by the
   8:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // any later version.
  10:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  11:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // This library is distributed in the hope that it will be useful,
  12:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // GNU General Public License for more details.
  15:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  16:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // 3.1, as published by the Free Software Foundation.
  19:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  20:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // You should have received a copy of the GNU General Public License and
  21:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** // <http://www.gnu.org/licenses/>.
  24:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  25:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** /** @file include/tuple
  26:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****  *  This is a Standard C++ Library header.
  27:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****  */
  28:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  29:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** #ifndef _GLIBCXX_TUPLE
  30:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** #define _GLIBCXX_TUPLE 1
  31:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  32:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** #pragma GCC system_header
  33:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  34:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** #if __cplusplus < 201103L
  35:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** # include <bits/c++0x_warning.h>
  36:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** #else
  37:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  38:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** #include <utility>
  39:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** #include <array>
  40:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** #include <bits/uses_allocator.h>
  41:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  42:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** {
  44:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  46:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   /**
  47:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****    *  @addtogroup utilities
  48:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****    *  @{
  49:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****    */
  50:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  51:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   // Adds a const reference to a non-reference type.
  52:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<typename _Tp>
  53:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct __add_c_ref
  54:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     { typedef const _Tp& type; };
  55:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  56:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<typename _Tp>
  57:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct __add_c_ref<_Tp&>
  58:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     { typedef _Tp& type; };
  59:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  60:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   // Adds a reference to a non-reference type.
  61:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<typename _Tp>
  62:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct __add_ref
  63:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     { typedef _Tp& type; };
  64:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  65:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<typename _Tp>
  66:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct __add_ref<_Tp&>
  67:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     { typedef _Tp& type; };
  68:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  69:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   // Adds an rvalue reference to a non-reference type.
  70:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<typename _Tp>
  71:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct __add_r_ref
  72:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     { typedef _Tp&& type; };
  73:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  74:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<typename _Tp>
  75:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct __add_r_ref<_Tp&>
  76:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     { typedef _Tp& type; };
  77:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  78:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>
  79:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct _Head_base;
  80:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  81:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<std::size_t _Idx, typename _Head>
  82:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct _Head_base<_Idx, _Head, true>
  83:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     : public _Head
  84:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     {
  85:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       constexpr _Head_base()
  86:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       : _Head() { }
  87:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  88:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       constexpr _Head_base(const _Head& __h)
  89:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       : _Head(__h) { }
  90:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  91:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       constexpr _Head_base(const _Head_base&) = default;
  92:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       constexpr _Head_base(_Head_base&&) = default;
  93:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  94:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       template<typename _UHead>
  95:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****         constexpr _Head_base(_UHead&& __h)
  96:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	: _Head(std::forward<_UHead>(__h)) { }
  97:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
  98:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
  99:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       : _Head() { }
 100:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
 101:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       template<typename _Alloc>
 102:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 103:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	: _Head(allocator_arg, *__a._M_a) { }
 104:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
 105:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       template<typename _Alloc>
 106:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 107:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	: _Head(*__a._M_a) { }
 108:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
 109:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       template<typename _UHead>
 110:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
 111:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	: _Head(std::forward<_UHead>(__uhead)) { }
 112:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
 113:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       template<typename _Alloc, typename _UHead>
 114:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 115:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	: _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }
 116:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
 117:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       template<typename _Alloc, typename _UHead>
 118:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 119:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }
 120:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
 121:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       static constexpr _Head&
 122:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       _M_head(_Head_base& __b) noexcept { return __b; }
 123:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
 124:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       static constexpr const _Head&
 125:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b; }
 126:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     };
 127:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple **** 
 128:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****   template<std::size_t _Idx, typename _Head>
 129:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     struct _Head_base<_Idx, _Head, false>
 130:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****     {
 131:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       constexpr _Head_base()
 132:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/tuple ****       : _M_head_impl() { }
  85              		.loc 3 132 0
  86 000a 0025     		movs	r5, #0
  87 000c 0830     		adds	r0, r0, #8
  88              	.LVL5:
  89 000e 40F80C5C 		str	r5, [r0, #-12]
  90              	.LBE387:
  91              	.LBE386:
  92              	.LBE385:
  93              	.LBE384:
  94              	.LBE383:
  95              	.LBE382:
  96              	.LBE381:
  97              	.LBE380:
  98              	.LBE379:
  99              	.LBE378:
 100              		.file 4 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array"
   1:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // <array> -*- C++ -*-
   2:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
   3:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // Copyright (C) 2007-2014 Free Software Foundation, Inc.
   4:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** //
   5:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // software; you can redistribute it and/or modify it under the
   7:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // terms of the GNU General Public License as published by the
   8:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // any later version.
  10:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  11:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // This library is distributed in the hope that it will be useful,
  12:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // GNU General Public License for more details.
  15:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  16:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // 3.1, as published by the Free Software Foundation.
  19:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  20:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // You should have received a copy of the GNU General Public License and
  21:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** // <http://www.gnu.org/licenses/>.
  24:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  25:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** /** @file include/array
  26:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****  *  This is a Standard C++ Library header.
  27:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****  */
  28:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  29:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** #ifndef _GLIBCXX_ARRAY
  30:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** #define _GLIBCXX_ARRAY 1
  31:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  32:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** #pragma GCC system_header
  33:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  34:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** #if __cplusplus < 201103L
  35:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** # include <bits/c++0x_warning.h>
  36:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** #else
  37:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  38:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** #include <stdexcept>
  39:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** #include <bits/stl_algobase.h>
  40:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** #include <bits/range_access.h>
  41:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  42:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** {
  44:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  45:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  46:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****   template<typename _Tp, std::size_t _Nm>
  47:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****     struct __array_traits
  48:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****     {
  49:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****       typedef _Tp _Type[_Nm];
  50:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  51:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****       static constexpr _Tp&
  52:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
  53:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****       { return const_cast<_Tp&>(__t[__n]); }
  54:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****     };
  55:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  56:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****  template<typename _Tp>
  57:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    struct __array_traits<_Tp, 0>
  58:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    {
  59:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****      struct _Type { };
  60:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  61:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****      static constexpr _Tp&
  62:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****      _S_ref(const _Type&, std::size_t) noexcept
  63:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****      { return *static_cast<_Tp*>(nullptr); }
  64:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    };
  65:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array **** 
  66:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****   /**
  67:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  68:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *
  69:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *  @ingroup sequences
  70:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *
  71:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  72:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *  <a href="tables.html#66">reversible container</a>, and a
  73:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *  <a href="tables.html#67">sequence</a>.
  74:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *
  75:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *  Sets support random access iterators.
  76:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *
  77:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  78:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****    *  @tparam  N  Number of elements.
  79:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****   */
  80:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****   template<typename _Tp, std::size_t _Nm>
  81:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/array ****     struct array
 101              		.loc 4 81 0
 102 0012 B042     		cmp	r0, r6
 103 0014 F9D1     		bne	.L5
 104              	.LBE377:
 105              	.LBE376:
  24:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         const rectangle& min_capture_rect, void* image_buffer_p,
  25:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         EventGroupHandle_t event_group,
  26:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         EventBits_t lens_move_done_event, EventBits_t capture_done_event) :
  27:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****             contrast_step_(cam, scale, min_capture_rect, image_buffer_p,
  28:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****                     event_group, lens_move_done_event, capture_done_event) {
 106              		.loc 2 28 0
 107 0016 089E     		ldr	r6, [sp, #32]
 108 0018 0096     		str	r6, [sp]
 109 001a 099E     		ldr	r6, [sp, #36]
 110 001c 0196     		str	r6, [sp, #4]
 111 001e 0A9E     		ldr	r6, [sp, #40]
 112 0020 0296     		str	r6, [sp, #8]
 113 0022 0B9E     		ldr	r6, [sp, #44]
 114 0024 84F85050 		strb	r5, [r4, #80]
 115 0028 0396     		str	r6, [sp, #12]
 116 002a 064E     		ldr	r6, .L7
 117 002c B047     		blx	r6
 118              	.LVL6:
 119 002e 0095     		str	r5, [sp]
 120 0030 2946     		mov	r1, r5
 121 0032 2A46     		mov	r2, r5
 122 0034 2B46     		mov	r3, r5
 123 0036 04F5E070 		add	r0, r4, #448
 124 003a 034D     		ldr	r5, .L7+4
 125 003c A847     		blx	r5
 126              	.LVL7:
 127              	.LBE375:
  29:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** }
 128              		.loc 2 29 0
 129 003e 2046     		mov	r0, r4
 130 0040 04B0     		add	sp, sp, #16
 131              	.LCFI1:
 132              		.cfi_def_cfa_offset 16
 133              		@ sp needed
 134 0042 70BD     		pop	{r4, r5, r6, pc}
 135              	.LVL8:
 136              	.L8:
 137              		.align	2
 138              	.L7:
 139 0044 00000000 		.word	_ZN20contrast_refine_stepC1ER13cam_typedef_ttRK9rectanglePvS5_mm
 140 0048 00000000 		.word	_ZN9rectangleC1Esstt
 141              		.cfi_endproc
 142              	.LFE2284:
 144              		.global	_ZN14contrast_sweepC1ER13cam_typedef_ttRK9rectanglePvS5_mm
 145              		.thumb_set _ZN14contrast_sweepC1ER13cam_typedef_ttRK9rectanglePvS5_mm,_ZN14contrast_sweepC2ER13cam
 146              		.section	.text._ZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10uniqu
 147              		.align	1
 148              		.global	_ZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI1
 149              		.thumb
 150              		.thumb_func
 152              	_ZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI13contrast
 153              	.LFB2286:
  30:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  31:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** void contrast_sweep::add_iter_param(contrast_processor::metric_type metric1_t,
  32:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         contrast_processor::metric_type metric2_t,
  33:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         std::unique_ptr<contrast_pass> contrast_pass_p) {
 154              		.loc 2 33 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL9:
 159 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 160              	.LCFI2:
 161              		.cfi_def_cfa_offset 24
 162              		.cfi_offset 4, -24
 163              		.cfi_offset 5, -20
 164              		.cfi_offset 6, -16
 165              		.cfi_offset 7, -12
 166              		.cfi_offset 8, -8
 167              		.cfi_offset 14, -4
 168              		.loc 2 33 0
 169 0004 1D46     		mov	r5, r3
 170              	.LBB420:
  34:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     assert((num_pass_ + 1) < MAX_NUM_PASS);
 171              		.loc 2 34 0
 172 0006 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 173              	.LVL10:
 174 000a 082B     		cmp	r3, #8
 175              	.LBE420:
  33:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     assert((num_pass_ + 1) < MAX_NUM_PASS);
 176              		.loc 2 33 0
 177 000c 0446     		mov	r4, r0
 178 000e 8846     		mov	r8, r1
 179 0010 1746     		mov	r7, r2
 180              	.LBB436:
 181              		.loc 2 34 0
 182 0012 03DD     		ble	.L10
 183              		.loc 2 34 0 is_stmt 0 discriminator 1
 184 0014 0E48     		ldr	r0, .L15
 185              	.LVL11:
 186 0016 2221     		movs	r1, #34
 187              	.LVL12:
 188 0018 0E4B     		ldr	r3, .L15+4
 189 001a 9847     		blx	r3
 190              	.LVL13:
 191              	.L10:
 192              	.LBB421:
 193              	.LBB422:
 194              	.LBB423:
  77:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       }
  78:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     };
  79:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  80:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
  81:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   // DR 740 - omit specialization for array objects with a compile time length
  82:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   /// Specialization for arrays, default_delete.
  83:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   template<typename _Tp>
  84:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     struct default_delete<_Tp[]>
  85:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     {
  86:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     private:
  87:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       template<typename _Up>
  88:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	using __remove_cv = typename remove_cv<_Up>::type;
  89:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  90:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       // Like is_base_of<_Tp, _Up> but false if unqualified types are the same
  91:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       template<typename _Up>
  92:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	using __is_derived_Tp
  93:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  = __and_< is_base_of<_Tp, _Up>,
  94:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 		    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;
  95:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
  96:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     public:
  97:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Default constructor
  98:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       constexpr default_delete() noexcept = default;
  99:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 100:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** @brief Converting constructor.
 101:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 102:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * Allows conversion from a deleter for arrays of another type, such as
 103:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * a const-qualified version of @p _Tp.
 104:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 105:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * Conversions from types derived from @c _Tp are not allowed because
 106:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * it is unsafe to @c delete[] an array of derived types through a
 107:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * pointer to the base type.
 108:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
 109:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       template<typename _Up, typename = typename
 110:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	       enable_if<!__is_derived_Tp<_Up>::value>::type>
 111:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****         default_delete(const default_delete<_Up[]>&) noexcept { }
 112:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 113:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Calls @c delete[] @p __ptr
 114:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       void
 115:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       operator()(_Tp* __ptr) const
 116:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 117:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	static_assert(sizeof(_Tp)>0,
 118:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 		      "can't delete pointer to incomplete type");
 119:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	delete [] __ptr;
 120:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       }
 121:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 122:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       template<typename _Up>
 123:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	typename enable_if<__is_derived_Tp<_Up>::value>::type
 124:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	operator()(_Up*) const = delete;
 125:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     };
 126:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 127:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   /// 20.7.1.2 unique_ptr for single objects.
 128:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****   template <typename _Tp, typename _Dp = default_delete<_Tp> >
 129:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     class unique_ptr
 130:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     {
 131:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       // use SFINAE to determine whether _Del::pointer exists
 132:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       class _Pointer
 133:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 134:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	template<typename _Up>
 135:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  static typename _Up::pointer __test(typename _Up::pointer*);
 136:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 137:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	template<typename _Up>
 138:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  static _Tp* __test(...);
 139:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 140:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	typedef typename remove_reference<_Dp>::type _Del;
 141:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 142:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       public:
 143:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	typedef decltype(__test<_Del>(0)) type;
 144:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       };
 145:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 146:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       typedef std::tuple<typename _Pointer::type, _Dp>  __tuple_type;
 147:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       __tuple_type                                      _M_t;
 148:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 149:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****     public:
 150:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       typedef typename _Pointer::type   pointer;
 151:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       typedef _Tp                       element_type;
 152:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       typedef _Dp                       deleter_type;
 153:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 154:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       // Constructors.
 155:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 156:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Default constructor, creates a unique_ptr that owns nothing.
 157:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       constexpr unique_ptr() noexcept
 158:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       : _M_t()
 159:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       { static_assert(!is_pointer<deleter_type>::value,
 160:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 		     "constructed with null function pointer deleter"); }
 161:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 162:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** Takes ownership of a pointer.
 163:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 164:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * @param __p  A pointer to an object of @c element_type
 165:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 166:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * The deleter will be value-initialized.
 167:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
 168:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       explicit
 169:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       unique_ptr(pointer __p) noexcept
 170:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       : _M_t(__p, deleter_type())
 171:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       { static_assert(!is_pointer<deleter_type>::value,
 172:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 		     "constructed with null function pointer deleter"); }
 173:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 174:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** Takes ownership of a pointer.
 175:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 176:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * @param __p  A pointer to an object of @c element_type
 177:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * @param __d  A reference to a deleter.
 178:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 179:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * The deleter will be initialized with @p __d
 180:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
 181:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       unique_ptr(pointer __p,
 182:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  typename conditional<is_reference<deleter_type>::value,
 183:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	    deleter_type, const deleter_type&>::type __d) noexcept
 184:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       : _M_t(__p, __d) { }
 185:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 186:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** Takes ownership of a pointer.
 187:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 188:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * @param __p  A pointer to an object of @c element_type
 189:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * @param __d  An rvalue reference to a deleter.
 190:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 191:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * The deleter will be initialized with @p std::move(__d)
 192:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
 193:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       unique_ptr(pointer __p,
 194:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  typename remove_reference<deleter_type>::type&& __d) noexcept
 195:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       : _M_t(std::move(__p), std::move(__d))
 196:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       { static_assert(!std::is_reference<deleter_type>::value,
 197:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 		      "rvalue deleter bound to reference"); }
 198:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 199:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Creates a unique_ptr that owns nothing.
 200:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }
 201:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 202:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       // Move constructors.
 203:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 204:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Move constructor.
 205:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       unique_ptr(unique_ptr&& __u) noexcept
 206:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
 207:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 208:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** @brief Converting constructor from another type
 209:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 210:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * Requires that the pointer owned by @p __u is convertible to the
 211:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * type of pointer owned by this object, @p __u does not own an array,
 212:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * and @p __u has a compatible deleter type.
 213:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
 214:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       template<typename _Up, typename _Ep, typename = _Require<
 215:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	       is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
 216:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	       __not_<is_array<_Up>>,
 217:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	       typename conditional<is_reference<_Dp>::value,
 218:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 				    is_same<_Ep, _Dp>,
 219:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 				    is_convertible<_Ep, _Dp>>::type>>
 220:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 221:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 222:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	{ }
 223:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 224:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #if _GLIBCXX_USE_DEPRECATED
 225:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Converting constructor from @c auto_ptr
 226:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       template<typename _Up, typename = _Require<
 227:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
 228:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
 229:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** #endif
 230:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 231:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Destructor, invokes the deleter if the stored pointer is not null.
 232:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       ~unique_ptr() noexcept
 233:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 234:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	auto& __ptr = std::get<0>(_M_t);
 235:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	if (__ptr != nullptr)
 236:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  get_deleter()(__ptr);
 237:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	__ptr = pointer();
 238:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       }
 239:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 240:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       // Assignment.
 241:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 242:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** @brief Move assignment operator.
 243:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 244:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * @param __u  The object to transfer ownership from.
 245:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 246:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * Invokes the deleter first if this object owns a pointer.
 247:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
 248:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       unique_ptr&
 249:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       operator=(unique_ptr&& __u) noexcept
 250:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 251:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	reset(__u.release());
 252:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 253:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	return *this;
 254:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       }
 255:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 256:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** @brief Assignment from another type.
 257:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 258:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * @param __u  The object to transfer ownership from, which owns a
 259:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *             convertible pointer to a non-array object.
 260:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 261:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * Invokes the deleter first if this object owns a pointer.
 262:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
 263:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       template<typename _Up, typename _Ep>
 264:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	typename enable_if< __and_<
 265:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
 266:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  __not_<is_array<_Up>>
 267:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  >::value,
 268:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  unique_ptr&>::type
 269:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 270:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	{
 271:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  reset(__u.release());
 272:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 273:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  return *this;
 274:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	}
 275:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 276:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
 277:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       unique_ptr&
 278:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       operator=(nullptr_t) noexcept
 279:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 280:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	reset();
 281:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	return *this;
 282:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       }
 283:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 284:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       // Observers.
 285:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 286:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Dereference the stored pointer.
 287:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       typename add_lvalue_reference<element_type>::type
 288:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       operator*() const
 289:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 290:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	_GLIBCXX_DEBUG_ASSERT(get() != pointer());
 291:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	return *get();
 292:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       }
 293:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 294:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Return the stored pointer.
 295:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       pointer
 296:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       operator->() const noexcept
 297:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 298:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	_GLIBCXX_DEBUG_ASSERT(get() != pointer());
 299:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	return get();
 300:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       }
 301:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 302:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Return the stored pointer.
 303:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       pointer
 304:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       get() const noexcept
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       { return std::get<0>(_M_t); }
 306:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 307:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Return a reference to the stored deleter.
 308:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       deleter_type&
 309:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       get_deleter() noexcept
 310:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       { return std::get<1>(_M_t); }
 311:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 312:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Return a reference to the stored deleter.
 313:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       const deleter_type&
 314:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       get_deleter() const noexcept
 315:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       { return std::get<1>(_M_t); }
 316:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 317:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Return @c true if the stored pointer is not null.
 318:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       explicit operator bool() const noexcept
 319:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       { return get() == pointer() ? false : true; }
 320:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 321:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       // Modifiers.
 322:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 323:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /// Release ownership of any stored pointer.
 324:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       pointer
 325:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       release() noexcept
 326:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 327:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	pointer __p = get();
 328:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	std::get<0>(_M_t) = pointer();
 195              		.loc 1 328 0 is_stmt 1
 196 001c 0023     		movs	r3, #0
 197              	.LBE423:
 198              	.LBE422:
 199              	.LBE421:
  35:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     pass_param_arr_[num_pass_] = pass_param{metric1_t, metric2_t, std::move(contrast_pass_p)};
 200              		.loc 2 35 0
 201 001e 94F85010 		ldrb	r1, [r4, #80]	@ zero_extendqisi2
 202              	.LVL14:
 203              	.LBB428:
 204              	.LBB427:
 205              	.LBB426:
 206              	.LBB424:
 207              	.LBB425:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 208              		.loc 1 305 0
 209 0022 2E68     		ldr	r6, [r5]
 210              	.LVL15:
 211              	.LBE425:
 212              	.LBE424:
 213              		.loc 1 328 0
 214 0024 2B60     		str	r3, [r5]
 215              	.LVL16:
 216 0026 0BB2     		sxth	r3, r1
 217              	.LBE426:
 218              	.LBE427:
 219              	.LBE428:
 220              	.LBB429:
 221              	.LBB430:
 222              		.file 5 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h"
   1:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** /*******************************************************************************
   2:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * Copyright (c) 2016, The LightCo
   3:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * All rights reserved.
   4:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * Redistribution and use in source and binary forms, with or without
   5:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * modification, are strictly prohibited without prior permission
   6:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * of The LightCo.
   7:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  *
   8:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * @file    contrast_sweep.h
   9:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * @author  The LightCo
  10:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * @version V1.0.0
  11:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * @date    August-8-2016
  12:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  * @brief   Implements contrast optimization full sweep
  13:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  *
  14:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****  ******************************************************************************/
  15:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  16:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #ifndef __CONTRAST_SWEEP_H__
  17:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #define __CONTRAST_SWEEP_H__
  18:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  19:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include "os.h"
  20:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include "light_system.h"
  21:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include "contrast_refine_step.h"
  22:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include "contrast_pass.h"
  23:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include "rectangle.h"
  24:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  25:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #ifdef __cplusplus
  26:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  27:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include <cstdint>
  28:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include <array>
  29:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include <limits>
  30:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** #include <memory>
  31:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  32:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** /// Implements contrast optimization sweep
  33:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** class contrast_sweep {
  34:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** public:
  35:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     /**
  36:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * Constructor
  37:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param cam Camera module object
  38:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param scale Set to 1 for native resolution, 2 for scale/bin of 2 in x and y
  39:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param min_capture_rect Rectangle that should be captured
  40:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param image_buffer_p Pointer to image buffer (can hold min_capture_rect.image_size())
  41:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param event_group Event group for lens move done and capture done events
  42:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param lens_move_done_event Event to signal that lens move is completed
  43:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param capture_done_event Event to signal that roi image capture is completed
  44:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      */
  45:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     contrast_sweep(cam_typedef_t& cam, std::uint16_t scale,
  46:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****             const rectangle& min_capture_rect, void* image_buffer_p,
  47:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****             EventGroupHandle_t event_group,
  48:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****             EventBits_t lens_move_done_event, EventBits_t capture_done_event);
  49:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  50:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     /**
  51:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * Configures one pass of contrast sweep operation
  52:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param metric1_t Type of metric1 to be computed
  53:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param metric1_t Type of metric2 to be computed
  54:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @param contrast_pass_p Pointer to contrast_pass object
  55:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      */
  56:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     void add_iter_param(contrast_processor::metric_type metric1_t,
  57:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****             contrast_processor::metric_type metric2_t,
  58:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****             std::unique_ptr<contrast_pass> contrast_pass_p);
  59:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  60:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     /**
  61:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * Initialize sweep with passes as specified through add_iter_param()
  62:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      */
  63:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     void initialize_sweep(const rectangle& roi);
  64:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  65:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     /**
  66:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * Start lens move
  67:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      */
  68:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     void start_lens_move();
  69:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  70:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     /**
  71:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * Start frame capture
  72:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      */
  73:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     void start_capture_frame();
  74:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  75:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     /**
  76:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * Process captured frame, compute metrics
  77:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @return true iff sweep is completed
  78:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * After true is returned, a last call to start_lens_move() is needed to move the lens to the o
  79:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      */
  80:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     bool process_captured_frame();
  81:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  82:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     /**
  83:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      * @return Optimal lens position computed in last call to run_sweep().
  84:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****      */
  85:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     std::int16_t optimal_position() const {
  86:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****         return pass_param_arr_[num_pass_-1].contrast_pass_p->out_best_pos();
  87:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     }
  88:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  89:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     const rectangle& capture_rectangle() const {
  90:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****         return contrast_step_.capture_rectangle();
  91:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     }
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** 
  93:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h **** private:
  94:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_sweep.h ****     struct pass_param {
 223              		.loc 5 94 0
 224 0028 04F83380 		strb	r8, [r4, r3, lsl #3]
 225 002c 04EBC300 		add	r0, r4, r3, lsl #3
 226 0030 04EBC103 		add	r3, r4, r1, lsl #3
 227              	.LVL17:
 228 0034 4770     		strb	r7, [r0, #1]
 229              	.LBB431:
 230              	.LBB432:
 231              	.LBB433:
 232              	.LBB434:
 233              	.LBB435:
 234              		.file 6 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h"
   1:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
   3:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // Copyright (C) 2007-2014 Free Software Foundation, Inc.
   4:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** //
   5:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // any later version.
  10:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  11:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // GNU General Public License for more details.
  15:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  16:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  20:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  25:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** /** @file bits/move.h
  26:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****  */
  29:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  30:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #ifndef _MOVE_H
  31:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #define _MOVE_H 1
  32:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  33:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #include <bits/c++config.h>
  34:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #include <bits/concept_check.h>
  35:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  36:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** {
  38:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  40:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
  42:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @ingroup utilities
  44:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    */
  45:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   template<typename _Tp>
  46:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     inline _Tp*
  47:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     {
  49:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  51:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     }
  52:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  53:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  54:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** } // namespace
  55:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  56:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #if __cplusplus >= 201103L
  57:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  59:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** {
  61:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  63:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
  64:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @addtogroup utilities
  65:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @{
  66:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    */
  67:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  68:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
  69:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *
  72:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    */
  74:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   template<typename _Tp>
  75:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     constexpr _Tp&&
  76:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  77:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  78:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  79:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
  80:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @brief  Forward an rvalue.
  81:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @return The parameter cast to the specified type.
  82:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *
  83:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  84:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    */
  85:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   template<typename _Tp>
  86:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     constexpr _Tp&&
  87:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  88:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     {
  89:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  90:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  91:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****       return static_cast<_Tp&&>(__t);
  92:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     }
  93:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
  94:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
  95:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  96:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  97:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  98:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   */
  99:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   template<typename _Tp>
 100:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
 101:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     move(_Tp&& __t) noexcept
 102:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 103:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 104:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 105:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   template<typename _Tp>
 106:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     struct __move_if_noexcept_cond
 107:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
 108:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****                     is_copy_constructible<_Tp>>::type { };
 109:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 110:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
 111:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @brief  Conditionally convert a value to an rvalue.
 112:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @param  __x  A thing of arbitrary type.
 113:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @return The parameter, possibly cast to an rvalue-reference.
 114:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *
 115:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  Same as std::move unless the type's move constructor could throw and the
 116:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  type is copyable, in which case an lvalue-reference is returned instead.
 117:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    */
 118:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   template<typename _Tp>
 119:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     constexpr typename
 120:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
 121:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     move_if_noexcept(_Tp& __x) noexcept
 122:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     { return std::move(__x); }
 123:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 124:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   // declval, from type_traits.
 125:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 126:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
 127:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @brief Returns the actual address of the object or function
 128:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *         referenced by r, even in the presence of an overloaded
 129:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *         operator&.
 130:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @param  __r  Reference to an object or function.
 131:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @return   The actual address.
 132:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   */
 133:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   template<typename _Tp>
 134:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     inline _Tp*
 135:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     addressof(_Tp& __r) noexcept
 136:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     { return std::__addressof(__r); }
 137:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 138:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /// @} group utilities
 139:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
 140:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** } // namespace
 141:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 142:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #define _GLIBCXX_MOVE(__val) std::move(__val)
 143:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
 144:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #else
 145:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #define _GLIBCXX_MOVE(__val) (__val)
 146:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) (__val)
 147:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #endif
 148:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 149:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
 150:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** {
 151:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 152:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 153:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
 154:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @addtogroup utilities
 155:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @{
 156:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    */
 157:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 158:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   /**
 159:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @brief Swaps two values.
 160:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @param  __a  A thing of arbitrary type.
 161:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @param  __b  Another thing of arbitrary type.
 162:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****    *  @return   Nothing.
 163:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   */
 164:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****   template<typename _Tp>
 165:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     inline void
 166:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     swap(_Tp& __a, _Tp& __b)
 167:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #if __cplusplus >= 201103L
 168:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 169:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 	            is_nothrow_move_assignable<_Tp>>::value)
 170:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** #endif
 171:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****     {
 172:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****       // concept requirements
 173:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
 174:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h **** 
 175:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****       _Tp __tmp = _GLIBCXX_MOVE(__a);
 235              		.loc 6 175 0
 236 0036 5868     		ldr	r0, [r3, #4]
 237              	.LVL18:
 176:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/move.h ****       __a = _GLIBCXX_MOVE(__b);
 238              		.loc 6 176 0
 239 0038 5E60     		str	r6, [r3, #4]
 240              	.LVL19:
 241              	.LBE435:
 242              	.LBE434:
 329:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	return __p;
 330:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       }
 331:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 332:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       /** @brief Replace the stored pointer.
 333:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 334:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * @param __p  The new pointer to store.
 335:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        *
 336:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        * The deleter will be invoked if a pointer is already owned.
 337:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****        */
 338:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       void
 339:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       reset(pointer __p = pointer()) noexcept
 340:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h ****       {
 341:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	using std::swap;
 342:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	swap(std::get<0>(_M_t), __p);
 343:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	if (__p != pointer())
 243              		.loc 1 343 0
 244 003a 08B1     		cbz	r0, .L11
 245              	.LVL20:
 344:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 	  get_deleter()(__p);
 246              		.loc 1 344 0
 247 003c 064B     		ldr	r3, .L15+8
 248              	.LVL21:
 249 003e 9847     		blx	r3
 250              	.LVL22:
 251              	.L11:
 252              	.LBE433:
 253              	.LBE432:
 254              	.LBE431:
 255              	.LBE430:
 256              	.LBE429:
  36:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     ++num_pass_;
 257              		.loc 2 36 0
 258 0040 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 259 0044 0133     		adds	r3, r3, #1
 260 0046 84F85030 		strb	r3, [r4, #80]
 261 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 262              	.LVL23:
 263              	.L16:
 264 004e 00BF     		.align	2
 265              	.L15:
 266 0050 00000000 		.word	.LANCHOR0
 267 0054 00000000 		.word	assert_failed
 268 0058 00000000 		.word	_ZNKSt14default_deleteI13contrast_passEclEPS0_.isra.2
 269              	.LBE436:
 270              		.cfi_endproc
 271              	.LFE2286:
 273              		.section	.text._ZN14contrast_sweep16initialize_sweepERK9rectangle,"ax",%progbits
 274              		.align	1
 275              		.global	_ZN14contrast_sweep16initialize_sweepERK9rectangle
 276              		.thumb
 277              		.thumb_func
 279              	_ZN14contrast_sweep16initialize_sweepERK9rectangle:
 280              	.LFB2289:
  37:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** }
  38:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  39:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** void contrast_sweep::initialize_sweep(const rectangle& roi) {
 281              		.loc 2 39 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286              	.LVL24:
  40:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     roi_ = roi;
 287              		.loc 2 40 0
 288 0000 00F5E072 		add	r2, r0, #448
  39:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     roi_ = roi;
 289              		.loc 2 39 0
 290 0004 0346     		mov	r3, r0
 291              		.loc 2 40 0
 292 0006 0868     		ldr	r0, [r1]	@ unaligned
 293              	.LVL25:
 294 0008 4968     		ldr	r1, [r1, #4]	@ unaligned
 295              	.LVL26:
 296 000a 03C2     		stmia	r2!, {r0, r1}
  41:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     pass_i_ = 0;
 297              		.loc 2 41 0
 298 000c 0022     		movs	r2, #0
 299 000e C3F8C821 		str	r2, [r3, #456]
  42:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     if (num_pass_ != 0)
 300              		.loc 2 42 0
 301 0012 93F85020 		ldrb	r2, [r3, #80]	@ zero_extendqisi2
 302 0016 1AB1     		cbz	r2, .L17
 303              	.LVL27:
 304              	.LBB437:
 305              	.LBB438:
 306              	.LBB439:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 307              		.loc 1 305 0
 308 0018 5868     		ldr	r0, [r3, #4]
 309              	.LBE439:
 310              	.LBE438:
 311              	.LBE437:
  43:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         pass_param_arr_[0].contrast_pass_p->initialize();
 312              		.loc 2 43 0
 313 001a 0368     		ldr	r3, [r0]
 314              	.LVL28:
 315 001c DB68     		ldr	r3, [r3, #12]
 316 001e 1847     		bx	r3	@ indirect register sibling call
 317              	.LVL29:
 318              	.L17:
 319 0020 7047     		bx	lr
 320              		.cfi_endproc
 321              	.LFE2289:
 323              		.section	.text._ZN14contrast_sweep26check_initialize_next_passEv,"ax",%progbits
 324              		.align	1
 325              		.global	_ZN14contrast_sweep26check_initialize_next_passEv
 326              		.thumb
 327              		.thumb_func
 329              	_ZN14contrast_sweep26check_initialize_next_passEv:
 330              	.LFB2290:
  44:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** }
  45:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  46:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** void contrast_sweep::check_initialize_next_pass() {
 331              		.loc 2 46 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              	.LVL30:
 336              	.LBB440:
  47:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     const contrast_pass& cp = *pass_param_arr_[pass_i_].contrast_pass_p;
 337              		.loc 2 47 0
 338 0000 D0F8C831 		ldr	r3, [r0, #456]
 339              	.LBE440:
  46:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     const contrast_pass& cp = *pass_param_arr_[pass_i_].contrast_pass_p;
 340              		.loc 2 46 0
 341 0004 73B5     		push	{r0, r1, r4, r5, r6, lr}
 342              	.LCFI3:
 343              		.cfi_def_cfa_offset 24
 344              		.cfi_offset 4, -16
 345              		.cfi_offset 5, -12
 346              		.cfi_offset 6, -8
 347              		.cfi_offset 14, -4
 348              	.LBB453:
 349              	.LBB441:
 350              	.LBB442:
 351              	.LBB443:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 352              		.loc 1 305 0
 353 0006 00EBC303 		add	r3, r0, r3, lsl #3
 354              	.LBE443:
 355              	.LBE442:
 356              	.LBE441:
 357              	.LBE453:
  46:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     const contrast_pass& cp = *pass_param_arr_[pass_i_].contrast_pass_p;
 358              		.loc 2 46 0
 359 000a 0446     		mov	r4, r0
 360              	.LBB454:
 361              	.LBB446:
 362              	.LBB445:
 363              	.LBB444:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 364              		.loc 1 305 0
 365 000c 5D68     		ldr	r5, [r3, #4]
 366              	.LBE444:
 367              	.LBE445:
 368              	.LBE446:
  48:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     if (cp.is_done()) {
 369              		.loc 2 48 0
 370 000e 2846     		mov	r0, r5
 371              	.LVL31:
 372 0010 2B68     		ldr	r3, [r5]
 373 0012 1B69     		ldr	r3, [r3, #16]
 374 0014 9847     		blx	r3
 375              	.LVL32:
 376 0016 18B3     		cbz	r0, .L19
  49:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         SLOGF(SLOG_INFO, "Contrast sweep pass completed, best_pos: %d, best_metric: %lld",
 377              		.loc 2 49 0
 378 0018 2B68     		ldr	r3, [r5]
 379 001a 2846     		mov	r0, r5
 380 001c 9B6A     		ldr	r3, [r3, #40]
 381 001e 9847     		blx	r3
 382              	.LVL33:
 383 0020 2B68     		ldr	r3, [r5]
 384 0022 DB6A     		ldr	r3, [r3, #44]
 385 0024 0646     		mov	r6, r0
 386 0026 2846     		mov	r0, r5
 387 0028 9847     		blx	r3
 388              	.LVL34:
  50:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****                 (int)cp.out_best_pos(), (long long int)cp.out_best_metric());
 389              		.loc 2 50 0
 390 002a 3346     		mov	r3, r6
 391 002c 0D4A     		ldr	r2, .L23
 392 002e 0E4E     		ldr	r6, .L23+4
 393 0030 CDE90001 		strd	r0, [sp]
 394 0034 2B20     		movs	r0, #43
 395 0036 0821     		movs	r1, #8
 396 0038 B047     		blx	r6
 397              	.LVL35:
  51:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         ++pass_i_;
 398              		.loc 2 51 0
 399 003a D4F8C831 		ldr	r3, [r4, #456]
  52:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         if (pass_i_ != num_pass_)
 400              		.loc 2 52 0
 401 003e 94F85020 		ldrb	r2, [r4, #80]	@ zero_extendqisi2
  51:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         ++pass_i_;
 402              		.loc 2 51 0
 403 0042 0133     		adds	r3, r3, #1
 404              		.loc 2 52 0
 405 0044 9342     		cmp	r3, r2
  51:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         ++pass_i_;
 406              		.loc 2 51 0
 407 0046 C4F8C831 		str	r3, [r4, #456]
 408              		.loc 2 52 0
 409 004a 09D0     		beq	.L19
 410              	.LVL36:
 411              	.LBB447:
 412              	.LBB448:
 413              	.LBB449:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 414              		.loc 1 305 0
 415 004c 04EBC304 		add	r4, r4, r3, lsl #3
 416              	.LVL37:
 417              	.LBE449:
 418              	.LBE448:
 419              	.LBE447:
  53:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****             pass_param_arr_[pass_i_].contrast_pass_p->initialize(cp);
 420              		.loc 2 53 0
 421 0050 2946     		mov	r1, r5
 422              	.LBB452:
 423              	.LBB451:
 424              	.LBB450:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 425              		.loc 1 305 0
 426 0052 6068     		ldr	r0, [r4, #4]
 427              	.LBE450:
 428              	.LBE451:
 429              	.LBE452:
 430              		.loc 2 53 0
 431 0054 0368     		ldr	r3, [r0]
 432              	.LVL38:
 433 0056 9B68     		ldr	r3, [r3, #8]
 434              	.LBE454:
  54:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     }
  55:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** }
 435              		.loc 2 55 0
 436 0058 02B0     		add	sp, sp, #8
 437              	.LCFI4:
 438              		.cfi_remember_state
 439              		.cfi_def_cfa_offset 16
 440              		@ sp needed
 441 005a BDE87040 		pop	{r4, r5, r6, lr}
 442              	.LCFI5:
 443              		.cfi_restore 14
 444              		.cfi_restore 6
 445              		.cfi_restore 5
 446              		.cfi_restore 4
 447              		.cfi_def_cfa_offset 0
 448              	.LBB455:
  53:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****             pass_param_arr_[pass_i_].contrast_pass_p->initialize(cp);
 449              		.loc 2 53 0
 450 005e 1847     		bx	r3	@ indirect register sibling call
 451              	.LVL39:
 452              	.L19:
 453              	.LCFI6:
 454              		.cfi_restore_state
 455              	.LBE455:
 456              		.loc 2 55 0
 457 0060 02B0     		add	sp, sp, #8
 458              	.LCFI7:
 459              		.cfi_def_cfa_offset 16
 460              		@ sp needed
 461 0062 70BD     		pop	{r4, r5, r6, pc}
 462              	.LVL40:
 463              	.L24:
 464              		.align	2
 465              	.L23:
 466 0064 00000000 		.word	.LC0
 467 0068 00000000 		.word	slogf
 468              		.cfi_endproc
 469              	.LFE2290:
 471              		.section	.text._ZN14contrast_sweep15start_lens_moveEv,"ax",%progbits
 472              		.align	1
 473              		.global	_ZN14contrast_sweep15start_lens_moveEv
 474              		.thumb
 475              		.thumb_func
 477              	_ZN14contrast_sweep15start_lens_moveEv:
 478              	.LFB2291:
  56:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  57:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** void contrast_sweep::start_lens_move() {
 479              		.loc 2 57 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 16
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL41:
 484              	.LBB456:
  58:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     if (pass_i_ == num_pass_) {
 485              		.loc 2 58 0
 486 0000 D0F8C831 		ldr	r3, [r0, #456]
 487              	.LBE456:
  57:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     if (pass_i_ == num_pass_) {
 488              		.loc 2 57 0
 489 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 490              	.LCFI8:
 491              		.cfi_def_cfa_offset 20
 492              		.cfi_offset 4, -20
 493              		.cfi_offset 5, -16
 494              		.cfi_offset 6, -12
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497              	.LBB465:
 498              		.loc 2 58 0
 499 0006 90F85020 		ldrb	r2, [r0, #80]	@ zero_extendqisi2
 500 000a 9342     		cmp	r3, r2
 501              	.LBE465:
  57:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     if (pass_i_ == num_pass_) {
 502              		.loc 2 57 0
 503 000c 87B0     		sub	sp, sp, #28
 504              	.LCFI9:
 505              		.cfi_def_cfa_offset 48
  57:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     if (pass_i_ == num_pass_) {
 506              		.loc 2 57 0
 507 000e 0446     		mov	r4, r0
 508 0010 00F15807 		add	r7, r0, #88
 509 0014 1A4E     		ldr	r6, .L28
 510              	.LBB466:
 511              		.loc 2 58 0
 512 0016 20D1     		bne	.L26
 513              	.LVL42:
 514              	.LBB457:
 515              	.LBB458:
 516              	.LBB459:
 517              	.LBB460:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 518              		.loc 1 305 0
 519 0018 00EBC303 		add	r3, r0, r3, lsl #3
 520              	.LVL43:
 521 001c 53F8040C 		ldr	r0, [r3, #-4]
 522              	.LVL44:
 523              	.LBE460:
 524              	.LBE459:
 525              	.LBE458:
  59:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         std::int16_t best_pos = pass_param_arr_[num_pass_-1].contrast_pass_p->out_best_pos();
 526              		.loc 2 59 0
 527 0020 0368     		ldr	r3, [r0]
 528 0022 9B6A     		ldr	r3, [r3, #40]
 529 0024 9847     		blx	r3
 530              	.LVL45:
  60:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         contrast_step_.start_move_lens(best_pos, 0);
 531              		.loc 2 60 0
 532 0026 0022     		movs	r2, #0
  59:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         std::int16_t best_pos = pass_param_arr_[num_pass_-1].contrast_pass_p->out_best_pos();
 533              		.loc 2 59 0
 534 0028 0546     		mov	r5, r0
 535              	.LVL46:
 536              		.loc 2 60 0
 537 002a 3846     		mov	r0, r7
 538 002c 2946     		mov	r1, r5
 539 002e B047     		blx	r6
 540              	.LVL47:
 541 0030 246F     		ldr	r4, [r4, #112]
 542              	.LVL48:
  61:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         cam_typedef_t& cam = *contrast_step_.camera();
  62:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         lens_position_control lpc{cam};
 543              		.loc 2 62 0
 544 0032 2146     		mov	r1, r4
 545 0034 02A8     		add	r0, sp, #8
 546 0036 134B     		ldr	r3, .L28+4
 547 0038 9847     		blx	r3
 548              	.LVL49:
  63:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         std::uint32_t focus_d_mm = lpc.get_object_distance_mm(best_pos, 300); // FIXME temperature
 549              		.loc 2 63 0
 550 003a 2946     		mov	r1, r5
 551 003c 02A8     		add	r0, sp, #8
 552 003e 4FF49672 		mov	r2, #300
 553 0042 114B     		ldr	r3, .L28+8
 554 0044 9847     		blx	r3
 555              	.LVL50:
  64:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         SLOGF(SLOG_DEBUG, "Contrast sweep completed, moving %X to best lens position %d which focus
 556              		.loc 2 64 0
 557 0046 94F82930 		ldrb	r3, [r4, #41]	@ zero_extendqisi2
  65:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****                 cam.info.module, best_pos, (unsigned int)focus_d_mm);
 558              		.loc 2 65 0
 559 004a 1021     		movs	r1, #16
  64:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         SLOGF(SLOG_DEBUG, "Contrast sweep completed, moving %X to best lens position %d which focus
 560              		.loc 2 64 0
 561 004c 0095     		str	r5, [sp]
 562              		.loc 2 65 0
 563 004e 0F4A     		ldr	r2, .L28+12
 564 0050 0F4C     		ldr	r4, .L28+16
 565 0052 0190     		str	r0, [sp, #4]
 566 0054 2B20     		movs	r0, #43
 567              	.LVL51:
 568 0056 A047     		blx	r4
 569              	.LVL52:
 570              	.LBE457:
 571 0058 0FE0     		b	.L25
 572              	.LVL53:
 573              	.L26:
 574              	.LBB461:
 575              	.LBB462:
 576              	.LBB463:
 577              	.LBB464:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 578              		.loc 1 305 0
 579 005a 00EBC304 		add	r4, r0, r3, lsl #3
 580 005e 6468     		ldr	r4, [r4, #4]
 581              	.LBE464:
 582              	.LBE463:
 583              	.LBE462:
  66:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     } else {
  67:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         contrast_pass& cp = *pass_param_arr_[pass_i_].contrast_pass_p;
  68:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         std::int16_t next_pos = cp.next_pos();
 584              		.loc 2 68 0
 585 0060 2046     		mov	r0, r4
 586              	.LVL54:
 587 0062 2368     		ldr	r3, [r4]
 588              	.LVL55:
 589 0064 5B69     		ldr	r3, [r3, #20]
 590 0066 9847     		blx	r3
 591              	.LVL56:
  69:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         contrast_step_.start_move_lens(next_pos, cp.tolerance());
 592              		.loc 2 69 0
 593 0068 2368     		ldr	r3, [r4]
 594 006a 9B69     		ldr	r3, [r3, #24]
  68:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****         contrast_step_.start_move_lens(next_pos, cp.tolerance());
 595              		.loc 2 68 0
 596 006c 0546     		mov	r5, r0
 597              	.LVL57:
 598              		.loc 2 69 0
 599 006e 2046     		mov	r0, r4
 600 0070 9847     		blx	r3
 601              	.LVL58:
 602 0072 2946     		mov	r1, r5
 603 0074 0246     		mov	r2, r0
 604 0076 3846     		mov	r0, r7
 605 0078 B047     		blx	r6
 606              	.LVL59:
 607              	.L25:
 608              	.LBE461:
 609              	.LBE466:
  70:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     }
  71:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** }
 610              		.loc 2 71 0
 611 007a 07B0     		add	sp, sp, #28
 612              	.LCFI10:
 613              		.cfi_def_cfa_offset 20
 614              		@ sp needed
 615 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 616              	.LVL60:
 617              	.L29:
 618 007e 00BF     		.align	2
 619              	.L28:
 620 0080 00000000 		.word	_ZN20contrast_refine_step15start_move_lensEst
 621 0084 00000000 		.word	_ZN21lens_position_controlC1ER13cam_typedef_t
 622 0088 00000000 		.word	_ZNK21lens_position_control22get_object_distance_mmEss
 623 008c 3F000000 		.word	.LC1
 624 0090 00000000 		.word	slogf
 625              		.cfi_endproc
 626              	.LFE2291:
 628              		.section	.text._ZN14contrast_sweep19start_capture_frameEv,"ax",%progbits
 629              		.align	1
 630              		.global	_ZN14contrast_sweep19start_capture_frameEv
 631              		.thumb
 632              		.thumb_func
 634              	_ZN14contrast_sweep19start_capture_frameEv:
 635              	.LFB2292:
  72:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  73:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** void contrast_sweep::start_capture_frame() {
 636              		.loc 2 73 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640              	.LVL61:
 641 0000 08B5     		push	{r3, lr}
 642              	.LCFI11:
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 3, -8
 645              		.cfi_offset 14, -4
  74:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     contrast_step_.start_capture_frame();
 646              		.loc 2 74 0
 647 0002 5830     		adds	r0, r0, #88
 648              	.LVL62:
 649 0004 014B     		ldr	r3, .L31
 650 0006 9847     		blx	r3
 651              	.LVL63:
 652 0008 08BD     		pop	{r3, pc}
 653              	.L32:
 654 000a 00BF     		.align	2
 655              	.L31:
 656 000c 00000000 		.word	_ZN20contrast_refine_step19start_capture_frameEv
 657              		.cfi_endproc
 658              	.LFE2292:
 660              		.section	.text._ZN14contrast_sweep22process_captured_frameEv,"ax",%progbits
 661              		.align	1
 662              		.global	_ZN14contrast_sweep22process_captured_frameEv
 663              		.thumb
 664              		.thumb_func
 666              	_ZN14contrast_sweep22process_captured_frameEv:
 667              	.LFB2293:
  75:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** }
  76:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  77:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** bool contrast_sweep::process_captured_frame() {
 668              		.loc 2 77 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 24
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              	.LVL64:
 673 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 674              	.LCFI12:
 675              		.cfi_def_cfa_offset 36
 676              		.cfi_offset 4, -36
 677              		.cfi_offset 5, -32
 678              		.cfi_offset 6, -28
 679              		.cfi_offset 7, -24
 680              		.cfi_offset 8, -20
 681              		.cfi_offset 9, -16
 682              		.cfi_offset 10, -12
 683              		.cfi_offset 11, -8
 684              		.cfi_offset 14, -4
 685 0004 B0F8B431 		ldrh	r3, [r0, #436]
 686              	.LVL65:
 687 0008 0446     		mov	r4, r0
 688 000a 97B0     		sub	sp, sp, #92
 689              	.LCFI13:
 690              		.cfi_def_cfa_offset 128
 691              	.LBB521:
  78:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     contrast_pass::measurement_t meas;
  79:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     meas.pos = contrast_step_.measurement_position();
  80:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     SLOGF(SLOG_DEBUG, "Will compute contrast metrics at position %d", (int)meas.pos);
 692              		.loc 2 80 0
 693 000c 5D4D     		ldr	r5, .L34
 694 000e 2B20     		movs	r0, #43
 695              	.LVL66:
  79:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     SLOGF(SLOG_DEBUG, "Will compute contrast metrics at position %d", (int)meas.pos);
 696              		.loc 2 79 0
 697 0010 ADF84030 		strh	r3, [sp, #64]	@ movhi
 698              		.loc 2 80 0
 699 0014 1021     		movs	r1, #16
 700 0016 5C4A     		ldr	r2, .L34+4
 701 0018 1BB2     		sxth	r3, r3
 702 001a A847     		blx	r5
 703              	.LVL67:
 704 001c D4F8C831 		ldr	r3, [r4, #456]
  81:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::uint32_t metrics_mask = 1 << pass_param_arr_[pass_i_].metric1_t;
 705              		.loc 2 81 0
 706 0020 0122     		movs	r2, #1
  82:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     metrics_mask |= 1 << pass_param_arr_[pass_i_].metric2_t;
  83:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     metrics_mask |= 1 << contrast_processor::FILTERED_GRADIENT_TH;
  84:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     metrics_mask |= 1 << contrast_processor::GRADIENT_TH;
  85:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     metrics_mask |= 1 << contrast_processor::INTENSITY;
  86:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     contrast_step_.compute_sharpness_metric(roi_, metrics_mask);
 707              		.loc 2 86 0
 708 0022 04F15800 		add	r0, r4, #88
 709              	.LVL68:
 710 0026 04EBC301 		add	r1, r4, r3, lsl #3
  81:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::uint32_t metrics_mask = 1 << pass_param_arr_[pass_i_].metric1_t;
 711              		.loc 2 81 0
 712 002a 14F83330 		ldrb	r3, [r4, r3, lsl #3]	@ zero_extendqisi2
  82:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     metrics_mask |= 1 << pass_param_arr_[pass_i_].metric2_t;
 713              		.loc 2 82 0
 714 002e 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
  81:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::uint32_t metrics_mask = 1 << pass_param_arr_[pass_i_].metric1_t;
 715              		.loc 2 81 0
 716 0030 02FA03F3 		lsl	r3, r2, r3
 717              	.LVL69:
  82:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     metrics_mask |= 1 << pass_param_arr_[pass_i_].metric2_t;
 718              		.loc 2 82 0
 719 0034 8A40     		lsls	r2, r2, r1
 720 0036 1A43     		orrs	r2, r2, r3
 721              	.LVL70:
 722              		.loc 2 86 0
 723 0038 04F5E071 		add	r1, r4, #448
 724 003c 42F42872 		orr	r2, r2, #672
 725              	.LVL71:
 726 0040 524B     		ldr	r3, .L34+8
 727 0042 9847     		blx	r3
 728              	.LVL72:
 729              	.LBB522:
 730              	.LBB523:
 731              		.file 7 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h"
   1:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** /*******************************************************************************
   2:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * Copyright (c) 2016, The LightCo
   3:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * All rights reserved.
   4:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * Redistribution and use in source and binary forms, with or without
   5:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * modification, are strictly prohibited without prior permission
   6:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * of The LightCo.
   7:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  *
   8:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * @file    contrast_refine_step.h
   9:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * @author  The LightCo
  10:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * @version V1.0.0
  11:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * @date    August-8-2016
  12:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * @brief   Implements one step of contrast refinement iteration
  13:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  *
  14:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  ******************************************************************************/
  15:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  16:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #ifndef __CONTRAST_REFINE_STEP_H__
  17:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #define __CONTRAST_REFINE_STEP_H__
  18:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  19:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #include "os.h"
  20:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #include "af_helper.h"
  21:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #include "lens_position_control.h"
  22:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #include "rectangle.h"
  23:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #include "contrast_processor.h"
  24:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  25:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #ifdef __cplusplus
  26:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  27:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #include <atomic>
  28:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** #include <cstdint>
  29:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  30:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** extern "C" void crs_mipi2axi_callback(uint8_t iidx, uint32_t signal_irq_detail,
  31:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****         uint32_t error_irq_detail, void *user_data);
  32:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  33:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** void lens_movement_done_cb(void* user_data, bool success, std::int16_t pos);
  34:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  35:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** /**
  36:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  * Implements one step of contrast refinement iteration
  37:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****  */
  38:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** class contrast_refine_step {
  39:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     friend void crs_mipi2axi_callback(uint8_t iidx, uint32_t signal_irq_detail,
  40:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****             uint32_t error_irq_detail, void *user_data);
  41:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  42:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     friend void lens_movement_done_cb(void* user_data, bool success, std::int16_t pos);
  43:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  44:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** public:
  45:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     /**
  46:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * Constructor
  47:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @param cam Camera module object
  48:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @param scale Set to 1 for native resolution, 2 for scale/bin of 2 in x and y
  49:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @param min_capture_rect Minimum rectangle that needs to be captured to fit ROIs
  50:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @param event_group Event group for lens move done and capture done events
  51:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @param lens_move_done_event Event to signal that lens move is completed
  52:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @param capture_done_event Event to signal that roi image capture is completed
  53:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      */
  54:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     contrast_refine_step(cam_typedef_t& cam, std::uint16_t scale,
  55:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****             const rectangle& min_capture_rect, void *image_buffer_p,
  56:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****             EventGroupHandle_t event_group,
  57:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****             EventBits_t lens_move_done_event, EventBits_t capture_done_event);
  58:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  59:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     ~contrast_refine_step();
  60:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  61:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     /**
  62:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * Start moving lens
  63:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @param pos Target lens position
  64:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @param tolerance Tolerance for target lens position
  65:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      */
  66:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     void start_move_lens(std::int16_t pos, std::uint16_t tolerance);
  67:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  68:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     /**
  69:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      *  Start capturing frame
  70:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      */
  71:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     void start_capture_frame();
  72:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  73:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     /**
  74:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * Compute sharpness metric
  75:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      */
  76:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     void compute_sharpness_metric(const rectangle& roi, std::uint32_t metrics_mask);
  77:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  78:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     /**
  79:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @return Actual measurement lens position
  80:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      */
  81:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     std::int16_t measurement_position() const {
  82:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****         return measurement_position_;
  83:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
  84:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  85:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     using metric_type = contrast_processor::metric_type;
  86:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     using metrics_per_color = contrast_processor::metrics_per_color;
  87:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  88:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     /**
  89:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @return Return sharpness metric
  90:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      */
  91:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     contrast_processor::metrics_per_color get_metric(metric_type metric) const {
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****         return metrics_arr_[metric];
  93:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
  94:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
  95:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     /**
  96:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @return Return normalized gradient sharpness metric
  97:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      */
  98:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     std::int64_t sharpness_metric_gradient_norm() const {
  99:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****         return sharpness_metric_gradient_norm_;
 732              		.loc 7 99 0
 733 0044 04F5CC73 		add	r3, r4, #408
 734 0048 D3E90023 		ldrd	r2, [r3]
 735 004c CDE90C23 		strd	r2, [sp, #48]
 736              	.LVL73:
 737              	.LBE523:
 738              	.LBE522:
 739              	.LBB524:
 740              	.LBB525:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 741              		.loc 7 92 0
 742 0050 04F5AC72 		add	r2, r4, #344
 743 0054 04F5A873 		add	r3, r4, #336
 744              	.LBE525:
 745              	.LBE524:
 746              	.LBB527:
 747              	.LBB528:
 748              		.file 8 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h"
   1:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** /*******************************************************************************
   2:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * Copyright (c) 2016, The LightCo
   3:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * All rights reserved.
   4:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * Redistribution and use in source and binary forms, with or without
   5:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * modification, are strictly prohibited without prior permission
   6:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * of The LightCo.
   7:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  *
   8:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * @file    contrast_processor.h
   9:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * @author  The LightCo
  10:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * @version V1.0.0
  11:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * @date    July-14-2016
  12:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  * @brief   Contrast processing for auto focus refinement
  13:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  *
  14:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****  ******************************************************************************/
  15:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  16:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #ifndef __CONTRAST_PROCESSOR_H__
  17:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #define __CONTRAST_PROCESSOR_H__
  18:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  19:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #ifdef __cplusplus
  20:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** extern "C" {
  21:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #endif
  22:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** void process_contrast_test(unsigned int img_addr);
  23:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #ifdef __cplusplus
  24:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** }
  25:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #endif
  26:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  27:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #ifdef __cplusplus
  28:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  29:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #include <cstdint>
  30:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #include <array>
  31:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #include <bitset>
  32:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** #include "image_pixel_iter.h"
  33:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  34:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** template<typename T, std::size_t S>
  35:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** class circular_cache_buffer {
  36:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** public:
  37:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     void advance() {
  38:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         if (++index_ == S)
  39:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****             index_ = 0;
  40:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     }
  41:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  42:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     T& ref(std::uint16_t delta = 0) {
  43:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         return array_[circ_index(delta)];
  44:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     }
  45:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  46:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     const T& ref(std::uint16_t delta = 0) const {
  47:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         return array_[circ_index(delta)];
  48:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     }
  49:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  50:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** private:
  51:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     std::size_t circ_index(std::size_t delta) const {
  52:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         std::size_t ci;
  53:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         delta = delta % S;
  54:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         if (delta <= index_)
  55:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****             ci = index_ - delta;
  56:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         else
  57:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****             ci = S - delta + index_;
  58:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         return ci;
  59:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     }
  60:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  61:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     std::size_t index_{0};
  62:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     std::array<T, S> array_;
  63:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** };
  64:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  65:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** class contrast_processor {
  66:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** public:
  67:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  68:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     enum metric_type {
  69:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         GRADIENT,
  70:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         LAPLACIAN1,
  71:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         LAPLACIAN2,
  72:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         DECIMATED2_GRADIENT,
  73:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         DECIMATED4_GRADIENT,
  74:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         INTENSITY,
  75:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         ENERGY,
  76:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         GRADIENT_TH,
  77:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         DECIMATED4_GRADIENT_TH,
  78:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         FILTERED_GRADIENT_TH,
  79:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         NUM_METRICS
  80:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     };
  81:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  82:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	contrast_processor(std::uint16_t first_roi_pixel, std::uint16_t roi_width);
  83:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  84:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	void process_line(image_pixel_iter line_start);
  85:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  86:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	std::uint64_t get_metric_green(metric_type metric) const {
  87:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 		return metrics_arr_[metric].green;
  88:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	}
  89:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  90:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	std::uint64_t get_metric_red(metric_type metric) const {
  91:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         return metrics_arr_[metric].red;
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	}
  93:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  94:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	std::uint64_t get_metric_blue(metric_type metric) const {
  95:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         return metrics_arr_[metric].blue;
  96:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	}
  97:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
  98:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	std::uint64_t get_metric(metric_type metric) const {
  99:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 		return metrics_arr_[metric].total_metric();
 100:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 	}
 101:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 102:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     static const std::size_t MAX_ROI_WIDTH = 180;
 103:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     static const std::size_t NUM_LINES_CACHE = 5;
 104:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     using roi_color_line = std::array<std::int16_t, MAX_ROI_WIDTH>;
 105:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     using roi_color_cache = circular_cache_buffer<roi_color_line, NUM_LINES_CACHE>;
 106:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 107:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     struct metric_algo_desc {
 108:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         std::uint16_t min_lines;
 109:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         std::uint64_t (*get_green_line_metric_fun)(const roi_color_cache& green_cache, std::uint16_
 110:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         std::uint64_t (*get_rb_line_metric_fun)(const roi_color_cache& color_cache, std::uint16_t w
 111:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     };
 112:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 113:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     void enable_metric(metric_type mt) {
 114:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         metrics_enable_[mt] = true;
 115:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     }
 116:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 117:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     void disable_metric(metric_type mt) {
 118:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         metrics_enable_[mt] = false;
 119:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     }
 120:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 121:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     void enable_all_metrics() {
 122:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         metrics_enable_.set();
 123:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     }
 124:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 125:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     void disable_all_metrics() {
 126:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         metrics_enable_.reset();
 127:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     }
 128:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 129:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     void enable_metrics(std::uint32_t metrics_mask);
 130:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 131:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****     struct metrics_per_color {
 132:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         std::uint64_t green;
 133:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         std::uint64_t red;
 134:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         std::uint64_t blue;
 135:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 136:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         metrics_per_color() :
 137:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****                 green{0}, red{0}, blue{0} {
 138:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         }
 139:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h **** 
 140:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****         std::uint64_t total_metric() const {
 141:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_processor.h ****             return green + red + blue;
 749              		.loc 8 141 0
 750 0058 D2E90001 		ldrd	r0, [r2]
 751 005c D3E90023 		ldrd	r2, [r3]
 752 0060 1218     		adds	r2, r2, r0
 753 0062 4B41     		adcs	r3, r3, r1
 754              	.LBE528:
 755              	.LBE527:
 756              	.LBB531:
 757              	.LBB526:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 758              		.loc 7 92 0
 759 0064 04F5B071 		add	r1, r4, #352
 760              	.LBE526:
 761              	.LBE531:
 762              	.LBB532:
 763              	.LBB529:
 764              		.loc 8 141 0
 765 0068 D1E90001 		ldrd	r0, [r1]
 766 006c 1618     		adds	r6, r2, r0
 767 006e 43EB0107 		adc	r7, r3, r1
 768              	.LBE529:
 769              	.LBE532:
 770              	.LBB533:
 771              	.LBB534:
 772 0072 D4E92C01 		ldrd	r0, [r4, #176]
 773 0076 D4E92A23 		ldrd	r2, [r4, #168]
 774              	.LBE534:
 775              	.LBE533:
 776              	.LBB537:
 777              	.LBB530:
 778 007a CDE90467 		strd	r6, [sp, #16]
 779              	.LVL74:
 780              	.LBE530:
 781              	.LBE537:
 782              	.LBB538:
 783              	.LBB535:
 784 007e D4E92E67 		ldrd	r6, [r4, #184]
 785 0082 1218     		adds	r2, r2, r0
 786 0084 4B41     		adcs	r3, r3, r1
 787 0086 9019     		adds	r0, r2, r6
 788 0088 43EB0701 		adc	r1, r3, r7
 789              	.LBE535:
 790              	.LBE538:
 791              	.LBB539:
 792              	.LBB540:
 100:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 101:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h **** 
 102:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     /**
 103:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      * @return Return variance metric
 104:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****      */
 105:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     std::uint64_t sharpness_metric_variance() const {
 106:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****         return sharpness_metric_variance_;
 793              		.loc 7 106 0
 794 008c 04F5D073 		add	r3, r4, #416
 795              	.LBE540:
 796              	.LBE539:
 797              	.LBB542:
 798              	.LBB536:
 799              		.loc 8 141 0
 800 0090 CDE90601 		strd	r0, [sp, #24]
 801              	.LVL75:
 802              	.LBE536:
 803              	.LBE542:
 804              	.LBB543:
 805              	.LBB541:
 806              		.loc 7 106 0
 807 0094 D3E90023 		ldrd	r2, [r3]
 808 0098 CDE90E23 		strd	r2, [sp, #56]
 809              	.LVL76:
 810              	.LBE541:
 811              	.LBE543:
 812              	.LBB544:
 813              	.LBB545:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 814              		.loc 7 92 0
 815 009c 04F5B872 		add	r2, r4, #368
 816 00a0 04F5B473 		add	r3, r4, #360
 817              	.LBE545:
 818              	.LBE544:
 819              	.LBB547:
 820              	.LBB548:
 821              		.loc 8 141 0
 822 00a4 D2E90001 		ldrd	r0, [r2]
 823 00a8 D3E90023 		ldrd	r2, [r3]
 824 00ac 1218     		adds	r2, r2, r0
 825 00ae 4B41     		adcs	r3, r3, r1
 826              	.LBE548:
 827              	.LBE547:
 828              	.LBB551:
 829              	.LBB546:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 830              		.loc 7 92 0
 831 00b0 04F5BC71 		add	r1, r4, #376
 832              	.LBE546:
 833              	.LBE551:
 834              	.LBB552:
 835              	.LBB549:
 836              		.loc 8 141 0
 837 00b4 D1E90001 		ldrd	r0, [r1]
 838 00b8 1618     		adds	r6, r2, r0
 839 00ba 43EB0107 		adc	r7, r3, r1
 840              	.LBE549:
 841              	.LBE552:
 842              	.LBB553:
 843              	.LBB554:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 844              		.loc 7 92 0
 845 00be 04F5C472 		add	r2, r4, #392
 846 00c2 04F5C073 		add	r3, r4, #384
 847              	.LBE554:
 848              	.LBE553:
 849              	.LBB556:
 850              	.LBB550:
 851              		.loc 8 141 0
 852 00c6 CDE90867 		strd	r6, [sp, #32]
 853              	.LVL77:
 854              	.LBE550:
 855              	.LBE556:
 856              	.LBB557:
 857              	.LBB555:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 858              		.loc 7 92 0
 859 00ca 04F5C871 		add	r1, r4, #400
 860              	.LBE555:
 861              	.LBE557:
 862              	.LBB558:
 863              	.LBB559:
 864              		.loc 8 141 0
 865 00ce D2E900AB 		ldrd	r10, [r2]
 866              	.LBE559:
 867              	.LBE558:
 868              	.LBB562:
 869              	.LBB563:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 870              		.loc 7 92 0
 871 00d2 04F1A806 		add	r6, r4, #168
 872              	.LBE563:
 873              	.LBE562:
 874              	.LBB566:
 875              	.LBB560:
 876              		.loc 8 141 0
 877 00d6 D3E90023 		ldrd	r2, [r3]
 878              	.LBE560:
 879              	.LBE566:
 880              	.LBB567:
 881              	.LBB564:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 882              		.loc 7 92 0
 883 00da 1827     		movs	r7, #24
 884              	.LBE564:
 885              	.LBE567:
 886              	.LBB568:
 887              	.LBB561:
 888              		.loc 8 141 0
 889 00dc 12EB0A02 		adds	r2, r2, r10
 890 00e0 43EB0B03 		adc	r3, r3, fp
 891 00e4 D1E900AB 		ldrd	r10, [r1]
 892 00e8 1AEB020A 		adds	r10, r10, r2
 893 00ec 4BEB030B 		adc	fp, fp, r3
 894              	.LVL78:
 895 00f0 D4F8C831 		ldr	r3, [r4, #456]
 896              	.LBE561:
 897              	.LBE568:
 898              	.LBB569:
 899              	.LBB565:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 900              		.loc 7 92 0
 901 00f4 14F833C0 		ldrb	ip, [r4, r3, lsl #3]	@ zero_extendqisi2
 902 00f8 07FB0C6C 		mla	ip, r7, ip, r6
 903 00fc 04EBC30E 		add	lr, r4, r3, lsl #3
 904              	.LVL79:
 905              	.LBE565:
 906              	.LBE569:
 907              	.LBB570:
 908              	.LBB571:
 909              		.loc 8 141 0
 910 0100 DCE90201 		ldrd	r0, [ip, #8]
 911 0104 DCE90023 		ldrd	r2, [ip]
 912 0108 DCE90489 		ldrd	r8, [ip, #16]
 913 010c 1218     		adds	r2, r2, r0
 914 010e 4B41     		adcs	r3, r3, r1
 915 0110 18EB0208 		adds	r8, r8, r2
 916 0114 49EB0309 		adc	r9, r9, r3
 917              	.LBE571:
 918              	.LBE570:
 919              	.LBB572:
 920              	.LBB573:
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_refine_step.h ****     }
 921              		.loc 7 92 0
 922 0118 9EF80130 		ldrb	r3, [lr, #1]	@ zero_extendqisi2
 923 011c 07FB0366 		mla	r6, r7, r3, r6
 924              	.LBE573:
 925              	.LBE572:
  87:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::int64_t metric_gnorm = contrast_step_.sharpness_metric_gradient_norm();
  88:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::uint64_t metric_gth = contrast_step_.get_metric(contrast_processor::GRADIENT_TH).total_met
  89:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::uint64_t metric_g = contrast_step_.get_metric(contrast_processor::GRADIENT).total_metric()
  90:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::uint64_t metric_var = contrast_step_.sharpness_metric_variance();
  91:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::uint64_t metric_d4gth = contrast_step_.get_metric(contrast_processor::DECIMATED4_GRADIENT_
  92:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     std::uint64_t metric_fgth = contrast_step_.get_metric(contrast_processor::FILTERED_GRADIENT_TH)
  93:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     meas.metric1 = contrast_step_.get_metric(pass_param_arr_[pass_i_].metric1_t).total_metric();
 926              		.loc 2 93 0
 927 0120 CDE91289 		strd	r8, [sp, #72]
 928              	.LVL80:
 929              	.LBB574:
 930              	.LBB575:
 931              		.loc 8 141 0
 932 0124 D6E90201 		ldrd	r0, [r6, #8]
 933 0128 D6E90023 		ldrd	r2, [r6]
 934 012c D6E90467 		ldrd	r6, [r6, #16]
 935 0130 1218     		adds	r2, r2, r0
 936 0132 4B41     		adcs	r3, r3, r1
 937              	.LVL81:
 938 0134 9219     		adds	r2, r2, r6
 939 0136 7B41     		adcs	r3, r3, r7
 940              	.LBE575:
 941              	.LBE574:
  94:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     meas.metric2 = contrast_step_.get_metric(pass_param_arr_[pass_i_].metric2_t).total_metric();
  95:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     SLOGF(SLOG_DEBUG, "Metric at position %d is %lld, %lld (%lld, %lld, %lld, %lld, %lld, %lld)", (
  96:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****             meas.metric1, meas.metric2, metric_gth, metric_g, metric_d4gth, metric_fgth, metric_gno
 942              		.loc 2 96 0
 943 0138 2B20     		movs	r0, #43
  94:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     meas.metric2 = contrast_step_.get_metric(pass_param_arr_[pass_i_].metric2_t).total_metric();
 944              		.loc 2 94 0
 945 013a CDE91423 		strd	r2, [sp, #80]
  95:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****             meas.metric1, meas.metric2, metric_gth, metric_g, metric_d4gth, metric_fgth, metric_gno
 946              		.loc 2 95 0
 947 013e 16AF     		add	r7, sp, #88
 948              		.loc 2 96 0
 949 0140 1021     		movs	r1, #16
  95:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****             meas.metric1, meas.metric2, metric_gth, metric_g, metric_d4gth, metric_fgth, metric_gno
 950              		.loc 2 95 0
 951 0142 37F9186D 		ldrsh	r6, [r7, #-24]!
 952              		.loc 2 96 0
 953 0146 CDE90223 		strd	r2, [sp, #8]
 954              	.LVL82:
 955 014a 3346     		mov	r3, r6
 956 014c 104A     		ldr	r2, .L34+12
 957 014e CDE90089 		strd	r8, [sp]
 958 0152 CDE90AAB 		strd	r10, [sp, #40]
 959 0156 A847     		blx	r5
 960              	.LVL83:
  97:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** 
  98:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     pass_param_arr_[pass_i_].contrast_pass_p->set_measurement(meas);
 961              		.loc 2 98 0
 962 0158 D4F8C831 		ldr	r3, [r4, #456]
 963 015c 3946     		mov	r1, r7
 964              	.LBB576:
 965              	.LBB577:
 966              	.LBB578:
 305:/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/unique_ptr.h **** 
 967              		.loc 1 305 0
 968 015e 04EBC303 		add	r3, r4, r3, lsl #3
 969 0162 5868     		ldr	r0, [r3, #4]
 970              	.LBE578:
 971              	.LBE577:
 972              	.LBE576:
 973              		.loc 2 98 0
 974 0164 0368     		ldr	r3, [r0]
 975 0166 DB69     		ldr	r3, [r3, #28]
 976 0168 9847     		blx	r3
 977              	.LVL84:
  99:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     check_initialize_next_pass();
 978              		.loc 2 99 0
 979 016a 2046     		mov	r0, r4
 980 016c 094B     		ldr	r3, .L34+16
 981 016e 9847     		blx	r3
 982              	.LVL85:
 100:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp ****     return (pass_i_ == num_pass_);
 983              		.loc 2 100 0
 984 0170 D4F8C801 		ldr	r0, [r4, #456]
 985 0174 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 986              	.LBE521:
 101:/home/tienluong/workspace/atlantis_fw/AsicFwS2/src/contrast_sweep.cpp **** }
 987              		.loc 2 101 0
 988 0178 C31A     		subs	r3, r0, r3
 989 017a 5842     		rsbs	r0, r3, #0
 990 017c 5841     		adcs	r0, r0, r3
 991 017e 17B0     		add	sp, sp, #92
 992              	.LCFI14:
 993              		.cfi_def_cfa_offset 36
 994              		@ sp needed
 995 0180 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 996              	.LVL86:
 997              	.L35:
 998              		.align	2
 999              	.L34:
 1000 0184 00000000 		.word	slogf
 1001 0188 A2000000 		.word	.LC2
 1002 018c 00000000 		.word	_ZN20contrast_refine_step24compute_sharpness_metricERK9rectanglem
 1003 0190 CF000000 		.word	.LC3
 1004 0194 00000000 		.word	_ZN14contrast_sweep26check_initialize_next_passEv
 1005              		.cfi_endproc
 1006              	.LFE2293:
 1008              		.section	.rodata.str1.1,"aMS",%progbits,1
 1009              	.LC0:
 1010 0000 436F6E74 		.ascii	"Contrast sweep pass completed, best_pos: %d, best_m"
 1010      72617374 
 1010      20737765 
 1010      65702070 
 1010      61737320 
 1011 0033 65747269 		.ascii	"etric: %lld\000"
 1011      633A2025 
 1011      6C6C6400 
 1012              	.LC1:
 1013 003f 436F6E74 		.ascii	"Contrast sweep completed, moving %X to best lens po"
 1013      72617374 
 1013      20737765 
 1013      65702063 
 1013      6F6D706C 
 1014 0072 73697469 		.ascii	"sition %d which focuses at object distance %umm\000"
 1014      6F6E2025 
 1014      64207768 
 1014      69636820 
 1014      666F6375 
 1015              	.LC2:
 1016 00a2 57696C6C 		.ascii	"Will compute contrast metrics at position %d\000"
 1016      20636F6D 
 1016      70757465 
 1016      20636F6E 
 1016      74726173 
 1017              	.LC3:
 1018 00cf 4D657472 		.ascii	"Metric at position %d is %lld, %lld (%lld, %lld, %l"
 1018      69632061 
 1018      7420706F 
 1018      73697469 
 1018      6F6E2025 
 1019 0102 6C642C20 		.ascii	"ld, %lld, %lld, %lld)\000"
 1019      256C6C64 
 1019      2C20256C 
 1019      6C642C20 
 1019      256C6C64 
 1020              		.section	.rodata._ZZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10un
 1021              		.set	.LANCHOR0,. + 0
 1024              	_ZZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI13contras
 1025 0000 6164645F 		.ascii	"add_iter_param\000"
 1025      69746572 
 1025      5F706172 
 1025      616D00
 1026              		.text
 1027              	.Letext0:
 1028              		.file 9 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/machine/_default_types
 1029              		.file 10 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/lib/gcc/arm-none-eabi/4.9.3/include/stddef.
 1030              		.file 11 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/lib/gcc/arm-none-eabi/4.9.3/include/stdarg.
 1031              		.file 12 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/sys/lock.h"
 1032              		.file 13 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/sys/_types.h"
 1033              		.file 14 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/sys/reent.h"
 1034              		.file 15 "<built-in>"
 1035              		.file 16 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/stdint.h"
 1036              		.file 17 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/portable/GCC/cortex-r4/portmacr
 1037              		.file 18 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/include/queue.h"
 1038              		.file 19 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/include/semphr.h"
 1039              		.file 20 "/home/tienluong/workspace/atlantis_fw/platform/os/Source/include/event_groups.h"
 1040              		.file 21 "/home/tienluong/workspace/atlantis_fw/platform/asic/hal/include/hal_syncio.h"
 1041              		.file 22 "/home/tienluong/workspace/atlantis_fw/platform/asic/hal/include/hal_i2c.h"
 1042              		.file 23 "/home/tienluong/workspace/atlantis_fw/platform/asic/hal/include/hal_mipi2axi.h"
 1043              		.file 24 "/home/tienluong/workspace/atlantis_fw/platform/common/lcc_system.h"
 1044              		.file 25 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/img_sensor.h"
 1045              		.file 26 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/optical.h"
 1046              		.file 27 "/home/tienluong/workspace/atlantis_fw/platform/driver/include/eeprom.h"
 1047              		.file 28 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/light_system.h"
 1048              		.file 29 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/af_helper.h"
 1049              		.file 30 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/cstdint"
 1050              		.file 31 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/arm-none-ea
 1051              		.file 32 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/except
 1052              		.file 33 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/type_traits
 1053              		.file 34 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/cwchar"
 1054              		.file 35 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/char_t
 1055              		.file 36 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/stl_pa
 1056              		.file 37 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/new"
 1057              		.file 38 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/alloca
 1058              		.file 39 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/clocale"
 1059              		.file 40 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/basic_
 1060              		.file 41 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/basic_
 1061              		.file 42 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bitset"
 1062              		.file 43 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/atomic
 1063              		.file 44 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/atomic"
 1064              		.file 45 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/uses_a
 1065              		.file 46 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/shared
 1066              		.file 47 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/lens_position_control.h"
 1067              		.file 48 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/rectangle.h"
 1068              		.file 49 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/exception"
 1069              		.file 50 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/debug/debug
 1070              		.file 51 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/bits/predef
 1071              		.file 52 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/ext/new_all
 1072              		.file 53 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/ext/numeric
 1073              		.file 54 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/ext/concurr
 1074              		.file 55 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/wchar.h"
 1075              		.file 56 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/locale.h"
 1076              		.file 57 "/opt/toolchains/gcc-arm-none-eabi-4_9-2015q1/arm-none-eabi/include/c++/4.9.3/arm-none-ea
 1077              		.file 58 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/image_pixel_iter.h"
 1078              		.file 59 "/home/tienluong/workspace/atlantis_fw/AsicFwS2/include/contrast_pass.h"
DEFINED SYMBOLS
                            *ABS*:00000000 contrast_sweep.cpp
     /tmp/ccFyksob.s:19     .text._ZNKSt14default_deleteI13contrast_passEclEPS0_.isra.2:00000000 $t
     /tmp/ccFyksob.s:23     .text._ZNKSt14default_deleteI13contrast_passEclEPS0_.isra.2:00000000 _ZNKSt14default_deleteI13contrast_passEclEPS0_.isra.2
     /tmp/ccFyksob.s:44     .text._ZN14contrast_sweepC2ER13cam_typedef_ttRK9rectanglePvS5_mm:00000000 $t
     /tmp/ccFyksob.s:49     .text._ZN14contrast_sweepC2ER13cam_typedef_ttRK9rectanglePvS5_mm:00000000 _ZN14contrast_sweepC2ER13cam_typedef_ttRK9rectanglePvS5_mm
     /tmp/ccFyksob.s:139    .text._ZN14contrast_sweepC2ER13cam_typedef_ttRK9rectanglePvS5_mm:00000044 $d
     /tmp/ccFyksob.s:49     .text._ZN14contrast_sweepC2ER13cam_typedef_ttRK9rectanglePvS5_mm:00000000 _ZN14contrast_sweepC1ER13cam_typedef_ttRK9rectanglePvS5_mm
     /tmp/ccFyksob.s:147    .text._ZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI13contrast_passSt14default_deleteIS3_EE:00000000 $t
     /tmp/ccFyksob.s:152    .text._ZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI13contrast_passSt14default_deleteIS3_EE:00000000 _ZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI13contrast_passSt14default_deleteIS3_EE
     /tmp/ccFyksob.s:266    .text._ZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI13contrast_passSt14default_deleteIS3_EE:00000050 $d
     /tmp/ccFyksob.s:274    .text._ZN14contrast_sweep16initialize_sweepERK9rectangle:00000000 $t
     /tmp/ccFyksob.s:279    .text._ZN14contrast_sweep16initialize_sweepERK9rectangle:00000000 _ZN14contrast_sweep16initialize_sweepERK9rectangle
     /tmp/ccFyksob.s:324    .text._ZN14contrast_sweep26check_initialize_next_passEv:00000000 $t
     /tmp/ccFyksob.s:329    .text._ZN14contrast_sweep26check_initialize_next_passEv:00000000 _ZN14contrast_sweep26check_initialize_next_passEv
     /tmp/ccFyksob.s:466    .text._ZN14contrast_sweep26check_initialize_next_passEv:00000064 $d
     /tmp/ccFyksob.s:472    .text._ZN14contrast_sweep15start_lens_moveEv:00000000 $t
     /tmp/ccFyksob.s:477    .text._ZN14contrast_sweep15start_lens_moveEv:00000000 _ZN14contrast_sweep15start_lens_moveEv
     /tmp/ccFyksob.s:620    .text._ZN14contrast_sweep15start_lens_moveEv:00000080 $d
     /tmp/ccFyksob.s:629    .text._ZN14contrast_sweep19start_capture_frameEv:00000000 $t
     /tmp/ccFyksob.s:634    .text._ZN14contrast_sweep19start_capture_frameEv:00000000 _ZN14contrast_sweep19start_capture_frameEv
     /tmp/ccFyksob.s:656    .text._ZN14contrast_sweep19start_capture_frameEv:0000000c $d
     /tmp/ccFyksob.s:661    .text._ZN14contrast_sweep22process_captured_frameEv:00000000 $t
     /tmp/ccFyksob.s:666    .text._ZN14contrast_sweep22process_captured_frameEv:00000000 _ZN14contrast_sweep22process_captured_frameEv
     /tmp/ccFyksob.s:1000   .text._ZN14contrast_sweep22process_captured_frameEv:00000184 $d
     /tmp/ccFyksob.s:1024   .rodata._ZZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI13contrast_passSt14default_deleteIS3_EEE12__FUNCTION__:00000000 _ZZN14contrast_sweep14add_iter_paramEN18contrast_processor11metric_typeES1_St10unique_ptrI13contrast_passSt14default_deleteIS3_EEE12__FUNCTION__
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN20contrast_refine_stepC1ER13cam_typedef_ttRK9rectanglePvS5_mm
_ZN9rectangleC1Esstt
assert_failed
slogf
_ZN20contrast_refine_step15start_move_lensEst
_ZN21lens_position_controlC1ER13cam_typedef_t
_ZNK21lens_position_control22get_object_distance_mmEss
_ZN20contrast_refine_step19start_capture_frameEv
_ZN20contrast_refine_step24compute_sharpness_metricERK9rectanglem
