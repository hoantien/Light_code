/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: camera_module.proto */

#ifndef PROTOBUF_C_camera_5fmodule_2eproto__INCLUDED
#define PROTOBUF_C_camera_5fmodule_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "camera_id.pb-c.h"
#include "point2i.pb-c.h"
#include "point2f.pb-c.h"

typedef struct _Ltpb__CameraModule Ltpb__CameraModule;
typedef struct _Ltpb__CameraModule__AFInfo Ltpb__CameraModule__AFInfo;
typedef struct _Ltpb__CameraModule__Surface Ltpb__CameraModule__Surface;


/* --- enums --- */

typedef enum _Ltpb__CameraModule__AFInfo__AFMode {
  LTPB__CAMERA_MODULE__AFINFO__AFMODE__AUTO = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LTPB__CAMERA_MODULE__AFINFO__AFMODE)
} Ltpb__CameraModule__AFInfo__AFMode;
typedef enum _Ltpb__CameraModule__Surface__FormatType {
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RGB_UNPACKED_8BPP = 0,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RGB_UNPACKED_16BPP = 1,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RGB_PACKED_10BPP = 2,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RGB_PACKED_12BPP = 3,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RGB_PACKED_14BPP = 4,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RAW_UNPACKED_8BPP = 5,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RAW_UNPACKED_16BPP = 6,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RAW_PACKED_10BPP = 7,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RAW_PACKED_12BPP = 8,
  LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE__RAW_PACKED_14BPP = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LTPB__CAMERA_MODULE__SURFACE__FORMAT_TYPE)
} Ltpb__CameraModule__Surface__FormatType;

/* --- messages --- */

/*
 * AF related properties
 */
struct  _Ltpb__CameraModule__AFInfo
{
  ProtobufCMessage base;
  Ltpb__CameraModule__AFInfo__AFMode mode;
  Ltpb__Point2F *roi_center;
  protobuf_c_boolean has_roi_estimated_disparity;
  float roi_estimated_disparity;
};
#define LTPB__CAMERA_MODULE__AFINFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__camera_module__afinfo__descriptor) \
    , 0, NULL, 0,0 }


/*
 * captured data surface descriptor
 */
struct  _Ltpb__CameraModule__Surface
{
  ProtobufCMessage base;
  /*
   * the coordinate of top-left pixel in sensor pixel space
   * normally (0,0) unless we capture a crop of the sensor
   */
  Ltpb__Point2I *start;
  /*
   * the size of the image data in pixels
   */
  Ltpb__Point2I *size;
  /*
   * pixel data encoding format
   */
  Ltpb__CameraModule__Surface__FormatType format;
  /*
   * the distance in bytes between two consecutive rows, set to zero for packed or "auto" mode
   */
  uint32_t row_stride;
  /*
   * offset where the frame RAW data starts in the BLOB
   */
  uint64_t data_offset;
  /*
   * defines sensor data scaling, necessary do define if we're storing binned sensor data
   * when undefined we assume the sensor data is unscaled (1,1)
   */
  Ltpb__Point2F *data_scale;
};
#define LTPB__CAMERA_MODULE__SURFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__camera_module__surface__descriptor) \
    , NULL, NULL, 0, 0, 0, NULL }


struct  _Ltpb__CameraModule
{
  ProtobufCMessage base;
  /*
   * auto-focus related properties
   */
  Ltpb__CameraModule__AFInfo *af_info;
  Ltpb__CameraID id;
  /*
   * set to false if sensor is damaged
   */
  protobuf_c_boolean is_enabled;
  /*
   * HAL mirror position reading
   */
  protobuf_c_boolean has_mirror_position;
  int32_t mirror_position;
  /*
   * HAL lens position reading
   */
  int32_t lens_position;
  /*
   * in ISO units, e.g., 100 == ISO100, might include digital gain
   */
  uint32_t sensor_total_gain;
  /*
   * this corresponds to the actual analog sensor gain, which often will be different than total_gain
   */
  float sensor_analog_gain;
  /*
   * exposure in microseconds (TODO: nano?)
   */
  uint64_t sensor_exposure;
  /*
   * sensor data surface descriptor
   */
  Ltpb__CameraModule__Surface *sensor_data_surface;
  /*
   * temparature in degrees C
   */
  protobuf_c_boolean has_sensor_temparature;
  int32_t sensor_temparature;
  /*
   * is the data horizontally flipped?
   */
  protobuf_c_boolean has_sensor_is_horizontal_flip;
  protobuf_c_boolean sensor_is_horizontal_flip;
  /*
   * is the data vertically flipped?
   */
  protobuf_c_boolean has_sensor_is_vertical_flip;
  protobuf_c_boolean sensor_is_vertical_flip;
  /*
   * custom coordinate of red pixel in 2x2 bayer pattern
   */
  Ltpb__Point2I *sensor_bayer_red_override;
  /*
   * digital gain 
   * this is the actual digital gain applied on top of the sensor_analog_gain
   * if defined, sensor_total_gain can be approximated by sensor_analog_gain * sensor_digital_gain
   */
  protobuf_c_boolean has_sensor_digital_gain;
  float sensor_digital_gain;
};
#define LTPB__CAMERA_MODULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__camera_module__descriptor) \
    , NULL, 0, 0, 0,0, 0, 0, 0, 0, NULL, 0,0, 0,0, 0,0, NULL, 0,0 }


/* Ltpb__CameraModule__AFInfo methods */
void   ltpb__camera_module__afinfo__init
                     (Ltpb__CameraModule__AFInfo         *message);
/* Ltpb__CameraModule__Surface methods */
void   ltpb__camera_module__surface__init
                     (Ltpb__CameraModule__Surface         *message);
/* Ltpb__CameraModule methods */
void   ltpb__camera_module__init
                     (Ltpb__CameraModule         *message);
size_t ltpb__camera_module__get_packed_size
                     (const Ltpb__CameraModule   *message);
size_t ltpb__camera_module__pack
                     (const Ltpb__CameraModule   *message,
                      uint8_t             *out);
size_t ltpb__camera_module__pack_to_buffer
                     (const Ltpb__CameraModule   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__CameraModule *
       ltpb__camera_module__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__camera_module__free_unpacked
                     (Ltpb__CameraModule *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ltpb__CameraModule__AFInfo_Closure)
                 (const Ltpb__CameraModule__AFInfo *message,
                  void *closure_data);
typedef void (*Ltpb__CameraModule__Surface_Closure)
                 (const Ltpb__CameraModule__Surface *message,
                  void *closure_data);
typedef void (*Ltpb__CameraModule_Closure)
                 (const Ltpb__CameraModule *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ltpb__camera_module__descriptor;
extern const ProtobufCMessageDescriptor ltpb__camera_module__afinfo__descriptor;
extern const ProtobufCEnumDescriptor    ltpb__camera_module__afinfo__afmode__descriptor;
extern const ProtobufCMessageDescriptor ltpb__camera_module__surface__descriptor;
extern const ProtobufCEnumDescriptor    ltpb__camera_module__surface__format_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_camera_5fmodule_2eproto__INCLUDED */
