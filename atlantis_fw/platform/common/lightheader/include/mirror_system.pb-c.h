/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: mirror_system.proto */

#ifndef PROTOBUF_C_mirror_5fsystem_2eproto__INCLUDED
#define PROTOBUF_C_mirror_5fsystem_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "matrix3x3f.pb-c.h"
#include "point3f.pb-c.h"
#include "range2f.pb-c.h"

typedef struct _Ltpb__MirrorSystem Ltpb__MirrorSystem;
typedef struct _Ltpb__MirrorActuatorMapping Ltpb__MirrorActuatorMapping;
typedef struct _Ltpb__MirrorActuatorMapping__QuadraticModel Ltpb__MirrorActuatorMapping__QuadraticModel;
typedef struct _Ltpb__MirrorActuatorMapping__ActuatorAnglePair Ltpb__MirrorActuatorMapping__ActuatorAnglePair;


/* --- enums --- */

/*
 * Transformation type we apply to our input and output variables
 */
typedef enum _Ltpb__MirrorActuatorMapping__TransformationType {
  /*
   * / normalize the data by mean and std
   */
  LTPB__MIRROR_ACTUATOR_MAPPING__TRANSFORMATION_TYPE__MEAN_STD_NORMALIZE = 0,
  /*
   * / tan( theta/2)
   */
  LTPB__MIRROR_ACTUATOR_MAPPING__TRANSFORMATION_TYPE__TAN_HALF_THETA = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LTPB__MIRROR_ACTUATOR_MAPPING__TRANSFORMATION_TYPE)
} Ltpb__MirrorActuatorMapping__TransformationType;

/* --- messages --- */

/*
 * Strucutre that defines the mirror system
 */
struct  _Ltpb__MirrorSystem
{
  ProtobufCMessage base;
  /*
   * 3D Location of the camera in global coordinate system (in mm)
   */
  Ltpb__Point3F *real_camera_location;
  /*
   * Camera orientation in global coordinate system 
   */
  Ltpb__Matrix3x3F *real_camera_orientation;
  /*
   * Rotation axis of the mirror
   */
  Ltpb__Point3F *rotation_axis;
  /*
   * A point on the rotation axis
   */
  Ltpb__Point3F *point_on_rotation_axis;
  /*
   * Distance between a point on the rotation axis and the mirror plane (in mm)
   */
  float distance_mirror_plane_to_point_on_rotation_axis;
  /*
   * Mirror normal when the mirror is at zero degrees
   */
  Ltpb__Point3F *mirror_normal_at_zero_degrees;
  /*
   * Is there a flip required for the image around x axis -- This is required even if the firmware
   * has flipped the image. This is not redundant information.
   */
  protobuf_c_boolean flip_img_around_x;
  /*
   * Range of the mirror angle
   */
  Ltpb__Range2F *mirror_angle_range;
  /*
   * Reprojection error during factory calibration
   */
  protobuf_c_boolean has_reprojection_error;
  float reprojection_error;
};
#define LTPB__MIRROR_SYSTEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__mirror_system__descriptor) \
    , NULL, NULL, NULL, NULL, 0, NULL, 0, NULL, 0,0 }


/*
 * Structure that holds the variables for the quadratic model -- required by MirrorActuatorMapping
 */
struct  _Ltpb__MirrorActuatorMapping__QuadraticModel
{
  ProtobufCMessage base;
  /*
   * We need to solve a quadratic equation to get the mirror angle. 
   * Roots of the quadratic system are represented here by : 
   * rplus = (-b + sqrt(b^2-4ac) ) / 2a
   * and rminus = (-b - sqrt(b^2-4ac) ) / 2a
   * On the left side of the curve, do we use rplus 
   */
  protobuf_c_boolean use_rplus_for_left_segment;
  /*
   * On the right side of the curve, do we use rplus
   */
  protobuf_c_boolean use_rplus_for_right_segment;
  /*
   * Value which divides the left segment and the right segment of the curve
   */
  float inflection_value;
  size_t n_model_coeffs;
  float *model_coeffs;
};
#define LTPB__MIRROR_ACTUATOR_MAPPING__QUADRATIC_MODEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__mirror_actuator_mapping__quadratic_model__descriptor) \
    , 0, 0, 0, 0,NULL }


/*
 * Structure to hold the hall code corresponding to a mirror angle.
 */
struct  _Ltpb__MirrorActuatorMapping__ActuatorAnglePair
{
  ProtobufCMessage base;
  /*
   * Mirror hall code reading
   */
  int32_t hall_code;
  /*
   * Corresponding mirror angle
   */
  float angle;
};
#define LTPB__MIRROR_ACTUATOR_MAPPING__ACTUATOR_ANGLE_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__mirror_actuator_mapping__actuator_angle_pair__descriptor) \
    , 0, 0 }


/*
 * Structure that holds the mapping: map mirror angle  <---> mirror hall code ( and vice versa )
 */
struct  _Ltpb__MirrorActuatorMapping
{
  ProtobufCMessage base;
  Ltpb__MirrorActuatorMapping__TransformationType transformation_type;
  /*
   * Mean actuator length -- used as an offset for normalization
   */
  float actuator_length_offset;
  /*
   * Standard deviation of the actuator length -- used as scale for normalization
   */
  float actuator_length_scale;
  /*
   * Mean mirror angle -- used as an offset for normalizing angles
   */
  float mirror_angle_offset;
  /*
   * Standard deviation of the mirror angle -- used as a scale for normalizing mirror angles.
   */
  float mirror_angle_scale;
  /*
   * A vector of actuator angle pairs
   */
  size_t n_actuator_angle_pair_vec;
  Ltpb__MirrorActuatorMapping__ActuatorAnglePair **actuator_angle_pair_vec;
  /*
   * Quadratic model parameters
   */
  Ltpb__MirrorActuatorMapping__QuadraticModel *quadratic_model;
  protobuf_c_boolean has_angle_to_hall_code_error;
  float angle_to_hall_code_error;
  protobuf_c_boolean has_hall_code_to_angle_error;
  float hall_code_to_angle_error;
  /*
   * Hall code range of the mirror
   */
  Ltpb__Range2F *hall_code_range;
};
#define LTPB__MIRROR_ACTUATOR_MAPPING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ltpb__mirror_actuator_mapping__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, NULL, 0,0, 0,0, NULL }


/* Ltpb__MirrorSystem methods */
void   ltpb__mirror_system__init
                     (Ltpb__MirrorSystem         *message);
size_t ltpb__mirror_system__get_packed_size
                     (const Ltpb__MirrorSystem   *message);
size_t ltpb__mirror_system__pack
                     (const Ltpb__MirrorSystem   *message,
                      uint8_t             *out);
size_t ltpb__mirror_system__pack_to_buffer
                     (const Ltpb__MirrorSystem   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__MirrorSystem *
       ltpb__mirror_system__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__mirror_system__free_unpacked
                     (Ltpb__MirrorSystem *message,
                      ProtobufCAllocator *allocator);
/* Ltpb__MirrorActuatorMapping__QuadraticModel methods */
void   ltpb__mirror_actuator_mapping__quadratic_model__init
                     (Ltpb__MirrorActuatorMapping__QuadraticModel         *message);
/* Ltpb__MirrorActuatorMapping__ActuatorAnglePair methods */
void   ltpb__mirror_actuator_mapping__actuator_angle_pair__init
                     (Ltpb__MirrorActuatorMapping__ActuatorAnglePair         *message);
/* Ltpb__MirrorActuatorMapping methods */
void   ltpb__mirror_actuator_mapping__init
                     (Ltpb__MirrorActuatorMapping         *message);
size_t ltpb__mirror_actuator_mapping__get_packed_size
                     (const Ltpb__MirrorActuatorMapping   *message);
size_t ltpb__mirror_actuator_mapping__pack
                     (const Ltpb__MirrorActuatorMapping   *message,
                      uint8_t             *out);
size_t ltpb__mirror_actuator_mapping__pack_to_buffer
                     (const Ltpb__MirrorActuatorMapping   *message,
                      ProtobufCBuffer     *buffer);
Ltpb__MirrorActuatorMapping *
       ltpb__mirror_actuator_mapping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ltpb__mirror_actuator_mapping__free_unpacked
                     (Ltpb__MirrorActuatorMapping *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ltpb__MirrorSystem_Closure)
                 (const Ltpb__MirrorSystem *message,
                  void *closure_data);
typedef void (*Ltpb__MirrorActuatorMapping__QuadraticModel_Closure)
                 (const Ltpb__MirrorActuatorMapping__QuadraticModel *message,
                  void *closure_data);
typedef void (*Ltpb__MirrorActuatorMapping__ActuatorAnglePair_Closure)
                 (const Ltpb__MirrorActuatorMapping__ActuatorAnglePair *message,
                  void *closure_data);
typedef void (*Ltpb__MirrorActuatorMapping_Closure)
                 (const Ltpb__MirrorActuatorMapping *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ltpb__mirror_system__descriptor;
extern const ProtobufCMessageDescriptor ltpb__mirror_actuator_mapping__descriptor;
extern const ProtobufCMessageDescriptor ltpb__mirror_actuator_mapping__quadratic_model__descriptor;
extern const ProtobufCMessageDescriptor ltpb__mirror_actuator_mapping__actuator_angle_pair__descriptor;
extern const ProtobufCEnumDescriptor    ltpb__mirror_actuator_mapping__transformation_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_mirror_5fsystem_2eproto__INCLUDED */
